---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Dashboard - AquaDelivery">
  <!-- Pantalla de carga -->
  <div id="loading" class="loading-screen">
    <div class="spinner"></div>
    <p>Cargando aplicación...</p>
  </div>

  <!-- Aplicación principal -->
  <div id="mainApp" class="hidden">
    <div class="app-container">
      <!-- Header con gradiente -->
      <header class="header">
        <div class="header-content">
          <div class="header-left">
            <div class="app-icon">💧</div>
            <h1 class="app-title">AquaDelivery</h1>
          </div>
          <div class="header-right">
            <span id="userInfo" class="user-info"></span>
            <button onclick="logout()" class="logout-button">
              <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                <path d="M10 12.5a.5.5 0 0 1-.5.5h-8a.5.5 0 0 1-.5-.5v-9a.5.5 0 0 1 .5-.5h8a.5.5 0 0 1 .5.5v2a.5.5 0 0 0 1 0v-2A1.5 1.5 0 0 0 9.5 2h-8A1.5 1.5 0 0 0 0 3.5v9A1.5 1.5 0 0 0 1.5 14h8a1.5 1.5 0 0 0 1.5-1.5v-2a.5.5 0 0 0-1 0v2z"/>
                <path d="M15.854 8.354a.5.5 0 0 0 0-.708l-3-3a.5.5 0 0 0-.708.708L14.293 7.5H5.5a.5.5 0 0 0 0 1h8.793l-2.147 2.146a.5.5 0 0 0 .708.708l3-3z"/>
              </svg>
              Salir
            </button>
          </div>
        </div>
      </header>

      <!-- Navegación Desktop -->
      <nav class="nav-buttons">
        <button data-route="pedidos" class="nav-button active">
          <div class="nav-icon">📦</div>
          <span>Pedidos</span>
        </button>
        <button data-route="clientes" class="nav-button">
          <div class="nav-icon">👥</div>
          <span>Clientes</span>
        </button>
        <button data-route="productos" class="nav-button">
          <div class="nav-icon">🛍️</div>
          <span>Productos</span>
        </button>
        <button data-route="pagos" class="nav-button">
          <div class="nav-icon">💰</div>
          <span>Pagos</span>
        </button>
      </nav>

      <!-- Contenido principal -->
      <main class="main-content">
        <div id="contentArea" class="content-card">
          <!-- El contenido se cargará aquí dinámicamente -->
        </div>
      </main>

      <!-- Navegación Móvil -->
      <nav class="mobile-nav">
        <button data-route="pedidos" class="mobile-nav-button active">
          <div class="mobile-nav-icon">📦</div>
          <span>Pedidos</span>
        </button>
        <button data-route="clientes" class="mobile-nav-button">
          <div class="mobile-nav-icon">👥</div>
          <span>Clientes</span>
        </button>
        <button data-route="productos" class="mobile-nav-button">
          <div class="mobile-nav-icon">🛍️</div>
          <span>Productos</span>
        </button>
        <button data-route="pagos" class="mobile-nav-button">
          <div class="mobile-nav-icon">💰</div>
          <span>Pagos</span>
        </button>
      </nav>
    </div>
  </div>
</Layout>

<script>
// Estado global de la aplicación
let currentUser = null;
let currentRoute = 'pedidos';

// Verificar autenticación al cargar la página
document.addEventListener('DOMContentLoaded', async () => {
  await checkAuth();
});

// Verificar si el usuario está autenticado
async function checkAuth() {
  console.log('🔐 Verificando autenticación...');
  const token = localStorage.getItem('token');
  const userStr = localStorage.getItem('user');

  console.log('🔑 Token encontrado:', token ? 'Sí' : 'No');
  console.log('👤 Usuario encontrado:', userStr ? 'Sí' : 'No');

  if (!token || !userStr) {
    console.log('❌ No hay token o usuario, redirigiendo al login');
    redirectToLogin();
    return;
  }

  try {
    console.log('📡 Verificando token con el servidor...');
    // Verificar que el token sea válido haciendo una petición simple
    const response = await fetch('/api/pedidos', {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });

    console.log('📥 Respuesta del servidor:', response.status, response.statusText);

    if (!response.ok) {
      const errorText = await response.text();
      console.error('❌ Error del servidor:', errorText);
      throw new Error(`Token inválido: ${response.status} - ${errorText}`);
    }

    console.log('✅ Token válido, mostrando aplicación');
    currentUser = JSON.parse(userStr);
    showMainApp();
    loadRoute(currentRoute);
  } catch (error) {
    console.error('💥 Error de autenticación:', error);
    console.log('🧹 Limpiando localStorage y redirigiendo al login');
    localStorage.removeItem('token');
    localStorage.removeItem('user');
    redirectToLogin();
  }
}

// Redirigir al login
function redirectToLogin() {
  if (window.location.pathname !== '/login') {
    window.location.href = '/login';
  }
}

// Mostrar la aplicación principal
function showMainApp() {
  document.getElementById('loading').classList.add('hidden');
  document.getElementById('mainApp').classList.remove('hidden');

  // Mostrar información del usuario
  const userInfo = document.getElementById('userInfo');
  if (userInfo && currentUser) {
    userInfo.textContent = `Hola, ${currentUser.nombre || currentUser.telegramId}`;
  }
}

// Función de logout
function logout() {
  if (confirm('¿Estás seguro de que quieres cerrar sesión?')) {
    localStorage.removeItem('token');
    localStorage.removeItem('user');
    window.location.href = '/login';
  }
}

// Navegación
document.addEventListener('click', (e) => {
  if (e.target.matches('[data-route]') || e.target.closest('[data-route]')) {
    const button = e.target.matches('[data-route]') ? e.target : e.target.closest('[data-route]');
    const route = button.getAttribute('data-route');
    navigateTo(route);
  }
});

function navigateTo(route) {
  currentRoute = route;
  
  // Actualizar botones activos
  document.querySelectorAll('.nav-button, .mobile-nav-button').forEach(btn => {
    btn.classList.remove('active');
  });
  
  document.querySelectorAll(`[data-route="${route}"]`).forEach(btn => {
    btn.classList.add('active');
  });
  
  loadRoute(route);
}

// Cargar contenido de la ruta
async function loadRoute(route) {
  const contentArea = document.getElementById('contentArea');
  contentArea.innerHTML = '<div style="display: flex; justify-content: center; padding: 2rem;"><div class="spinner"></div></div>';

  try {
    switch (route) {
      case 'pedidos':
        await loadPedidos();
        break;
      case 'clientes':
        await loadClientes();
        break;
      case 'productos':
        await loadProductos();
        break;
      case 'pagos':
        await loadPagos();
        break;
      default:
        contentArea.innerHTML = '<div style="text-align: center; padding: 2rem; color: #6b7280;">Página no encontrada</div>';
    }
  } catch (error) {
    console.error('Error cargando ruta:', error);
    contentArea.innerHTML = '<div style="text-align: center; padding: 2rem; color: #dc2626;">Error cargando contenido</div>';
  }
}

// Cargar pedidos
async function loadPedidos() {
  console.log('📦 Cargando pedidos...');
  const token = localStorage.getItem('token');

  try {
    const response = await fetch('/api/pedidos', {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('❌ Error del servidor:', errorText);
      throw new Error(`Error ${response.status}: ${errorText}`);
    }

    const pedidos = await response.json();
    console.log('✅ Pedidos cargados:', pedidos.length, 'pedidos');
    console.log('📋 Datos de pedidos:', pedidos);

    // Guardar en variables globales para filtros
    allPedidos = pedidos;
    currentPedidos = pedidos;

    renderPedidos(pedidos);
  } catch (error) {
    console.error('💥 Error cargando pedidos:', error);
    const contentArea = document.getElementById('contentArea');
    if (contentArea) {
      contentArea.innerHTML = `
        <h3 class="content-title">Gestión de Pedidos</h3>
        <div style="text-align: center; padding: 2rem; color: #dc2626;">
          <p>Error cargando pedidos: ${error.message}</p>
          <button onclick="loadPedidos()" class="btn-primary" style="margin-top: 1rem;">
            Reintentar
          </button>
        </div>
      `;
    }
  }
}

function renderPedidos(pedidos) {
  const contentArea = document.getElementById('contentArea');

  if (pedidos.length === 0) {
    contentArea.innerHTML = `
      <h3 class="content-title">Gestión de Pedidos</h3>
      <div style="text-align: center; padding: 3rem; color: #6b7280;">
        <p style="font-size: 1.125rem; margin-bottom: 0.5rem;">No hay pedidos registrados</p>
        <p style="font-size: 0.875rem;">Los pedidos aparecerán aquí cuando se registren en el sistema.</p>
      </div>
    `;
    return;
  }

  const html = `
    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5rem;">
      <h3 class="content-title" style="margin-bottom: 0;">Gestión de Pedidos</h3>
      <button class="btn-primary" style="width: auto; padding: 0.5rem 1rem;">
        + Nuevo Pedido
      </button>
    </div>

    <div style="margin-bottom: 1rem; display: flex; gap: 1rem; flex-wrap: wrap;">
      <select id="filterEstado" onchange="filterPedidos()" class="form-input" style="width: auto;">
        <option value="">Todos los estados</option>
        <option value="Pendiente">Pendiente</option>
        <option value="En Preparación">En Preparación</option>
        <option value="Entregado">Entregado</option>
      </select>

      <input
        type="date"
        id="filterFecha"
        onchange="filterPedidos()"
        class="form-input"
        style="width: auto;"
      />
    </div>

    <div style="display: grid; gap: 1rem;">
      ${pedidos.map(pedido => {
        // Asegurar que todos los campos tengan valores por defecto
        const id = pedido.id || pedido.codigo || 'N/A';
        const clienteNombre = pedido.cliente_nombre || pedido.nombre || 'Cliente sin nombre';
        const direccion = pedido.direccion || 'Dirección no especificada';
        const fechaPedido = pedido.fecha_pedido || pedido.fechaPedido;
        const total = pedido.total || 0;
        const estado = pedido.estado || 'Pendiente';

        // Formatear fecha
        let fechaFormateada = 'Fecha no disponible';
        if (fechaPedido) {
          try {
            const fecha = new Date(fechaPedido);
            if (!isNaN(fecha.getTime())) {
              fechaFormateada = fecha.toLocaleDateString('es-ES', {
                year: 'numeric',
                month: 'short',
                day: 'numeric'
              });
            }
          } catch (e) {
            console.error('Error formateando fecha:', e);
          }
        }

        return `
          <div style="border: 1px solid #e5e7eb; border-radius: 0.5rem; padding: 1rem; background: white;">
            <div style="display: flex; justify-content: space-between; align-items: start;">
              <div style="flex: 1;">
                <h4 style="font-weight: 600; color: #111827; margin-bottom: 0.5rem;">#${id}</h4>
                <p style="font-size: 0.875rem; color: #4b5563; margin-bottom: 0.25rem;">👤 ${clienteNombre}</p>
                <p style="font-size: 0.875rem; color: #6b7280; margin-bottom: 0.25rem;">📍 ${direccion}</p>
                <p style="font-size: 0.875rem; color: #6b7280;">📅 ${fechaFormateada}</p>
              </div>
              <div style="text-align: right;">
                <p style="font-weight: 600; color: #059669; margin-bottom: 0.5rem; font-size: 1.125rem;">$${parseFloat(total).toFixed(2)}</p>
                <span style="display: inline-flex; align-items: center; padding: 0.25rem 0.75rem; border-radius: 9999px; font-size: 0.75rem; font-weight: 500; ${getStatusColor(estado)}">
                  ${estado}
                </span>
                <div style="margin-top: 0.5rem; display: flex; gap: 0.25rem; justify-content: flex-end;">
                  <button onclick="viewPedido(${id})" style="padding: 0.25rem 0.5rem; background: #6b7280; color: white; border: none; border-radius: 0.25rem; cursor: pointer; font-size: 0.75rem;">
                    Ver
                  </button>
                  <button onclick="editPedido(${id})" style="padding: 0.25rem 0.5rem; background: #3b82f6; color: white; border: none; border-radius: 0.25rem; cursor: pointer; font-size: 0.75rem;">
                    Editar
                  </button>
                </div>
              </div>
            </div>
          </div>
        `;
      }).join('')}
    </div>
  `;

  contentArea.innerHTML = html;
}

function getStatusColor(estado) {
  switch (estado) {
    case 'Pendiente':
      return 'background-color: #fef3c7; color: #92400e;';
    case 'En Preparación':
      return 'background-color: #dbeafe; color: #1e40af;';
    case 'Entregado':
      return 'background-color: #d1fae5; color: #065f46;';
    default:
      return 'background-color: #f3f4f6; color: #374151;';
  }
}

// Variables globales para pedidos
let currentPedidos = [];
let allPedidos = [];

// Filtrar pedidos
function filterPedidos() {
  const estadoFilter = document.getElementById('filterEstado')?.value || '';
  const fechaFilter = document.getElementById('filterFecha')?.value || '';

  let filteredPedidos = allPedidos;

  if (estadoFilter) {
    filteredPedidos = filteredPedidos.filter(pedido => pedido.estado === estadoFilter);
  }

  if (fechaFilter) {
    filteredPedidos = filteredPedidos.filter(pedido => {
      const pedidoFecha = new Date(pedido.fecha_pedido || pedido.fechaPedido);
      const filterFecha = new Date(fechaFilter);
      return pedidoFecha.toDateString() === filterFecha.toDateString();
    });
  }

  currentPedidos = filteredPedidos;
  renderPedidos(filteredPedidos);
}

// Ver detalles del pedido
function viewPedido(pedidoId) {
  const pedido = currentPedidos.find(p => (p.id || p.codigo) == pedidoId);
  if (!pedido) {
    alert('Pedido no encontrado');
    return;
  }

  const clienteNombre = pedido.cliente_nombre || pedido.nombre || 'Cliente sin nombre';
  const total = parseFloat(pedido.total || 0).toFixed(2);
  const estado = pedido.estado || 'Pendiente';
  const direccion = pedido.direccion || 'Dirección no especificada';

  alert(`Pedido #${pedidoId}\nCliente: ${clienteNombre}\nDirección: ${direccion}\nTotal: $${total}\nEstado: ${estado}`);
}

// Editar pedido
function editPedido(pedidoId) {
  alert('Funcionalidad de edición en desarrollo...');
}

// Cargar clientes
async function loadClientes() {
  const token = localStorage.getItem('token');
  const response = await fetch('/api/clientes', {
    headers: {
      'Authorization': `Bearer ${token}`
    }
  });

  if (!response.ok) {
    throw new Error('Error cargando clientes');
  }

  const clientes = await response.json();
  renderClientes(clientes);
}

function renderClientes(clientes) {
  const contentArea = document.getElementById('contentArea');

  const html = `
    <h3 class="content-title">Gestión de Clientes</h3>

    <div style="display: grid; gap: 1rem;">
      ${clientes.map(cliente => `
        <div style="border: 1px solid #e5e7eb; border-radius: 0.5rem; padding: 1rem; background: white;">
          <h4 style="font-weight: 600; color: #111827; margin-bottom: 0.25rem;">${cliente.nombre}</h4>
          <p style="font-size: 0.875rem; color: #4b5563; margin-bottom: 0.25rem;">${cliente.telefono}</p>
          <p style="font-size: 0.875rem; color: #6b7280;">${cliente.direccion}</p>
        </div>
      `).join('')}
    </div>
  `;

  contentArea.innerHTML = html;
}

// Cargar productos
async function loadProductos() {
  const token = localStorage.getItem('token');
  const response = await fetch('/api/productos', {
    headers: {
      'Authorization': `Bearer ${token}`
    }
  });

  if (!response.ok) {
    throw new Error('Error cargando productos');
  }

  const productos = await response.json();
  renderProductos(productos);
}

function renderProductos(productos) {
  const contentArea = document.getElementById('contentArea');

  const html = `
    <h3 class="content-title">Gestión de Productos</h3>

    <div style="margin-bottom: 1rem;">
      <button class="btn-primary" style="width: auto; padding: 0.5rem 1rem;">
        + Nuevo Producto
      </button>
    </div>

    <div style="display: grid; gap: 1rem;">
      ${productos.map(producto => `
        <div style="border: 1px solid #e5e7eb; border-radius: 0.5rem; padding: 1rem; background: white;">
          <h4 style="font-weight: 600; color: #111827; margin-bottom: 0.25rem;">${producto.nombre || 'Sin nombre'}</h4>
          <p style="font-size: 0.875rem; color: #4b5563; margin-bottom: 0.25rem;">$${producto.precio || '0.00'}</p>
          <p style="font-size: 0.875rem; color: #6b7280;">${producto.descripcion || 'Sin descripción'}</p>
        </div>
      `).join('')}
    </div>
  `;

  contentArea.innerHTML = html;
}

// Cargar pagos
async function loadPagos() {
  const contentArea = document.getElementById('contentArea');

  const html = `
    <h3 class="content-title">Gestión de Pagos</h3>
    <p style="color: #4b5563;">Funcionalidad de pagos en desarrollo...</p>
  `;

  contentArea.innerHTML = html;
}
</script>
