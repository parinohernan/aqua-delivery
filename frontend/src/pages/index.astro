---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Aqua Delivery Manager">
  <!-- Pantalla de carga -->
  <div id="loading" class="loading-screen">
    <div class="spinner"></div>
    <p>Cargando aplicaci√≥n...</p>
  </div>

  <!-- Aplicaci√≥n principal -->
  <div id="mainApp" class="hidden">
    <div class="app-container">
      <!-- Header con gradiente -->
      <header class="header">
        <div class="header-content">
          <div class="header-left">
            <div class="app-icon">
              <img src="/drop.png" alt="Aqua Logo" style="width: 50%; height: 50%; object-fit: contain;" />
            </div>
            <h1 class="app-title">Aqua Delivery Manager</h1>
          </div>
          <div class="header-right">
            <span id="userInfo" class="user-info"></span>
            <button onclick="logout()" class="logout-button">
              <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                <path d="M10 12.5a.5.5 0 0 1-.5.5h-8a.5.5 0 0 1-.5-.5v-9a.5.5 0 0 1 .5-.5h8a.5.5 0 0 1 .5.5v2a.5.5 0 0 0 1 0v-2A1.5 1.5 0 0 0 9.5 2h-8A1.5 1.5 0 0 0 0 3.5v9A1.5 1.5 0 0 0 1.5 14h8a1.5 1.5 0 0 0 1.5-1.5v-2a.5.5 0 0 0-1 0v2z"/>
                <path d="M15.854 8.354a.5.5 0 0 0 0-.708l-3-3a.5.5 0 0 0-.708.708L14.293 7.5H5.5a.5.5 0 0 0 0 1h8.793l-2.147 2.146a.5.5 0 0 0 .708.708l3-3z"/>
              </svg>
              Salir
            </button>
          </div>
        </div>
      </header>

      <!-- Navegaci√≥n Desktop -->
      <nav class="nav-buttons">
        <button data-route="pedidos" class="nav-button active">
          <div class="nav-icon">üì¶</div>
          <span>Pedidos</span>
        </button>
        <button data-route="clientes" class="nav-button">
          <div class="nav-icon">üë•</div>
          <span>Clientes</span>
        </button>
        <button data-route="productos" class="nav-button">
          <div class="nav-icon">üõçÔ∏è</div>
          <span>Productos</span>
        </button>
        <button data-route="informes" class="nav-button">
          <div class="nav-icon">üìä</div>
          <span>Informes</span>
        </button>
      </nav>

      <!-- Contenido principal -->
      <main class="main-content">
        <div id="contentArea" class="content-card">
          <!-- El contenido se cargar√° aqu√≠ din√°micamente -->
        </div>
      </main>

      <!-- Navegaci√≥n M√≥vil -->
      <nav class="mobile-nav">
        <button data-route="pedidos" class="mobile-nav-button active">
          <div class="mobile-nav-icon">üì¶</div>
          <span>Pedidos</span>
        </button>
        <button data-route="clientes" class="mobile-nav-button">
          <div class="mobile-nav-icon">üë•</div>
          <span>Clientes</span>
        </button>
        <button data-route="productos" class="mobile-nav-button">
          <div class="mobile-nav-icon">üõçÔ∏è</div>
          <span>Productos</span>
        </button>
        <button data-route="informes" class="mobile-nav-button">
          <div class="mobile-nav-icon">üìä</div>
          <span>Informes</span>
        </button>
      </nav>
    </div>
  </div>
</Layout>

<script>
// Definir funci√≥n de informes INMEDIATAMENTE para evitar errores de carga
window.generarInforme = async function() {
  console.log('üöÄ window.generarInforme() llamada');
  
  // Verificar que los elementos existen
  const fechaDesde = document.getElementById('fechaDesde')?.value;
  const fechaHasta = document.getElementById('fechaHasta')?.value;
  const tipoInforme = document.getElementById('tipoInforme')?.value;
  const resultadosDiv = document.getElementById('informeResultados');

  console.log('üìã Datos del formulario:', { fechaDesde, fechaHasta, tipoInforme });

  if (!fechaDesde || !fechaHasta) {
    alert('Por favor selecciona ambas fechas');
    return;
  }

  if (new Date(fechaDesde) > new Date(fechaHasta)) {
    alert('La fecha desde no puede ser mayor a la fecha hasta');
    return;
  }

  try {
    // Mostrar loading
    if (resultadosDiv) {
      resultadosDiv.innerHTML = `
        <div class="loading-state">
          <div class="spinner"></div>
          <p>Generando informe...</p>
        </div>
      `;
    }

    const token = localStorage.getItem('token');
    const response = await fetch(`https://back-adm.fly.dev/api/informes/ventas?fechaDesde=${fechaDesde}&fechaHasta=${fechaHasta}&tipo=${tipoInforme}`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });

    if (!response.ok) {
      throw new Error('Error al generar el informe');
    }

    const datos = await response.json();
    
    // Mostrar resultados
    if (tipoInforme === 'resumen') {
      mostrarInformeResumen(datos, resultadosDiv);
    } else {
      mostrarInformeDetallado(datos, resultadosDiv);
    }

  } catch (error) {
    console.error('‚ùå Error generando informe:', error);
    if (resultadosDiv) {
      resultadosDiv.innerHTML = `
        <div class="error-state">
          <div class="error-icon">‚ö†Ô∏è</div>
          <h4>Error al generar informe</h4>
          <p>${error.message}</p>
        </div>
      `;
    }
  }
};

// Funciones auxiliares para informes (definidas antes de su uso)
function mostrarInformeResumen(datos, container) {
  const html = `
    <div class="informe-card">
      <h4>üìà Resumen de Ventas</h4>
      <div class="resumen-stats">
        <div class="stat-item">
          <div class="stat-value">${datos.totalPedidos || 0}</div>
          <div class="stat-label">Total Pedidos</div>
        </div>
        <div class="stat-item">
          <div class="stat-value">$${(datos.totalVentas || 0).toLocaleString('es-AR')}</div>
          <div class="stat-label">Total Ventas</div>
        </div>
        <div class="stat-item">
          <div class="stat-value">${datos.totalClientes || 0}</div>
          <div class="stat-label">Clientes √önicos</div>
        </div>
        <div class="stat-item">
          <div class="stat-value">$${((datos.totalVentas || 0) / (datos.totalPedidos || 1)).toLocaleString('es-AR')}</div>
          <div class="stat-label">Promedio por Pedido</div>
        </div>
      </div>
      
      ${datos.productos && datos.productos.length > 0 ? `
        <div class="productos-vendidos">
          <h5>Productos M√°s Vendidos</h5>
          <div class="productos-list">
            ${datos.productos.map(producto => `
              <div class="producto-item">
                <span class="producto-nombre">${producto.descripcion}</span>
                <span class="producto-cantidad">${producto.cantidad} unidades</span>
                <span class="producto-total">$${producto.total.toLocaleString('es-AR')}</span>
              </div>
            `).join('')}
          </div>
        </div>
      ` : ''}
    </div>
  `;
  
  container.innerHTML = html;
}

function mostrarInformeDetallado(datos, container) {
  // Guardar los datos originales para el filtrado
  if (!window.informeDetalladoData) {
    window.informeDetalladoData = datos;
  }
  
  const html = `
    <div class="informe-card">
      <h4>üìã Detalle por Cliente</h4>
      
      ${datos.clientes && datos.clientes.length > 0 ? `
        <div class="search-container">
          <div style="position: relative; max-width: 400px;">
            <input 
              type="text" 
              id="searchInformeClientes" 
              placeholder="üîç Buscar por nombre o apellido..." 
              class="search-input"
            />
          </div>
          <div class="search-counter">
            Mostrando ${datos.clientes.length} cliente${datos.clientes.length !== 1 ? 's' : ''}
          </div>
        </div>
        
        <div class="clientes-detalle" id="clientesDetalleContainer">
          ${datos.clientes.map((cliente, index) => `
            <div class="cliente-card" data-cliente-nombre="${(cliente.nombre + ' ' + (cliente.apellido || '')).toLowerCase()}">
              <div class="cliente-header">
                <div class="cliente-info">
                  <h5>${cliente.nombre} ${cliente.apellido || ''}</h5>
                  <p class="cliente-telefono">üìû ${cliente.telefono || 'Sin tel√©fono'}</p>
                </div>
                <div class="cliente-stats">
                  <div class="stat-mini">
                    <span class="stat-value">${cliente.totalPedidos}</span>
                    <span class="stat-label">Pedidos</span>
                  </div>
                  <div class="stat-mini">
                    <span class="stat-value">$${cliente.totalComprado.toLocaleString('es-AR')}</span>
                    <span class="stat-label">Total</span>
                  </div>
                  <div class="stat-mini">
                    <span class="stat-value">$${(cliente.totalComprado / cliente.totalPedidos).toLocaleString('es-AR')}</span>
                    <span class="stat-label">Promedio</span>
                  </div>
                </div>
              </div>
              
              ${cliente.productos && cliente.productos.length > 0 ? `
                <div class="productos-cliente">
                  <h6>üõçÔ∏è Productos Comprados:</h6>
                  <div class="productos-table">
                    <table class="mini-table">
                      <thead>
                        <tr>
                          <th>Producto</th>
                          <th>Cantidad</th>
                          <th>Precio Promedio</th>
                          <th>Total Pagado</th>
                          <th>Pedidos</th>
                        </tr>
                      </thead>
                      <tbody>
                        ${cliente.productos.map(producto => `
                          <tr>
                            <td><strong>${producto.descripcion}</strong></td>
                            <td>${producto.cantidadTotal} unidades</td>
                            <td>$${producto.precioPromedio.toLocaleString('es-AR')}</td>
                            <td>$${producto.totalPagado.toLocaleString('es-AR')}</td>
                            <td>${producto.pedidosConEsteProducto} pedidos</td>
                          </tr>
                        `).join('')}
                      </tbody>
                    </table>
                  </div>
                </div>
              ` : `
                <div class="empty-state-mini">
                  <p>No hay productos registrados para este cliente</p>
                </div>
              `}
              
             
            </div>
          `).join('')}
        </div>
      ` : `
        <div class="empty-state">
          <p>No se encontraron ventas en el per√≠odo seleccionado</p>
        </div>
      `}
    </div>
  `;
  
  container.innerHTML = html;
  
  // Configurar la funcionalidad de b√∫squeda
  setupInformeSearch();
}

// Funci√≥n para configurar la b√∫squeda en el informe detallado
function setupInformeSearch() {
  const searchInput = document.getElementById('searchInformeClientes');
  if (!searchInput) return;
  
  let searchTimeout;
  
  searchInput.addEventListener('input', function() {
    clearTimeout(searchTimeout);
    searchTimeout = setTimeout(() => {
      const searchTerm = this.value.toLowerCase().trim();
      filterInformeClientes(searchTerm);
    }, 300); // Debounce de 300ms
  });
  
  // Tambi√©n buscar al presionar Enter
  searchInput.addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
      const searchTerm = this.value.toLowerCase().trim();
      filterInformeClientes(searchTerm);
    }
  });
}

// Funci√≥n para filtrar clientes en el informe detallado
function filterInformeClientes(searchTerm) {
  const container = document.getElementById('clientesDetalleContainer');
  const searchInput = document.getElementById('searchInformeClientes');
  const counterDiv = searchInput?.parentElement?.nextElementSibling;
  
  if (!container || !window.informeDetalladoData) return;
  
  const clientes = window.informeDetalladoData.clientes || [];
  const clienteCards = container.querySelectorAll('.cliente-card');
  
  let visibleCount = 0;
  
  clienteCards.forEach(card => {
    const nombreCompleto = card.getAttribute('data-cliente-nombre') || '';
    const shouldShow = !searchTerm || nombreCompleto.includes(searchTerm);
    
    if (shouldShow) {
      card.style.display = 'block';
      visibleCount++;
    } else {
      card.style.display = 'none';
    }
  });
  
  // Actualizar contador
  if (counterDiv) {
    counterDiv.innerHTML = `
      <div class="search-counter">
        ${searchTerm ? `Mostrando ${visibleCount} de ${clientes.length} cliente${clientes.length !== 1 ? 's' : ''}` : `Mostrando ${clientes.length} cliente${clientes.length !== 1 ? 's' : ''}`}
        ${searchTerm ? ` (filtrado por "${searchTerm}")` : ''}
      </div>
    `;
  }
  
  // Mostrar mensaje si no hay resultados
  if (visibleCount === 0 && searchTerm) {
    const noResultsDiv = document.createElement('div');
    noResultsDiv.className = 'empty-state';
    noResultsDiv.innerHTML = `
      <div style="text-align: center; padding: 2rem; color: rgba(255, 255, 255, 0.8);">
        <div style="font-size: 3rem; margin-bottom: 1rem;">üîç</div>
        <h4 style="color: white; margin-bottom: 0.5rem;">No se encontraron clientes</h4>
        <p>No hay clientes que coincidan con "${searchTerm}"</p>
        <button onclick="clearInformeSearch()" class="clear-search-btn">Limpiar b√∫squeda</button>
      </div>
    `;
    
    // Remover mensaje anterior si existe
    const existingNoResults = container.querySelector('.empty-state');
    if (existingNoResults) {
      existingNoResults.remove();
    }
    
    container.appendChild(noResultsDiv);
  } else {
    // Remover mensaje de no resultados si existe
    const existingNoResults = container.querySelector('.empty-state');
    if (existingNoResults) {
      existingNoResults.remove();
    }
  }
}

// Funci√≥n para limpiar la b√∫squeda del informe
function clearInformeSearch() {
  const searchInput = document.getElementById('searchInformeClientes');
  if (searchInput) {
    searchInput.value = '';
    filterInformeClientes('');
    searchInput.focus();
  }
}

// Estado global de la aplicaci√≥n
let currentUser: any = null;
let currentRoute: string = 'pedidos';

// Variables globales para pedidos
let allPedidos = [];
let currentPedidos = [];

// Exponer variables globalmente para acceso desde otras funciones
window.allPedidos = allPedidos;
window.currentPedidos = currentPedidos;

// Mostrar modal para crear pedido
function showCreateOrderModal() {
  console.log('üéØ Intentando abrir modal de crear pedido...');
  console.log('üì¶ OrderModal disponible:', !!window.orderModal);
  
  if (window.orderModal) {
    console.log('‚úÖ Abriendo OrderModal...');
    
    // Verificar que el modal se cree correctamente
    const modalElement = document.getElementById('orderModal');
    console.log('üîç Modal DOM element:', !!modalElement);
    
    if (modalElement) {
      console.log('üîç Clases actuales del modal:', modalElement.className);
    }
    
    window.orderModal.show();
    
    // Verificar el estado despu√©s de show()
    setTimeout(() => {
      const modalAfter = document.getElementById('orderModal');
      if (modalAfter) {
        console.log('üîç Clases despu√©s de show():', modalAfter.className);
        console.log('üîç Estilos computados:', {
          display: window.getComputedStyle(modalAfter).display,
          opacity: window.getComputedStyle(modalAfter).opacity,
          visibility: window.getComputedStyle(modalAfter).visibility
        });
      }
    }, 50);
    
  } else {
    console.error('‚ùå OrderModal no est√° disponible');
    
    // Intentar cargar el modal despu√©s de un peque√±o delay
    setTimeout(() => {
      if (window.orderModal) {
        console.log('‚úÖ OrderModal disponible despu√©s del delay, abriendo...');
        window.orderModal.show();
      } else {
        console.error('‚ùå OrderModal sigue no disponible despu√©s del delay');
        alert('Error: Modal no disponible. Por favor, recarga la p√°gina.');
      }
    }, 100);
  }
}

// Exponer inmediatamente para evitar errores de timing
window.showCreateOrderModal = showCreateOrderModal;

// Configurar listeners con l√≠mite de reintentos
let setupAttempts = 0;
const maxAttempts = 10;

function trySetupEventListeners() {
  setupAttempts++;

  // Intentar configurar los event listeners si est√°n disponibles
  try {
    // Verificar si hay funciones de configuraci√≥n disponibles
    let configured = false;
    
    // Intentar configurar listeners de pedidos
    if (typeof window.setupPedidosEventListeners === 'function') {
      window.setupPedidosEventListeners();
      configured = true;
    }
    
    // Intentar configurar listeners de productos
    if (typeof window.setupProductosEventListeners === 'function') {
      window.setupProductosEventListeners();
      configured = true;
    }
    
    // Intentar configurar listeners de clientes
    if (typeof window.setupClientesEventListeners === 'function') {
      window.setupClientesEventListeners();
      configured = true;
    }
    
    if (configured) {
      console.log('‚úÖ Event listeners configurados exitosamente');
      return;
    }
  } catch (error) {
    console.warn('‚ö†Ô∏è Error configurando event listeners:', error);
  }

  if (setupAttempts < maxAttempts) {
    console.warn(`‚ö†Ô∏è Sistema de eventos no disponible, reintento ${setupAttempts}/${maxAttempts} en 500ms...`);
    setTimeout(trySetupEventListeners, 500);
  } else {
    console.error('‚ùå No se pudo configurar el sistema de eventos despu√©s de', maxAttempts, 'intentos');
  }
}

// Inicializaci√≥n principal de la aplicaci√≥n
document.addEventListener('DOMContentLoaded', async () => {
  console.log('üöÄ Inicializando aplicaci√≥n...');
  
  // Verificar autenticaci√≥n
  await checkAuth();
  
  // Configurar listeners de eventos con un peque√±o delay
  setTimeout(() => {
    if (typeof trySetupEventListeners === 'function') {
      trySetupEventListeners();
    } else {
      console.warn('‚ö†Ô∏è trySetupEventListeners no est√° disponible a√∫n');
    }
  }, 100);
});

// Verificar si el usuario est√° autenticado
async function checkAuth() {
  console.log('üîê Verificando autenticaci√≥n...');
  const token = localStorage.getItem('token');
  const userStr = localStorage.getItem('user');

  console.log('üîë Token encontrado:', token ? 'S√≠' : 'No');
  console.log('üë§ Usuario encontrado:', userStr ? 'S√≠' : 'No');

  if (!token || !userStr) {
    console.log('‚ùå No hay token o usuario, redirigiendo al login');
    redirectToLogin();
    return;
  }

  // Modo desarrollo: permitir saltarse la verificaci√≥n del servidor
  const isDevelopment = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';
  if (isDevelopment && localStorage.getItem('skipServerCheck') === 'true') {
    console.log('üîß Modo desarrollo: saltando verificaci√≥n del servidor');
    currentUser = JSON.parse(userStr);
    showMainApp();
    loadRoute(currentRoute);
    return;
  }

  try {
    console.log('üì° Verificando token con el servidor...');
    
    // Agregar timeout a la petici√≥n
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 5000); // 5 segundos timeout
    
    const response = await fetch('https://back-adm.fly.dev/api/clientes', {
      headers: {
        'Authorization': `Bearer ${token}`
      },
      signal: controller.signal
    });
    
    clearTimeout(timeoutId);
    console.log('üì• Respuesta del servidor:', response.status, response.statusText);

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Error del servidor:', errorText);
      throw new Error(`Token inv√°lido: ${response.status} - ${errorText}`);
    }

    console.log('‚úÖ Token v√°lido, mostrando aplicaci√≥n');
    currentUser = JSON.parse(userStr);
    showMainApp();
    loadRoute(currentRoute);
  } catch (error: unknown) {
    console.error('üí• Error de autenticaci√≥n:', error);
    
    if (error instanceof Error) {
    if (error.name === 'AbortError') {
      console.error('‚è∞ Timeout: El servidor no responde');
      if (window.showError) {
        window.showError('No se puede conectar con el servidor. Aseg√∫rate de que el backend est√© corriendo en el puerto 8001.', 10000);
      } else {
        alert('Error: No se puede conectar con el servidor. Aseg√∫rate de que el backend est√© corriendo en el puerto 8001.');
      }
    } else if (error.message.includes('fetch')) {
      console.error('üåê Error de conexi√≥n');
      if (window.showError) {
        window.showError('Error de conexi√≥n: No se puede conectar con el servidor. Verifica que el backend est√© corriendo.', 10000);
      } else {
        alert('Error de conexi√≥n: No se puede conectar con el servidor. Verifica que el backend est√© corriendo.');
      }
      }
    }
    
    console.log('üßπ Limpiando localStorage y redirigiendo al login');
    localStorage.removeItem('token');
    localStorage.removeItem('user');
    redirectToLogin();
  }
}

// Redirigir al login
function redirectToLogin() {
  if (window.location.pathname !== '/login') {
    window.location.href = '/login';
  }
}

// Mostrar la aplicaci√≥n principal
function showMainApp() {
  const loadingElement = document.getElementById('loading');
  const mainAppElement = document.getElementById('mainApp');
  
  if (loadingElement) loadingElement.classList.add('hidden');
  if (mainAppElement) mainAppElement.classList.remove('hidden');

  // Mostrar informaci√≥n del usuario
  const userInfo = document.getElementById('userInfo');
  if (userInfo && currentUser) {
    userInfo.textContent = `Hola, ${currentUser.nombre || currentUser.telegramId}`;
  }
}

// Funci√≥n de logout
function logout() {
  if (window.showConfirm) {
    window.showConfirm(
      '¬øEst√°s seguro de que quieres cerrar sesi√≥n?',
      () => {
        localStorage.removeItem('token');
        localStorage.removeItem('user');
        window.location.href = '/login';
      }
    );
  } else {
    if (confirm('¬øEst√°s seguro de que quieres cerrar sesi√≥n?')) {
      localStorage.removeItem('token');
      localStorage.removeItem('user');
      window.location.href = '/login';
    }
  }
}

// Navegaci√≥n
document.addEventListener('click', (e) => {
  const target = e.target as HTMLElement;
  if (target.matches('[data-route]') || target.closest('[data-route]')) {
    const button = target.matches('[data-route]') ? target : target.closest('[data-route]') as HTMLElement;
    const route = button.getAttribute('data-route');
    if (route) {
    navigateTo(route);
    }
  }
});

function navigateTo(route: string) {
  currentRoute = route;
  
  // Actualizar botones activos
  document.querySelectorAll('.nav-button, .mobile-nav-button').forEach(btn => {
    btn.classList.remove('active');
  });
  
  document.querySelectorAll(`[data-route="${route}"]`).forEach(btn => {
    btn.classList.add('active');
  });
  
  loadRoute(route);
}

// Cargar contenido de la ruta
async function loadRoute(route: string) {
  // Guardar la ruta actual para los event listeners
  window.currentRoute = route;

  const contentArea = document.getElementById('contentArea');
  if (contentArea) {
  contentArea.innerHTML = '<div style="display: flex; justify-content: center; padding: 2rem;"><div class="spinner"></div></div>';
  }

  try {
    switch (route) {
      case 'pedidos':
        await loadPedidosSection();
        break;
              case 'clientes':
          await loadClientesSection();
          break;
      case 'productos':
        await loadProductosSection();
        break;
      case 'informes':
        await loadInformes();
        break;
      default:
        contentArea.innerHTML = '<div style="text-align: center; padding: 2rem; color: #6b7280;">P√°gina no encontrada</div>';
    }
  } catch (error) {
    console.error('Error cargando ruta:', error);
      if (contentArea) {
    contentArea.innerHTML = '<div style="text-align: center; padding: 2rem; color: #dc2626;">Error cargando contenido</div>';
      }
  }
}

// Variables globales para filtros
let currentFilters: { estado: string; fecha: string; zona: string; search: string } = { estado: '', fecha: '', zona: '', search: '' };
let availableZonas: any[] = [];

// Cargar zonas disponibles
async function loadZonas() {
  console.log('üó∫Ô∏è Cargando zonas...');
  const token = localStorage.getItem('token');

  try {
    const response = await fetch('https://back-adm.fly.dev/api/zonas', {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });

    if (response.ok) {
      availableZonas = await response.json();
      console.log('‚úÖ Zonas cargadas:', availableZonas.length, 'zonas');
      updateZonaFilter();
    } else {
      console.warn('‚ö†Ô∏è No se pudieron cargar las zonas');
      availableZonas = [];
    }
  } catch (error) {
    console.error('üí• Error cargando zonas:', error);
    availableZonas = [];
  }
}

// Actualizar el filtro de zonas en el HTML
function updateZonaFilter() {
  const zonaFilter = document.getElementById('filterZona');
  if (zonaFilter && availableZonas.length > 0) {
    zonaFilter.innerHTML = '<option value="">Todas las zonas</option>' +
      availableZonas.map(zona => `<option value="${zona.zona}">${zona.zona}</option>`).join('');
  }
}

// Cargar secci√≥n de pedidos moderna
async function loadPedidosSection() {
  console.log('üöÄ Cargando secci√≥n de pedidos moderna...');
  const contentArea = document.getElementById('contentArea');
  
  if (!contentArea) {
    console.error('‚ùå Content area no encontrado');
    return;
  }

  // Renderizar la nueva UI moderna
  contentArea.innerHTML = `
    <div class="pedidos-section">
      <!-- Header de la secci√≥n -->
      <div class="pedidos-header">
        <div class="header-content">
          <h1 class="section-title">
            <span class="icon">üì¶</span>
            Pedidos
          </h1>

        </div>
      </div>

      <!-- Contenedor principal -->
      <div class="pedidos-container">
        <!-- Panel de acciones -->
        <div class="actions-panel">
          <div class="actions-header">
            <h3>üéØ Acciones R√°pidas</h3>
          </div>
          <div class="actions-content">
            <!-- Campo de b√∫squeda -->
            <div class="search-group">
              <div class="search-input-wrapper">
                <span class="search-icon">üîç</span>
                <input 
                  type="text" 
                  id="pedidoClienteFilter" 
                  class="search-input"
                  placeholder="Buscar cliente..."
                  oninput="applyPedidoFilters()"
                />
              </div>
            </div>

            <div class="action-buttons">
              <button onclick="window.showCreateOrderModal()" class="btn-create">
                ‚ûï Nuevo Pedido
              </button>

              <button onclick="window.showDeliveryMap()" class="btn-export">
                üó∫Ô∏è Mapa de Entregas
              </button>
            </div>
          </div>
        </div>

        <!-- Bot√≥n para mostrar/ocultar filtros -->
        <div class="filters-toggle">
          <button onclick="toggleAdvancedFilters()" class="btn-toggle-filters" id="toggleFiltersBtn">
            ‚ñº Mostrar Filtros
          </button>
        </div>

        <!-- Panel de filtros (oculto por defecto) -->
        <div class="filters-panel" id="advancedFiltersPanel" style="display: none;">
          <div class="filters-header">
            <h3>üîç Filtros Avanzados</h3>
          </div>
          <div class="filters-content">
            <div class="filter-group">
              <label class="filter-label">Estado del Pedido</label>
              <select id="pedidoEstadoFilter" class="filter-select">
                <option value="">Todos los estados</option>
                <option value="pendient" selected>üì¶ Pendientes</option>
                <option value="proceso">üîÑ En Proceso</option>
                <option value="entregad">‚úÖ Entregados</option>
                <option value="anulado">‚ùå Anulados</option>
              </select>
            </div>
            
            <div class="filter-group">
              <label class="filter-label">Fecha de Entrega</label>
              <input 
                type="date" 
                id="pedidoFechaFilter" 
                class="filter-input"
                placeholder="Seleccionar fecha..."
              />
            </div>
            
            <div class="filter-group">
              <label class="filter-label">Zona de Entrega</label>
              <select id="pedidoZonaFilter" class="filter-select">
                <option value="">Todas las zonas</option>
              </select>
            </div>
          </div>
          
          <div class="filter-actions">
            <button onclick="applyPedidoFilters()" class="btn-filter">
              üîç Aplicar Filtros
            </button>
            <button onclick="clearPedidoFilters()" class="btn-clear-filters">
              üóëÔ∏è Limpiar Filtros
            </button>
          </div>
        </div>

        <!-- Contador de pedidos -->
        <div class="pedidos-counter">
          <div class="counter-content">
            <span class="counter-label">üìä Pedidos Encontrados</span>
            <span class="counter-value" id="pedidosCounter">Cargando...</span>
          </div>
        </div>

        <!-- Lista de pedidos -->
        <div class="pedidos-list">
          <div class="list-header">
            <h3>üìã Lista de Pedidos</h3>
          </div>
          <div class="pedidos-grid" id="pedidosGrid">
            <div class="loading-state">
              <div class="loading-spinner"></div>
              <p>Cargando pedidos...</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  `;

  // Cargar datos despu√©s de renderizar la UI
  await loadPedidosData();
  setupPedidosEventListeners();
}

// Variables globales para pedidos modernos
let currentPedidoFilters = {
  estado: 'pendient',
  fecha: '',
  zona: '',
  search: ''
};

// Cargar datos de pedidos
async function loadPedidosData() {
  console.log('üì¶ Cargando datos de pedidos...');
  const token = localStorage.getItem('token');

  try {
    // Cargar zonas primero
    await loadZonas();
    
    // Cargar pedidos con filtro por defecto
    const params = new URLSearchParams();
    params.append('estado', currentPedidoFilters.estado);
    
    const response = await fetch(`https://back-adm.fly.dev/api/pedidos?${params.toString()}`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });

    if (!response.ok) {
      throw new Error(`Error ${response.status}: ${await response.text()}`);
    }

    const pedidos = await response.json();
    console.log('‚úÖ Pedidos cargados:', pedidos.length);
    
    // Actualizar variables locales y globales
    allPedidos = pedidos;
    currentPedidos = pedidos;
    window.allPedidos = pedidos;
    window.currentPedidos = pedidos;
    
    // Actualizar UI
    updatePedidosCounter(pedidos.length);
    renderPedidosGrid(pedidos);
    
  } catch (error) {
    console.error('‚ùå Error cargando pedidos:', error);
    showPedidosError(error);
  }
}

// Configurar event listeners para pedidos
function setupPedidosEventListeners() {
  console.log('üéß Configurando event listeners para pedidos...');
  
  // Filtros con debounce
  const clienteFilter = document.getElementById('pedidoClienteFilter');
  if (clienteFilter) {
    clienteFilter.addEventListener('input', debounce(() => {
      applyPedidoFilters();
    }, 300));
  }
  
  const estadoFilter = document.getElementById('pedidoEstadoFilter');
  if (estadoFilter) {
    estadoFilter.addEventListener('change', () => {
      applyPedidoFilters();
    });
  }
  
  const fechaFilter = document.getElementById('pedidoFechaFilter');
  if (fechaFilter) {
    fechaFilter.addEventListener('change', () => {
      applyPedidoFilters();
    });
  }
  
  const zonaFilter = document.getElementById('pedidoZonaFilter');
  if (zonaFilter) {
    zonaFilter.addEventListener('change', () => {
      applyPedidoFilters();
    });
  }
}

// Aplicar filtros de pedidos
async function applyPedidoFilters() {
  // Leer valores actuales de todos los filtros
  const estadoFilter = document.getElementById('pedidoEstadoFilter');
  const fechaFilter = document.getElementById('pedidoFechaFilter');
  const zonaFilter = document.getElementById('pedidoZonaFilter');
  const clienteFilter = document.getElementById('pedidoClienteFilter');
  
  // Actualizar currentPedidoFilters con valores actuales
  currentPedidoFilters = {
    estado: estadoFilter ? estadoFilter.value : '',
    fecha: fechaFilter ? fechaFilter.value : '',
    zona: zonaFilter ? zonaFilter.value : '',
    search: clienteFilter ? clienteFilter.value : ''  // Cambiar 'cliente' por 'search'
  };
  
  console.log('üîç Aplicando filtros de pedidos:', currentPedidoFilters);
  const token = localStorage.getItem('token');

  try {
    const params = new URLSearchParams();
    Object.keys(currentPedidoFilters).forEach(key => {
      if (currentPedidoFilters[key] && currentPedidoFilters[key].trim() !== '') {
        params.append(key, currentPedidoFilters[key]);
      }
    });

    const response = await fetch(`https://back-adm.fly.dev/api/pedidos?${params.toString()}`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });

    if (!response.ok) {
      throw new Error(`Error ${response.status}: ${await response.text()}`);
    }

    const pedidos = await response.json();
    currentPedidos = pedidos;
    window.currentPedidos = pedidos;
    
    updatePedidosCounter(pedidos.length);
    renderPedidosGrid(pedidos);
    
  } catch (error) {
    console.error('‚ùå Error aplicando filtros:', error);
    showPedidosError(error);
  }
}

// Limpiar filtros de pedidos
function clearPedidoFilters() {
  console.log('üóëÔ∏è Limpiando filtros de pedidos...');
  
  currentPedidoFilters = {
    estado: '',
    fecha: '',
    zona: '',
    search: ''
  };
  
  // Resetear inputs
  const estadoFilter = document.getElementById('pedidoEstadoFilter');
  const fechaFilter = document.getElementById('pedidoFechaFilter');
  const zonaFilter = document.getElementById('pedidoZonaFilter');
  const clienteFilter = document.getElementById('pedidoClienteFilter');
  
  if (estadoFilter) estadoFilter.value = '';
  if (fechaFilter) fechaFilter.value = '';
  if (zonaFilter) zonaFilter.value = '';
  if (clienteFilter) clienteFilter.value = '';
  
  // Recargar todos los pedidos
  loadPedidosData();
}

// Mostrar/ocultar filtros avanzados
function toggleAdvancedFilters() {
  const filtersPanel = document.getElementById('advancedFiltersPanel');
  const toggleBtn = document.getElementById('toggleFiltersBtn');
  
  if (!filtersPanel || !toggleBtn) return;
  
  const isHidden = filtersPanel.style.display === 'none' || !filtersPanel.style.display;
  
  if (isHidden) {
    // Mostrar filtros con animaci√≥n
    filtersPanel.style.display = 'block';
    filtersPanel.style.maxHeight = '0px';
    filtersPanel.style.opacity = '0';
    
    // Forzar reflow
    filtersPanel.offsetHeight;
    
    // Animar entrada
    filtersPanel.style.maxHeight = '1000px';
    filtersPanel.style.opacity = '1';
    
    toggleBtn.innerHTML = '‚ñ≤ Ocultar Filtros';
    toggleBtn.classList.add('active');
  } else {
    // Ocultar filtros con animaci√≥n
    filtersPanel.style.maxHeight = '0px';
    filtersPanel.style.opacity = '0';
    
    // Ocultar completamente despu√©s de la animaci√≥n
    setTimeout(() => {
      filtersPanel.style.display = 'none';
    }, 300);
    
    toggleBtn.innerHTML = '‚ñº Mostrar Filtros';
    toggleBtn.classList.remove('active');
  }
}

// Exponer funci√≥n globalmente
window.toggleAdvancedFilters = toggleAdvancedFilters;

// Actualizar contador de pedidos
function updatePedidosCounter(count) {
  const counter = document.getElementById('pedidosCounter');
  if (counter) {
    counter.textContent = `${count} pedido${count !== 1 ? 's' : ''}`;
  }
}

// Renderizar grid de pedidos
function renderPedidosGrid(pedidos) {
  const grid = document.getElementById('pedidosGrid');
  if (!grid) return;

  if (pedidos.length === 0) {
    grid.innerHTML = `
      <div class="empty-state">
        <div class="empty-icon">üì¶</div>
        <h4>No se encontraron pedidos</h4>
        <p>No hay pedidos que coincidan con los filtros aplicados.</p>
      </div>
    `;
    return;
  }

  grid.innerHTML = pedidos.map(pedido => {
    const id = pedido.codigo || pedido.id;
    const nombreCompleto = (pedido.cliente_nombre || `${pedido.nombre || ''} ${pedido.apellido || ''}`).trim();
    const direccion = pedido.direccion || '';
    return `
      <div class="pedido-card" style="padding: 1rem;">
        <!-- Layout desktop (>480px) -->
 

        <!-- Layout m√≥vil (‚â§480px) -->
        <div class="pedido-mobile">
          <div style="margin-bottom: 0.75rem;">
            <div style="font-weight:700; color:white; margin-bottom: 0.25rem;">#${id} ${nombreCompleto || 'Cliente'}</div>
            <div style="color:rgba(255,255,255,0.8); font-size: 0.875rem;">${direccion}</div>
            <div style="margin-top: 0.5rem;">
              <span class="pedido-status ${pedido.estado}">${getStatusText(pedido.estado)}</span>
            </div>
          </div>
          <div style="display:flex; gap:0.5rem; justify-content:stretch;">
            ${pedido.estado === 'pendient' ? `<button onclick="startDelivery(${id})" class="btn-action btn-deliver" >üöö ENTREGAR</button>` : ''}
            ${pedido.estado === 'pendient' ? `<button onclick="cancelPedido(${id})" class="btn-action btn-cancel">‚ùå ANULAR</button>` : ''}
            ${pedido.estado === 'entregad' ? `<button class="btn-action btn-deliver" disabled style="opacity: 0.7;">‚úÖ ENTREGADO</button>` : ''}
          </div>
        </div>
      </div>
    `;
  }).join('');
}

// Renderizar items de un pedido
function renderPedidoItems(items) {
  if (items.length === 0) {
    return '<div style="color: #6b7280; font-style: italic;">No hay productos especificados</div>';
  }

  return items.slice(0, 3).map(item => `
    <div class="item">
      <span class="item-name">${item.descripcion || 'Producto'}</span>
      <span class="item-quantity">x${item.cantidad || 0}</span>
    </div>
  `).join('') + (items.length > 3 ? `
    <div style="color: #6b7280; font-style: italic; text-align: center; padding: 0.5rem;">
      ... y ${items.length - 3} producto${items.length - 3 !== 1 ? 's' : ''} m√°s
    </div>
  ` : '');
}

// Obtener icono del estado
function getStatusIcon(estado) {
  switch (estado) {
    case 'pendient': return 'üì¶';
    case 'proceso': return 'üîÑ';
    case 'entregad': return '‚úÖ';
    case 'anulado': return '‚ùå';
    default: return '‚ùì';
  }
}

// Obtener texto del estado
function getStatusText(estado) {
  switch (estado) {
    case 'pendient': return 'PENDIENTE';
    case 'proceso': return 'EN PROCESO';
    case 'entregad': return 'ENTREGADO';
    case 'anulado': return 'ANULADO';
    default: return 'DESCONOCIDO';
  }
}



// Mostrar error en la UI
function showPedidosError(error) {
  const grid = document.getElementById('pedidosGrid');
  if (grid) {
    grid.innerHTML = `
      <div class="empty-state">
        <div class="empty-icon">‚ùå</div>
        <h4>Error cargando pedidos</h4>
        <p>${error.message || 'Ocurri√≥ un error inesperado'}</p>
        <button onclick="loadPedidosData()" class="btn-create" style="margin-top: 1rem;">
          üîÑ Reintentar
        </button>
      </div>
    `;
  }
}



function editPedido(pedidoId) {
  console.log('‚úèÔ∏è Editando pedido:', pedidoId);
  // Implementar edici√≥n del pedido
  showEditPedidoModal(pedidoId);
}

function startDelivery(pedidoId) {
  console.log('üöö Iniciando entrega:', pedidoId);
  if (window.deliveryModal && typeof window.deliveryModal.show === 'function') {
    window.deliveryModal.show(pedidoId);
  } else if (window.startDelivery && window.startDelivery !== startDelivery) {
    // Compatibilidad si existe una funci√≥n global externa
    window.startDelivery(pedidoId);
  } else {
    alert('Modal de entrega no disponible. Recarga la p√°gina (Ctrl + F5).');
  }
}

function completeDelivery(pedidoId) {
  console.log('‚úÖ Completando entrega:', pedidoId);
  // Implementar completar entrega
  updatePedidoStatus(pedidoId, 'entregad');
}

function cancelPedido(pedidoId) {
  console.log('‚ùå Cancelando pedido:', pedidoId);
  if (confirm('¬øEst√°s seguro de que quieres cancelar este pedido?')) {
    updatePedidoStatus(pedidoId, 'anulado');
  }
}

// Actualizar estado del pedido
async function updatePedidoStatus(pedidoId, newStatus) {
  const token = localStorage.getItem('token');
  
  try {
    console.log('üîÑ Actualizando estado del pedido:', pedidoId, 'a estado:', newStatus);
    
    const response = await fetch(`https://back-adm.fly.dev/api/pedidos/${pedidoId}/estado`, {
      method: 'PUT',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ estado: newStatus })
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Error ${response.status}: ${errorText}`);
    }

    const result = await response.json();
    console.log('‚úÖ Estado actualizado correctamente:', result);
    
    // Mostrar mensaje de √©xito
    if (newStatus === 'anulado') {
      alert('‚úÖ Pedido cancelado correctamente');
    }
    
    // Recargar pedidos
    await loadPedidosData();
    
  } catch (error) {
    console.error('‚ùå Error actualizando estado:', error);
    alert('Error actualizando el estado del pedido: ' + error.message);
  }
}

// Funci√≥n de debounce
function debounce(func, wait) {
  let timeout;
  return function executedFunction(...args) {
    const later = () => {
      clearTimeout(timeout);
      func(...args);
    };
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
}

// Exportar pedidos
function exportPedidos() {
  console.log('üìä Exportando pedidos...');
  // Implementar exportaci√≥n
  alert('Funci√≥n de exportaci√≥n en desarrollo');
}

// Mostrar mapa de entregas (alias para showMapModal)
function showDeliveryMap() {
  console.log('üó∫Ô∏è Mostrando mapa de entregas...');
  showMapModal();
}

// Funciones relacionadas con el mapa de entregas ya no necesarias
// (se usa MapModal.js que tiene toda la funcionalidad de Leaflet)

// Exponer inmediatamente para evitar errores de timing
window.showDeliveryMap = showDeliveryMap;

// Funciones placeholder para compatibilidad
function showPedidoDetails(pedidoId) {
  console.log('üìã Mostrando detalles del pedido:', pedidoId);
  alert('Vista detallada en desarrollo');
}

function showEditPedidoModal(pedidoId) {
  console.log('‚úèÔ∏è Abriendo modal de edici√≥n:', pedidoId);
  alert('Modal de edici√≥n en desarrollo');
}

// Modal completo para registrar cobro y devoluci√≥n de retornables
async function showClientPaymentModal(clienteId) {
  try {
    const token = localStorage.getItem('token');

    // Buscar cliente actual para mostrar datos (con fallback a fetch)
    const wantedId = String(clienteId);
    const listA = Array.isArray(window.currentClients) ? window.currentClients : [];
    const listB = Array.isArray(window.currentClientes) ? window.currentClientes : [];
    let cliente = [...listA, ...listB].find(c => String(c.id ?? c.codigo ?? c.Code) === wantedId);
    if (!cliente) {
      try {
        const respCli = await fetch('https://back-adm.fly.dev/api/clientes', { headers: { 'Authorization': `Bearer ${token}` } });
        if (respCli.ok) {
          const allCli = await respCli.json();
          cliente = (allCli || []).find(c => String(c.id ?? c.codigo ?? c.Code) === wantedId);
          window.currentClients = allCli;
          window.currentClientes = allCli;
        }
      } catch (_) {}
    }

    // Cargar tipos de pago (excluir los que aplican saldo)
    const tpResp = await fetch('https://back-adm.fly.dev/api/tiposdepago', { headers: { 'Authorization': `Bearer ${token}` } });
    const tipos = tpResp.ok ? await tpResp.json() : [];
    const tiposValidos = tipos.filter(tp => {
      const v = tp.aplicaSaldo;
      if (!v) return true;
      if (typeof v === 'object' && v.type === 'Buffer') return v.data?.[0] !== 1;
      if (typeof v === 'number') return v !== 1;
      if (typeof v === 'string') return parseInt(v) !== 1;
      if (typeof v === 'boolean') return v === false;
      return true;
    });

    // Cargar productos retornables para seleccionar cu√°l devuelve (si existen)
    let productosRet = [];
    try {
      const pr = await fetch('https://back-adm.fly.dev/api/productos', { headers: { 'Authorization': `Bearer ${token}` } });
      const prods = pr.ok ? await pr.json() : [];
      productosRet = (prods || []).filter(p => p.esRetornable === 1 || p.esRetornable === true);
    } catch (_) {}

    const opcionesPago = tiposValidos.map(tp => `<option value="${tp.id}">${tp.pago}</option>`).join('');
    const opcionesRet = productosRet.map(p => `<option value="${p.codigo}">${p.descripcion}</option>`).join('');

    const wrapper = document.createElement('div');
    wrapper.innerHTML = `
      <div class="modal-overlay" id="clientPaymentOverlay">
        <div class="modal-content" style="max-width:560px; max-height:90vh; overflow:auto;">
          <div style="display:flex; justify-content:space-between; align-items:center; margin-bottom:1rem;">
            <h4 class="modal-title" style="margin:0;">üí≥ Cobro / Retornables</h4>
            <button id="clientPaymentCloseBtn" style="background:none; border:none; font-size:1.5rem; cursor:pointer; color:#6b7280;">√ó</button>
          </div>

          <div style="padding:0.75rem; background:#f9fafb; border:1px solid #e5e7eb; border-radius:0.375rem; margin-bottom:1rem;">
            <div><strong>üë§ Cliente:</strong> ${cliente ? `${(cliente.nombre || '').toString()} ${(cliente.apellido || '').toString()}`.trim() : `#${clienteId}`}</div>
            <div><strong>üí∞ Saldo actual:</strong> $${cliente && cliente.saldo != null ? parseFloat(cliente.saldo).toFixed(2) : '0.00'}</div>
            <div><strong>üîÑ Retornables:</strong> ${cliente && cliente.retornables != null ? parseInt(cliente.retornables) : 0} unidades</div>
          </div>

          <form id="clientPaymentForm">
            <div class="form-group">
              <label class="form-label">Tipo de pago</label>
              <select id="clientPaymentTipo" class="form-input">
                <option value="">Seleccionar tipo de pago...</option>
                ${opcionesPago}
              </select>
            </div>

            <div class="form-group">
              <label class="form-label">Monto recibido ($)</label>
              <input type="number" id="clientPaymentMonto" class="form-input" step="0.01" min="0" value="0" />
              <small style="color:#6b7280;">Puede ser 0 si solo devuelve retornables</small>
            </div>

            <div class="form-group">
              <label class="form-label">Retornables</label>
              <div style="display:grid; grid-template-columns: 1fr 120px; gap:0.5rem;">
                <select id="clientReturnProducto" class="form-input">
                  <option value="">Seleccionar producto retornable...</option>
                  ${opcionesRet}
                </select>
                <input type="number" id="clientReturnCantidad" class="form-input" min="0" value="0" />
              </div>
              <small style="color:#6b7280;">Saldo de retornables del cliente: ${parseInt(cliente?.retornables || 0)} unidades</small>
            </div>

            <div id="clientPaymentResumen" class="form-group" style="padding:0.75rem; background:#f3f4f6; border-radius:0.375rem;">
              <div style="font-weight:600; margin-bottom:0.25rem;">üìã Resumen</div>
              <div id="clientPaymentResumenText" style="color:#374151; font-size:0.9rem;">Complete los campos para ver el resumen</div>
            </div>

            <div class="modal-buttons">
              <button type="button" class="btn-secondary" id="clientPaymentCancel">Cancelar</button>
              <button type="submit" class="btn-primary" id="clientPaymentSave">Guardar</button>
            </div>
          </form>
        </div>
      </div>`;
    document.body.appendChild(wrapper);

    const overlay = document.getElementById('clientPaymentOverlay');
    overlay.classList.add('show');

    const form = document.getElementById('clientPaymentForm');
    const resumenText = document.getElementById('clientPaymentResumenText');

    const updateResumen = () => {
      const tipoId = (document.getElementById('clientPaymentTipo') as HTMLSelectElement).value;
      const tipoNombre = (tiposValidos.find(t => String(t.id) === String(tipoId)) || {}).pago || '‚Äî';
      const montoV = parseFloat((document.getElementById('clientPaymentMonto') as HTMLInputElement).value || '0');
      const retCant = parseInt((document.getElementById('clientReturnCantidad') as HTMLInputElement).value || '0');
      const retProdSel = (document.getElementById('clientReturnProducto') as HTMLSelectElement);
      const retProdTxt = retProdSel && retProdSel.value ? (retProdSel.options[retProdSel.selectedIndex].text || 'Retornable') : 'Retornables';
      const partes = [] as any[];
      if (tipoId && montoV > 0) partes.push(`Se reciben $${montoV.toFixed(2)} en ${tipoNombre}`);
      if (retCant > 0 && retProdSel.value) partes.push(`Se devuelven ${retCant} ${retProdTxt}`);
      resumenText.textContent = partes.length ? partes.join(' ‚Ä¢ ') : 'Complete los campos para ver el resumen';
    };

    form.addEventListener('input', updateResumen);
    document.getElementById('clientPaymentCloseBtn').onclick = () => overlay.remove();
    document.getElementById('clientPaymentCancel').onclick = () => overlay.remove();

    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      try {
        const tipoPagoId = (document.getElementById('clientPaymentTipo') as HTMLSelectElement).value;
        const montoV = parseFloat((document.getElementById('clientPaymentMonto') as HTMLInputElement).value || '0');
        const retCant = parseInt((document.getElementById('clientReturnCantidad') as HTMLInputElement).value || '0');
        const retProd = (document.getElementById('clientReturnProducto') as HTMLSelectElement).value;

        // Validaciones b√°sicas
        if ((!tipoPagoId || montoV <= 0) && !(retProd && retCant > 0)) {
          alert('Ingrese un pago v√°lido o una devoluci√≥n de retornables.');
          return;
        }

        // 1) Registrar cobro (si corresponde)
        if (tipoPagoId && montoV > 0) {
          const r = await fetch('https://back-adm.fly.dev/api/pagos/cliente', {
            method: 'POST',
            headers: { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' },
            body: JSON.stringify({ clienteId, tipoPagoId, monto: montoV, observaciones: 'Cobro desde gesti√≥n de clientes' })
          });
          if (!r.ok) {
            const t = await r.text();
            throw new Error(`Error registrando cobro: ${t}`);
          }
        }

        // 2) Registrar devoluci√≥n de retornables (si corresponde)
        if (retProd && retCant > 0) {
          const r2 = await fetch('https://back-adm.fly.dev/api/clientes/retornables/devolver', {
            method: 'POST',
            headers: { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' },
            body: JSON.stringify({ clienteId, productoId: retProd, cantidad: retCant, observaciones: 'Devoluci√≥n desde gesti√≥n de clientes' })
          });
          if (!r2.ok) {
            const t2 = await r2.text();
            throw new Error(`Error registrando devoluci√≥n: ${t2}`);
          }
        }

        overlay.remove();
        alert('Operaci√≥n registrada correctamente');
        if (window.loadClientesSection) await window.loadClientesSection();
      } catch (err) {
        alert(err.message || 'Error al registrar');
      }
    });
  } catch (e) {
    alert('No se pudo abrir el modal: ' + e.message);
  }
}

// Exponer funciones globalmente para pedidos
window.loadPedidosSection = loadPedidosSection;
window.loadPedidosData = loadPedidosData;
window.setupPedidosEventListeners = setupPedidosEventListeners;
window.applyPedidoFilters = applyPedidoFilters;
window.clearPedidoFilters = clearPedidoFilters;
window.viewPedido = viewPedido;
window.editPedido = editPedido;
window.startDelivery = startDelivery;
window.completeDelivery = completeDelivery;
window.cancelPedido = cancelPedido;
window.updatePedidoStatus = updatePedidoStatus;
window.exportPedidos = exportPedidos;
window.showPedidoDetails = showPedidoDetails;
window.showEditPedidoModal = showEditPedidoModal;
window.showClientPaymentModal = showClientPaymentModal;
// Exponer helper para que DeliveryModal pueda obtener los items
// (DeliveryModal llama a window.getPedidoItems)
window.getPedidoItems = getPedidoItems;
// Exponer logout para que funcione el bot√≥n del header
window.logout = logout;

// Actualizar informaci√≥n de resultados
function updatePedidosInfo(pedidos) {
  const pedidosCount = document.getElementById('pedidosCount');
  const pedidosFilters = document.getElementById('pedidosFilters');
  
  if (pedidosCount) {
    pedidosCount.textContent = `${pedidos.length} pedido(s)`;
  }
  
  if (pedidosFilters) {
    const filters = [];
    if (currentFilters.estado) {
      const estadoText = getStatusText(currentFilters.estado);
      filters.push(`Estado: ${estadoText}`);
    }
    if (currentFilters.fecha) filters.push(`Fecha: ${currentFilters.fecha}`);
    if (currentFilters.zona) filters.push(`Zona: ${currentFilters.zona}`);
    if (currentFilters.search) filters.push(`Cliente: "${currentFilters.search}"`);
    
    const filterText = filters.length > 0 ? filters.join(', ') : 'Todos los pedidos';
    pedidosFilters.textContent = `Filtros: ${filterText}`;
  }
}



// Limpiar filtros de pedidos
function clearPedidosFilters() {
  console.log('üßπ Limpiando filtros de pedidos...');
  const estadoSelect = document.getElementById('filterEstado');
  const fechaInput = document.getElementById('filterFecha');
  const clienteInput = document.getElementById('filterCliente');
  
  if (estadoSelect) estadoSelect.value = '';
  if (fechaInput) fechaInput.value = '';
  if (clienteInput) clienteInput.value = '';
  
  // Recargar pedidos sin filtros
  if (typeof filterPedidos === 'function') {
    filterPedidos();
  } else if (typeof loadPedidosData === 'function') {
    loadPedidosData();
  }
}

// Obtener items de un pedido espec√≠fico
async function getPedidoItems(pedidoId) {
  console.log('üìã Obteniendo items del pedido:', pedidoId);
  const token = localStorage.getItem('token');

  try {
    const response = await fetch(`https://back-adm.fly.dev/api/pedidos/${pedidoId}/items`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Error del servidor:', errorText);
      throw new Error(`Error ${response.status}: ${errorText}`);
    }

    const items = await response.json();
    console.log('‚úÖ Items del pedido cargados:', items.length, 'items');
    console.log('üìã Items:', items);

    return items;
  } catch (error) {
    console.error('üí• Error obteniendo items del pedido:', error);
    return [];
  }
}



function getStatusColor(estado) {
  switch (estado) {
    case 'pendient':
      return 'background-color: #fef3c7; color: #92400e;';
    case 'En Preparaci√≥n':
      return 'background-color: #dbeafe; color: #1e40af;';
    case 'Entregado':
      return 'background-color: #d1fae5; color: #065f46;';
    case 'anulado':
      return 'background-color: #fee2e2; color: #dc2626;';
    default:
      return 'background-color: #f3f4f6; color: #374151;';
  }
}

// Variables duplicadas eliminadas - ya est√°n definidas arriba

// Timeout para b√∫squeda con debounce de pedidos
let pedidosSearchTimeout: any;

// Filtrar pedidos (ahora desde el backend)
async function filterPedidos() {
  const estadoFilter = (document.getElementById('filterEstado') as HTMLSelectElement)?.value || '';
  const fechaFilter = (document.getElementById('filterFecha') as HTMLInputElement)?.value || '';
  const zonaFilter = (document.getElementById('filterZona') as HTMLSelectElement)?.value || '';
  const searchFilter = (document.getElementById('filterSearch') as HTMLInputElement)?.value || '';

  console.log('üîç Aplicando filtros:', { estadoFilter, fechaFilter, zonaFilter, searchFilter });

  // Actualizar filtros globales
  currentFilters = {
    estado: estadoFilter,
    fecha: fechaFilter,
    zona: zonaFilter,
    search: searchFilter
  };

  // Recargar pedidos con los nuevos filtros desde el backend
  await loadPedidosData();
}

// B√∫squeda con debounce para el campo de b√∫squeda de pedidos
function debouncePedidosSearch() {
  clearTimeout(pedidosSearchTimeout);
  pedidosSearchTimeout = setTimeout(() => {
    filterPedidos();
  }, 500); // Esperar 500ms despu√©s de que el usuario deje de escribir
}



// Ver detalles del pedido
async function viewPedido(pedidoId) {
  const pedido = currentPedidos.find(p => (p.id || p.codigo) == pedidoId);
  if (!pedido) {
    alert('Pedido no encontrado');
    return;
  }

  console.log('üëÅÔ∏è Viendo detalles del pedido:', pedidoId);

  const clienteNombre = pedido.cliente_nombre || pedido.nombre || 'Cliente sin nombre';
  const apellido = pedido.apellido || '';
  const nombreCompleto = `${clienteNombre} ${apellido}`.trim();
  const total = parseFloat(pedido.total || 0).toFixed(2);
  const estado = pedido.estado || 'pendient';
  const direccion = pedido.direccion || 'Direcci√≥n no especificada';
  const telefono = pedido.telefono || 'Sin tel√©fono';
  const fecha = pedido.FechaPedido || pedido.fecha || 'Fecha no disponible';

  try {
    // Obtener items del pedido
    const items = await getPedidoItems(pedidoId);

    let itemsText = '';
    if (items.length > 0) {
      itemsText = '\n\nüì¶ PRODUCTOS:\n';
      items.forEach(item => {
        const subtotal = parseFloat(item.subtotal || 0).toFixed(2);
        itemsText += `‚Ä¢ ${item.descripcion}\n  Cantidad: ${item.cantidad} x $${parseFloat(item.precioUnitario || 0).toFixed(2)} = $${subtotal}\n`;
      });
    } else {
      itemsText = '\n\nüì¶ No hay items registrados para este pedido';
    }

    const detalles = `üßæ PEDIDO #${pedidoId}

üë§ CLIENTE: ${nombreCompleto}
üìû Tel√©fono: ${telefono}
üìç Direcci√≥n: ${direccion}
üìÖ Fecha: ${fecha}
üìä Estado: ${estado}
üí∞ Total: $${total}${itemsText}`;

    alert(detalles);

  } catch (error) {
    console.error('Error obteniendo detalles del pedido:', error);

    // Mostrar informaci√≥n b√°sica si falla la carga de items
    const detallesBasicos = `üßæ PEDIDO #${pedidoId}

üë§ CLIENTE: ${nombreCompleto}
üìû Tel√©fono: ${telefono}
üìç Direcci√≥n: ${direccion}
üìÖ Fecha: ${fecha}
üìä Estado: ${estado}
üí∞ Total: $${total}

‚ö†Ô∏è No se pudieron cargar los items del pedido`;

    alert(detallesBasicos);
  }
}



// Cargar secci√≥n de clientes con dise√±o moderno
async function loadClientesSection() {
  console.log('üë• Cargando secci√≥n de clientes...');
  const contentArea = document.getElementById('contentArea');
  
  // Cargar el HTML del componente ClientesSection
  const clientesHTML = `
    <div class="clientes-section">
      <div class="clientes-header">
        <div class="header-content">
          <h2 class="section-title">
            <span class="icon">üë•</span>
            Gesti√≥n de Clientes
          </h2>
          <p class="section-subtitle">Administra tu base de datos de clientes de manera eficiente</p>
        </div>
      </div>

      <div class="clientes-container">
        <!-- Panel de acciones -->
        <div class="actions-panel">
          <div class="actions-header">
            <h3>‚ö° Acciones R√°pidas</h3>
          </div>
          
          <div class="actions-content">
            <button onclick="window.showCreateClientModal()" class="btn-create">
              <span class="btn-icon">‚ûï</span>
              Nuevo Cliente
            </button>
            
            <div class="search-group">
              <div class="search-input-wrapper">
                <span class="search-icon">üîç</span>
                <input 
                  type="text" 
                  id="clientesSearch" 
                  placeholder="üîç Buscar por nombre, apellido, tel√©fono..."
                  class="search-input"
                >
              </div>
            </div>
          </div>
        </div>

        <!-- Panel de filtros -->
        <div class="filters-panel">
          <div class="filters-header">
            <h3>üîç Filtros</h3>
          </div>
          
          <div class="filters-content">
            <div class="filter-group">
              <label for="filterClientesSaldo" class="filter-label">
                <span class="label-icon">üí∞</span>
                Saldo
              </label>
              <div class="modern-select saldo-select">
                <select id="filterClientesSaldo">
                  <option value="todos">Todos los clientes</option>
                  <option value="positivo">Con saldo positivo</option>
                  <option value="negativo">Con saldo negativo</option>
                  <option value="cero">Sin saldo</option>
                </select>
              </div>
            </div>
            
            <div class="filter-group">
              <label for="filterClientesRetornables" class="filter-label">
                <span class="label-icon">üîÑ</span>
                Retornables
              </label>
              <div class="modern-select retornables-select">
                <select id="filterClientesRetornables">
                  <option value="todos">Todos los clientes</option>
                  <option value="con">Con retornables</option>
                  <option value="sin">Sin retornables</option>
                </select>
              </div>
            </div>
            
            <button onclick="window.clearClientesFilters()" class="btn-clear">
              <span class="btn-icon">üîÑ</span>
              Limpiar Filtros
            </button>
          </div>
        </div>

        <!-- Lista de clientes -->
        <div class="clientes-area">
          <div id="clientesList" class="clientes-container">
            <div class="empty-state">
              <div class="empty-icon">üë•</div>
              <h4>Cargando clientes...</h4>
              <p>Preparando tu base de datos de clientes</p>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Modal para crear/editar cliente - DESHABILITADO - Usando ClientModal.js en su lugar -->
    <div id="indexClientModal" class="modal-overlay" style="display: none !important;">
      <div class="cliente-modal">
        <div class="modal-header">
          <h4 id="modalTitle" class="modal-title">Nuevo Cliente</h4>
          <button onclick="closeClientModal()" class="btn-close">√ó</button>
        </div>
        
        <form id="indexClientForm" class="modal-form">
          <div class="form-group">
            <label class="form-label">Nombre</label>
            <input type="text" id="clientName" name="nombre" required class="form-input" placeholder="Nombre del cliente" />
          </div>
          
          <div class="form-group">
            <label class="form-label">Apellido</label>
            <input type="text" id="clientApellido" name="apellido" class="form-input" placeholder="Apellido del cliente" />
          </div>
          
          <div class="form-group">
            <label class="form-label">Tel√©fono</label>
            <input type="tel" id="clientTelefono" name="telefono" required class="form-input" placeholder="N√∫mero de tel√©fono" />
          </div>
          
          <div class="form-group">
            <label class="form-label">Direcci√≥n</label>
            <input type="text" id="clientDireccion" name="direccion" required class="form-input" placeholder="Direcci√≥n completa" />
          </div>
          
          <div class="form-group">
            <label class="form-label">Saldo Inicial</label>
            <input type="number" id="clientSaldo" name="saldo" step="0.01" class="form-input" value="0" />
          </div>
          
          <div class="form-group">
            <label class="form-label">Retornables Iniciales</label>
            <input type="number" id="clientRetornables" name="retornables" class="form-input" value="0" />
          </div>
          
          <div class="form-group">
            <label class="form-label">Ubicaci√≥n GPS</label>
            <div class="map-container">
              <div id="clientMap" class="client-map"></div>
              <div class="map-controls">
                <button type="button" id="getLocationBtn" class="btn-location">
                  üìç Obtener mi ubicaci√≥n
                </button>
                <button type="button" id="clearLocationBtn" class="btn-clear-location">
                  üóëÔ∏è Limpiar ubicaci√≥n
                </button>
              </div>
              <input type="hidden" id="clientLatitud" name="latitud" />
              <input type="hidden" id="clientLongitud" name="longitud" />
            </div>
          </div>
          
          <div class="modal-actions">
            <button type="button" onclick="closeClientModal()" class="btn-cancel">
              Cancelar
            </button>
            <button type="submit" class="btn-save">
              <span class="btn-icon">üíæ</span>
              Guardar
            </button>
          </div>
        </form>
      </div>
    </div>
  `;
  
  contentArea.innerHTML = clientesHTML;
  
  // Configurar el formulario
  const clientForm = document.getElementById('indexClientForm');
  if (clientForm) {
    clientForm.addEventListener('submit', handleClientSubmit);
  }
  
  // Configurar listeners de eventos
  setupClientEventListeners();
  
  // Configurar event listeners despu√©s de cargar el HTML
  setTimeout(() => {
    console.log('üîß Configurando event listeners...');
    setupClientesEventListeners();
  }, 100);
  
  // Cargar los datos de clientes
  setTimeout(async () => {
    await loadClientesData();
  }, 200);
}

// Cargar clientes (funci√≥n original renombrada)
async function loadClientesData() {
  console.log('üë• Cargando clientes...');
  const token = localStorage.getItem('token');

  try {
    const response = await fetch('https://back-adm.fly.dev/api/clientes', {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Error del servidor:', errorText);
      throw new Error(`Error ${response.status}: ${errorText}`);
    }

    const clientes = await response.json();
    console.log('‚úÖ Clientes cargados:', clientes.length, 'clientes');
    console.log('üìã Datos de clientes:', clientes);

    // Guardar en variable global para b√∫squedas y edici√≥n
    currentClients = clientes;

    // Aplicar filtros si existen
    if (currentClientFilters.search || currentClientFilters.saldo !== 'todos' || currentClientFilters.retornables !== 'todos') {
      await applyClientFilters();
    } else {
      renderClientesList(clientes);
    }
  } catch (error) {
    console.error('üí• Error cargando clientes:', error);
    const contentArea = document.getElementById('contentArea');
    if (contentArea) {
      contentArea.innerHTML = `
        <h3 class="content-title">Gesti√≥n de Clientes</h3>
        <div style="text-align: center; padding: 2rem; color: #dc2626;">
          <p>Error cargando clientes: ${error.message}</p>
          <button onclick="loadClientesData()" class="btn-primary" style="margin-top: 1rem;">
            Reintentar
          </button>
        </div>
      `;
    }
  }
}

function renderClientes(clientes) {
  const contentArea = document.getElementById('contentArea');

  if (clientes.length === 0) {
    contentArea.innerHTML = `
      <h3 class="content-title">Gesti√≥n de Clientes</h3>
      <div style="text-align: center; padding: 3rem; color: #6b7280;">
        <p style="font-size: 1.125rem; margin-bottom: 0.5rem;">No hay clientes registrados</p>
        <p style="font-size: 0.875rem;">Los clientes aparecer√°n aqu√≠ cuando se registren en el sistema.</p>
        <button onclick="showCreateClientModal()" class="btn-primary" style="margin-top: 1rem;">
          + Agregar Primer Cliente
        </button>
      </div>
    `;
    return;
  }

  const html = `
    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5rem;">
      <h3 class="content-title" style="margin-bottom: 0;">Gesti√≥n de Clientes</h3>
      <button onclick="showCreateClientModal()" class="btn-primary" style="width: auto; padding: 0.5rem 1rem;">
        + Nuevo Cliente
      </button>
    </div>

    <div style="margin-bottom: 1rem; display: flex; gap: 1rem; align-items: center;">
      <div style="position: relative; max-width: 300px; flex: 1;">
        <input
          type="text"
          id="searchClients"
          placeholder="Buscar clientes por nombre, apellido o tel√©fono..."
          class="form-input"
          style="padding-left: 2.5rem;"
          onkeyup="debounceSearchClients(this.value)"
          oninput="debounceSearchClients(this.value)"
        />
        <svg style="position: absolute; left: 0.75rem; top: 50%; transform: translateY(-50%); width: 1rem; height: 1rem; color: #6b7280;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0 114 0z"></path>
        </svg>
      </div>
      <button onclick="clearClientSearch()" style="padding: 0.5rem; background: #6b7280; color: white; border: none; border-radius: 0.375rem; cursor: pointer; font-size: 0.875rem;">
        Limpiar
      </button>
    </div>

    <div style="display: grid; gap: 1rem;">
      ${clientes.map(cliente => {
        // Asegurar que todos los campos tengan valores por defecto
        // Intentar diferentes nombres de columnas que podr√≠an existir
        const id = cliente.id || cliente.codigo || cliente.Code || 'N/A';
        const codigo = cliente.codigo || cliente.Code || cliente.id || 'N/A';
        const nombre = cliente.nombre || cliente.name || cliente.Name || 'Sin nombre';
        const apellido = cliente.apellido || cliente.lastname || cliente.LastName || '';
        const nombreCompleto = cliente.nombreCompleto || `${nombre} ${apellido}`.trim() || 'Cliente sin nombre';
        const telefono = cliente.telefono || cliente.phone || cliente.Phone || 'Sin tel√©fono';
        const direccion = cliente.direccion || cliente.address || cliente.Address || 'Sin direcci√≥n';

        // Usar los nombres correctos de columnas
        const saldoDinero = parseFloat(cliente.saldo || 0);
        const saldoRetornables = parseInt(cliente.retornables || 0);

        return `
          <div style="border: 1px solid #e5e7eb; border-radius: 0.5rem; padding: 1rem; background: white; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
            <div style="display: flex; justify-content: space-between; align-items: start;">
              <div style="flex: 1;">
                <div style="display: flex; align-items: center; gap: 0.5rem; margin-bottom: 0.5rem; flex-wrap: wrap;">
                  <h4 style="font-weight: 600; color: #111827; margin: 0;">${nombreCompleto}</h4>
                  <span style="background: #f3f4f6; color: #6b7280; padding: 0.125rem 0.5rem; border-radius: 0.25rem; font-size: 0.75rem;">
                    #${codigo}
                  </span>
                  ${(cliente.latitud && cliente.longitud) ? `
                    <span style="background: #dbeafe; color: #1e40af; padding: 0.125rem 0.5rem; border-radius: 0.25rem; font-size: 0.75rem; font-weight: 500;" title="Cliente con ubicaci√≥n GPS">
                      üìç GPS
                    </span>
                  ` : ''}
                </div>

                <div style="margin-bottom: 0.75rem;">
                  <p style="font-size: 0.875rem; color: #4b5563; margin-bottom: 0.25rem;">üìû ${telefono}</p>
                  <p style="font-size: 0.875rem; color: #6b7280; margin-bottom: 0.25rem;">üìç ${direccion}</p>
                </div>

                <div style="display: flex; gap: 1rem; align-items: center; flex-wrap: wrap;">
                  <div style="display: flex; align-items: center; gap: 0.25rem;">
                    <span style="color: #6b7280; font-size: 0.875rem;">Saldo $:</span>
                    <span style="color: ${saldoDinero <= 0 ? '#059669' : '#dc2626'}; font-weight: 600; font-size: 0.875rem;">
                      $${saldoDinero.toFixed(2)}
                    </span>
                  </div>
                  <div style="display: flex; align-items: center; gap: 0.5rem; margin-bottom: 0.5rem;">
                    <span style="color: #6b7280; font-size: 0.875rem;">Retornables:</span>
                    <span style="color: ${saldoRetornables <= 0 ? '#059669' : '#dc2626'}; font-weight: 600; font-size: 0.875rem;">
                      ${saldoRetornables} ${saldoRetornables === 1 ? 'unidad' : 'unidades'}
                    </span>
                  </div>
                </div>
              </div>

              <div style="display: flex; gap: 0.5rem; margin-left: 1rem; flex-wrap: wrap;">
                <button
                  onclick="editClient(${id})"
                  style="padding: 0.5rem; background: #3b82f6; color: white; border: none; border-radius: 0.375rem; cursor: pointer; display: flex; align-items: center; gap: 0.25rem; font-size: 0.875rem;"
                  title="Editar cliente"
                >
                  <svg width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M12.146.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1 0 .708L10.5 8.207l-3-3L12.146.146zM11.207 9l-3-3L2.5 11.707V14.5a.5.5 0 0 0 .5.5h2.793L11.207 9z"/>
                  </svg>
                  Editar
                </button>

                <button
                  onclick="showClientPaymentModal(${id})"
                  style="padding: 0.5rem; background: #059669; color: white; border: none; border-radius: 0.375rem; cursor: pointer; display: flex; align-items: center; gap: 0.25rem; font-size: 0.875rem;"
                  title="Registrar cobro"
                >
                  üí≥ Cobrar
                </button>

                ${(cliente.latitud && cliente.longitud) ? `
                  <button
                    onclick="showClientLocation(${id})"
                    style="padding: 0.5rem; background: #7c3aed; color: white; border: none; border-radius: 0.375rem; cursor: pointer; display: flex; align-items: center; gap: 0.25rem; font-size: 0.875rem;"
                    title="Ver ubicaci√≥n en el mapa"
                  >
                    <svg width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                      <path d="M8 16s6-5.686 6-10A6 6 0 0 0 2 6c0 4.314 6 10 6 10zm0-7a3 3 0 1 1 0-6 3 3 0 0 1 0 6z"/>
                    </svg>
                    Mapa
                  </button>
                ` : ''}

                <!-- Bot√≥n Cta Cte comentado temporalmente
                <button
                  onclick="showClientAccount(${id})"
                  style="padding: 0.5rem; background: #059669; color: white; border: none; border-radius: 0.375rem; cursor: pointer; display: flex; align-items: center; gap: 0.25rem; font-size: 0.875rem;"
                  title="Ver cuenta corriente"
                >
                  <svg width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M0 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V4zm2-1a1 1 0 0 0-1 1v1h14V4a1 1 0 0 0-1-1H2zm13 4H1v5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V8z"/>
                    <path d="M2 10a1 1 0 0 1 1-1h1a1 1 0 1 1 0 2H3a1 1 0 0 1-1-1zm0 2a1 1 0 0 1 1-1h1a1 1 0 1 1 0 2H3a1 1 0 0 1-1-1zm4-2a1 1 0 0 1 1-1h1a1 1 0 1 1 0 2H7a1 1 0 0 1-1-1zm0 2a1 1 0 0 1 1-1h1a1 1 0 1 1 0 2H7a1 1 0 0 1-1-1zm4-2a1 1 0 0 1 1-1h1a1 1 0 1 1 0 2h-1a1 1 0 0 1-1-1zm0 2a1 1 0 0 1 1-1h1a1 1 0 1 1 0 2h-1a1 1 0 0 1-1-1z"/>
                  </svg>
                  Cta Cte
                </button>
                -->

                <button
                  onclick="showClientPayment(${id})"
                  style="padding: 0.5rem; background: #f59e0b; color: white; border: none; border-radius: 0.375rem; cursor: pointer; display: flex; align-items: center; gap: 0.25rem; font-size: 0.875rem;"
                  title="Ingresar pago"
                >
                  <svg width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M0 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V4zm2-1a1 1 0 0 0-1 1v1h14V4a1 1 0 0 0-1-1H2zm13 4H1v5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V8z"/>
                    <path d="M2 10a1 1 0 0 1 1-1h1a1 1 0 1 1 0 2H3a1 1 0 0 1-1-1zm0 2a1 1 0 0 1 1-1h1a1 1 0 1 1 0 2H3a1 1 0 0 1-1-1zm4-2a1 1 0 0 1 1-1h1a1 1 0 1 1 0 2H7a1 1 0 0 1-1-1zm0 2a1 1 0 0 1 1-1h1a1 1 0 1 1 0 2H7a1 1 0 0 1-1-1zm4-2a1 1 0 0 1 1-1h1a1 1 0 1 1 0 2h-1a1 1 0 0 1-1-1zm0 2a1 1 0 0 1 1-1h1a1 1 0 1 1 0 2h-1a1 1 0 0 1-1-1z"/>
                  </svg>
                  Pagar
                </button>

                <button
                  onclick="showReturnablesModal(${id})"
                  style="padding: 0.5rem; background: #10b981; color: white; border: none; border-radius: 0.375rem; cursor: pointer; display: flex; align-items: center; gap: 0.25rem; font-size: 0.875rem;"
                  title="Devolver retornables"
                >
                  <svg width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M8 3a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.5.5H6a.5.5 0 0 1 0-1h1.5V3.5A.5.5 0 0 1 8 3zm3.5 1a.5.5 0 0 1 .5.5v1.5H12a.5.5 0 0 1 0 1h-2a.5.5 0 0 1-.5-.5v-2a.5.5 0 0 1 .5-.5z"/>
                    <path d="M8 1a2 2 0 0 1 2 2v2a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h2zM6 3a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1V4a1 1 0 0 0-1-1H6z"/>
                    <path d="M8 9a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.5.5H6a.5.5 0 0 1 0-1h1.5v-1.5A.5.5 0 0 1 8 9zm3.5 1a.5.5 0 0 1 .5.5v1.5H12a.5.5 0 0 1 0 1h-2a.5.5 0 0 1-.5-.5v-2a.5.5 0 0 1 .5-.5z"/>
                    <path d="M8 7a2 2 0 0 1 2 2v2a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V9a2 2 0 0 1 2-2h2zM6 9a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1H6z"/>
                  </svg>
                  Devolver
                </button>

                <button
                  onclick="deleteClient(${id})"
                  style="padding: 0.5rem; background: #ef4444; color: white; border: none; border-radius: 0.375rem; cursor: pointer; display: flex; align-items: center; gap: 0.25rem; font-size: 0.875rem;"
                  title="Eliminar cliente"
                >
                  <svg width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
                    <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
                  </svg>
                  Eliminar
                </button>
              </div>
            </div>
          </div>
        `;
      }).join('')}
    </div>
  `;

  contentArea.innerHTML = html;

  // Pasar los clientes a las funciones globales
  if (window.setCurrentClients) {
    window.setCurrentClients(clientes);
  }
}

// Cargar secci√≥n de productos con dise√±o moderno
async function loadProductosSection() {
  console.log('üõçÔ∏è Cargando secci√≥n de productos...');
  const contentArea = document.getElementById('contentArea');
  
  // Cargar el HTML del componente ProductosSection
  const productosHTML = `
    <div class="productos-section">
      <div class="productos-header">
        <div class="header-content">
          <h2 class="section-title">
            <span class="icon">üì¶</span>
            Gesti√≥n de Productos
          </h2>
          <p class="section-subtitle">Administra tu cat√°logo de productos de manera eficiente</p>
        </div>
      </div>

      <div class="productos-container">
        <!-- Panel de acciones -->
        <div class="actions-panel">
          <div class="actions-header">
            <h3>‚ö° Acciones R√°pidas</h3>
          </div>
          
          <div class="actions-content">
            <button onclick="window.showCreateProductModal()" class="btn-create">
              <span class="btn-icon">‚ûï</span>
              Nuevo Producto
            </button>
            
            <div class="search-group">
              <div class="search-input-wrapper">
                <span class="search-icon">üîç</span>
                <input 
                  type="text" 
                  id="productosSearch" 
                  placeholder="Buscar productos..."
                  class="search-input"
                >
              </div>
            </div>
          </div>
        </div>

        <!-- Panel de filtros -->
        <div class="filters-panel">
          <div class="filters-header">
            <h3>üîç Filtros</h3>
          </div>
          
          <div class="filters-content">
            <div class="filter-group">
              <label for="filterProductosEstado" class="filter-label">
                <span class="label-icon">üìä</span>
                Estado
              </label>
              <div class="modern-select estado-select">
                <select id="filterProductosEstado">
                  <option value="todos">Todos los productos</option>
                  <option value="activos">Solo activos</option>
                  <option value="inactivos">Solo inactivos</option>
                </select>
              </div>
            </div>
            
            <button onclick="window.clearProductosFilters()" class="btn-clear">
              <span class="btn-icon">üîÑ</span>
              Limpiar Filtros
            </button>
          </div>
        </div>

        <!-- Lista de productos -->
        <div class="products-area">
          <div id="productosList" class="products-container">
            <div class="empty-state">
              <div class="empty-icon">üì¶</div>
              <h4>Cargando productos...</h4>
              <p>Preparando tu cat√°logo de productos</p>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Modal para crear/editar producto -->
    <div id="productModal" class="modal-overlay hidden">
      <div class="modal-content">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5rem;">
          <h4 id="modalTitle" class="modal-title">Nuevo Producto</h4>
          <button onclick="closeProductModal()" style="background: none; border: none; font-size: 1.5rem; cursor: pointer; color: #6b7280;">√ó</button>
        </div>
        
        <form id="productForm">
          <div class="form-group">
            <label class="form-label">Descripci√≥n del Producto</label>
            <input type="text" id="productName" name="nombre" required class="form-input" placeholder="Ej: Botella 2L, Bid√≥n 20L, etc." />
          </div>
          
          <div class="form-group">
            <label class="form-label">Precio</label>
            <input type="number" id="productPrice" name="precio" step="0.01" required class="form-input" />
          </div>
          
          <div class="form-group">
            <label class="form-label">Stock</label>
            <input type="number" id="productStock" name="stock" required class="form-input" />
          </div>
          
          <div class="form-group">
            <div class="checkbox-group">
              <input type="checkbox" id="productRetornable" name="esRetornable" class="form-checkbox" />
              <label class="form-label" style="margin: 0; cursor: pointer;">Es Retornable</label>
            </div>
            <p style="font-size: 0.75rem; color: rgba(255, 255, 255, 0.6); margin-top: 0.25rem;">Marcar si el producto debe ser devuelto (ej: bidones, botellas de vidrio)</p>
          </div>
          
          <div class="form-group">
            <div class="checkbox-group">
              <input type="checkbox" id="productActivo" name="activo" class="form-checkbox" checked />
              <label class="form-label" style="margin: 0; cursor: pointer;">Producto Activo</label>
            </div>
            <p style="font-size: 0.75rem; color: rgba(255, 255, 255, 0.6); margin-top: 0.25rem;">Desmarcar para ocultar el producto sin eliminarlo</p>
          </div>
          
          <div class="modal-buttons">
            <button type="button" onclick="closeProductModal()" class="btn-secondary">
              Cancelar
            </button>
            <button type="submit" class="btn-primary" style="width: auto; padding: 0.5rem 1rem;">
              <span id="productSubmitButtonText">Guardar Producto</span>
            </button>
          </div>
        </form>
      </div>
    </div>
      </div>
    </div>
  `;
  
  contentArea.innerHTML = productosHTML;
  
  // Configurar el formulario
  const productForm = document.getElementById('productForm');
  if (productForm) {
    productForm.addEventListener('submit', handleProductSubmit);
  }
  
  // Configurar listeners de eventos
  setupProductEventListeners();
  
  // Cargar los productos
  await loadProductosData();
  
  // Configurar event listeners despu√©s de cargar el HTML y los productos
  setTimeout(() => {
    console.log('üîß Configurando event listeners despu√©s de cargar productos...');
    setupProductosEventListeners();
  }, 500);
}

// Cargar productos (funci√≥n original renombrada)
async function loadProductosData() {
  console.log('üõçÔ∏è Cargando productos...');
  const token = localStorage.getItem('token');

  try {
    const response = await fetch('https://back-adm.fly.dev/api/productos', {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Error del servidor:', errorText);
      throw new Error(`Error ${response.status}: ${errorText}`);
    }

    const productos = await response.json();
    console.log('‚úÖ Productos cargados:', productos.length, 'productos');
    console.log('üìã Datos de productos:', productos);

    // Guardar en variable global para b√∫squedas y edici√≥n
    currentProducts = productos;

    // Aplicar filtros si existen
    if (currentProductFilters.search || currentProductFilters.estado !== 'all') {
      await applyProductFilters();
    } else {
    renderProductsList(productos);
    }
  } catch (error) {
    console.error('üí• Error cargando productos:', error);
    const contentArea = document.getElementById('contentArea');
    if (contentArea) {
      contentArea.innerHTML = `
        <h3 class="content-title">Gesti√≥n de Productos</h3>
        <div style="text-align: center; padding: 2rem; color: #dc2626;">
          <p>Error cargando productos: ${error.message}</p>
          <button onclick="loadProductosData()" class="btn-primary" style="margin-top: 1rem;">
            Reintentar
          </button>
        </div>
      `;
    }
  }
}

function renderProductos(productos) {
  const contentArea = document.getElementById('contentArea');

  if (productos.length === 0) {
    contentArea.innerHTML = `
      <h3 class="content-title">Gesti√≥n de Productos</h3>
      <div style="text-align: center; padding: 3rem; color: #6b7280;">
        <p style="font-size: 1.125rem; margin-bottom: 0.5rem;">No hay productos registrados</p>
        <p style="font-size: 0.875rem;">Los productos aparecer√°n aqu√≠ cuando se registren en el sistema.</p>
        <button onclick="productModal.show()" class="btn-primary" style="margin-top: 1rem;">
          + Agregar Primer Producto
        </button>
      </div>
    `;
    return;
  }

  const html = `
    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5rem;">
      <h3 class="content-title" style="margin-bottom: 0;">Gesti√≥n de Productos</h3>
      <button onclick="productModal.show()" class="btn-primary" style="width: auto; padding: 0.5rem 1rem;">
        + Nuevo Producto
      </button>
    </div>

    <div style="margin-bottom: 1rem; display: flex; gap: 1rem; align-items: center;">
      <div style="position: relative; max-width: 300px; flex: 1;">
        <input
          type="text"
          id="searchProducts"
          placeholder="Buscar productos por descripci√≥n..."
          class="form-input"
          style="padding-left: 2.5rem;"
          onkeyup="debounceSearch(this.value)"
          oninput="debounceSearch(this.value)"
        />
        <svg style="position: absolute; left: 0.75rem; top: 50%; transform: translateY(-50%); width: 1rem; height: 1rem; color: #6b7280;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0 114 0z"></path>
        </svg>
      </div>
      <button onclick="clearSearch()" style="padding: 0.5rem; background: #6b7280; color: white; border: none; border-radius: 0.375rem; cursor: pointer; font-size: 0.875rem;">
        Limpiar
      </button>
    </div>

    <div style="display: grid; gap: 1rem;">
      ${productos.map(producto => {
        // Asegurar que todos los campos tengan valores por defecto
        // Intentar diferentes nombres de columnas que podr√≠an existir
        const id = producto.id || producto.codigo || producto.Code || 'N/A';
        const codigo = producto.codigo || producto.Code || producto.id || 'N/A';
        const nombre = producto.descripcion || producto.Description || producto.description || 'Sin nombre';
        const precio = parseFloat(producto.precio || producto.price || producto.Price || 0);
        const stock = parseInt(producto.stock || producto.Stock || producto.cantidad || producto.Cantidad || 0);
        const esRetornable = producto.esRetornable == 1;

        return `
          <div style="border: 1px solid #e5e7eb; border-radius: 0.5rem; padding: 1rem; background: white; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
            <div style="display: flex; justify-content: space-between; align-items: start;">
              <div style="flex: 1;">
                <div style="display: flex; align-items: center; gap: 0.5rem; margin-bottom: 0.5rem; flex-wrap: wrap;">
                  <h4 style="font-weight: 600; color: #111827; margin: 0;">${nombre}</h4>
                  <span style="background: #f3f4f6; color: #6b7280; padding: 0.125rem 0.5rem; border-radius: 0.25rem; font-size: 0.75rem;">
                    #${codigo}
                  </span>
                  ${esRetornable ? `
                    <span style="background: #dbeafe; color: #1e40af; padding: 0.125rem 0.5rem; border-radius: 0.25rem; font-size: 0.75rem; font-weight: 500;">
                      üîÑ Retornable
                    </span>
                  ` : ''}
                </div>

                <div style="display: flex; gap: 1rem; align-items: center;">
                  <div style="display: flex; align-items: center; gap: 0.25rem;">
                    <span style="color: #059669; font-weight: 600; font-size: 1.125rem;">$${precio.toFixed(2)}</span>
                  </div>

                  <div style="display: flex; align-items: center; gap: 0.25rem;">
                    <span style="color: #6b7280; font-size: 0.875rem;">Stock:</span>
                    <span style="color: ${stock > 0 ? '#059669' : '#dc2626'}; font-weight: 600; font-size: 0.875rem;">
                      ${stock} ${stock === 1 ? 'unidad' : 'unidades'}
                    </span>
                  </div>
                </div>
              </div>

              <div style="display: flex; gap: 0.5rem; margin-left: 1rem;">
                <button
                  onclick="editProduct(${id})"
                  style="padding: 0.5rem; background: #3b82f6; color: white; border: none; border-radius: 0.375rem; cursor: pointer; display: flex; align-items: center; gap: 0.25rem; font-size: 0.875rem;"
                  title="Editar producto"
                >
                  <svg width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M12.146.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1 0 .708L10.5 8.207l-3-3L12.146.146zM11.207 9l-3-3L2.5 11.707V14.5a.5.5 0 0 0 .5.5h2.793L11.207 9z"/>
                  </svg>
                  Editar
                </button>

                <button
                  onclick="deleteProduct(${id})"
                  style="padding: 0.5rem; background: #ef4444; color: white; border: none; border-radius: 0.375rem; cursor: pointer; display: flex; align-items: center; gap: 0.25rem; font-size: 0.875rem;"
                  title="Eliminar producto"
                >
                  <svg width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
                    <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
                  </svg>
                  Eliminar
                </button>
              </div>
            </div>
          </div>
        `;
      }).join('')}
    </div>
  `;

  contentArea.innerHTML = html;

  // Pasar los productos al modal para que pueda acceder a ellos
  if (window.productModal) {
    window.productModal.setCurrentProducts(productos);
  }
}

// Cargar informes con dise√±o moderno
async function loadInformes() {
  const contentArea = document.getElementById('contentArea');

  const html = `
    <div class="informes-section">
      <div class="informes-header">
        <div class="header-content">
          <h2 class="section-title">
            <span class="icon">üìä</span>
            Informes de Ventas
          </h2>
          <p class="section-subtitle">Analiza el rendimiento de tu negocio con reportes detallados</p>
        </div>
      </div>

      <div class="informes-container">
        <!-- Panel de configuraci√≥n -->
        <div class="config-panel">
          <div class="config-header">
            <h3>‚öôÔ∏è Configuraci√≥n del Informe</h3>
          </div>
          
          <div class="config-form">
            <div class="form-row">
              <div class="form-group">
                <label for="fechaDesde" class="form-label">
                  <span class="label-icon">üìÖ</span>
                  Fecha Desde
                </label>
                <input 
                  type="date" 
                  id="fechaDesde" 
                  class="form-input date-input"
                  required
                >
              </div>
              
              <div class="form-group">
                <label for="fechaHasta" class="form-label">
                  <span class="label-icon">üìÖ</span>
                  Fecha Hasta
                </label>
                <input 
                  type="date" 
                  id="fechaHasta" 
                  class="form-input date-input"
                  required
                >
              </div>
            </div>
            
            <div class="form-row">
              <div class="form-group">
                <label for="tipoInforme" class="form-label">
                  <span class="label-icon">üìã</span>
                  Tipo de Informe
                </label>
                            <div class="modern-select tipo-informe-select">
              <select id="tipoInforme">
                <option value="resumen">üìà Resumen General</option>
                <option value="detallado">üë• Detalle por Cliente</option>
              </select>
            </div>
              </div>
              
              <div class="form-group">
                <button 
                  onclick="window.generarInforme()" 
                  class="btn-generate"
                  id="btnGenerarInforme"
                >
                  <span class="btn-icon">üöÄ</span>
                  Generar Informe
                </button>
              </div>
            </div>
          </div>
        </div>

        <!-- √Årea de resultados -->
        <div class="results-area">
          <div id="informeResultados">
            <div class="empty-state">
              <div class="empty-icon">üìä</div>
              <h4>Selecciona las fechas y genera tu informe</h4>
              <p>Configura el per√≠odo de an√°lisis y el tipo de informe que deseas generar</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  `;

  contentArea.innerHTML = html;
  
  // Establecer fechas por defecto (√∫ltimos 30 d√≠as)
  const hoy = new Date();
  const hace30Dias = new Date();
  hace30Dias.setDate(hoy.getDate() - 30);
  
  const fechaDesde = document.getElementById('fechaDesde');
  const fechaHasta = document.getElementById('fechaHasta');
  
  if (fechaDesde && fechaHasta) {
    fechaDesde.value = hace30Dias.toISOString().split('T')[0];
    fechaHasta.value = hoy.toISOString().split('T')[0];
  }
}

// Funci√≥n para generar informes
async function generarInforme() {
  console.log('üöÄ generarInforme() ejecutada');
  
  const fechaDesde = document.getElementById('fechaDesde')?.value;
  const fechaHasta = document.getElementById('fechaHasta')?.value;
  const tipoInforme = document.getElementById('tipoInforme')?.value;
  const resultadosDiv = document.getElementById('informeResultados');

  console.log('üìã Datos del formulario:', { fechaDesde, fechaHasta, tipoInforme });

  if (!fechaDesde || !fechaHasta) {
    alert('Por favor selecciona ambas fechas');
    return;
  }

  if (new Date(fechaDesde) > new Date(fechaHasta)) {
    alert('La fecha desde no puede ser mayor a la fecha hasta');
    return;
  }

  try {
    // Mostrar loading
    resultadosDiv.innerHTML = `
      <div class="loading-state">
        <div class="spinner"></div>
        <p>Generando informe...</p>
      </div>
    `;

    const token = localStorage.getItem('token');
    const response = await fetch(`https://back-adm.fly.dev/api/informes/ventas?fechaDesde=${fechaDesde}&fechaHasta=${fechaHasta}&tipo=${tipoInforme}`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });

    if (!response.ok) {
      throw new Error('Error al generar el informe');
    }

    const datos = await response.json();
    mostrarResultadosInforme(datos, tipoInforme);

  } catch (error) {
    console.error('Error generando informe:', error);
    resultadosDiv.innerHTML = `
      <div class="error-state">
        <div class="error-icon">‚ö†Ô∏è</div>
        <h4>Error al generar informe</h4>
        <p>${error.message}</p>
      </div>
    `;
  }
}

// Funci√≥n para mostrar los resultados del informe
function mostrarResultadosInforme(datos, tipoInforme) {
  const resultadosDiv = document.getElementById('informeResultados');
  
  if (tipoInforme === 'resumen') {
    mostrarInformeResumen(datos, resultadosDiv);
  } else {
    mostrarInformeDetallado(datos, resultadosDiv);
  }
}



// Variables globales para productos
let currentProducts = [];
let editingProductId = null;
let searchTimeout = null;
let currentProductFilters = { search: '', estado: 'all' };

// Variables globales para clientes
let currentClients = [];
let editingClientId = null;
let clientSearchTimeout = null;

// ========== FUNCIONES PARA PRODUCTOS ==========

// Funci√≥n de debounce para la b√∫squeda de productos
function debounceSearch(searchTerm) {
  // Limpiar el timeout anterior
  if (searchTimeout) {
    clearTimeout(searchTimeout);
  }

  // Establecer un nuevo timeout
  searchTimeout = setTimeout(() => {
    searchProducts(searchTerm);
  }, 300); // Esperar 300ms despu√©s de que el usuario deje de escribir
}

// Limpiar b√∫squeda de productos
function clearSearch() {
  const searchInput = document.getElementById('searchProducts');
  if (searchInput) {
    searchInput.value = '';
    searchProducts(''); // Mostrar todos los productos
  }
}

// Funci√≥n para editar producto
function editProduct(productId) {
  console.log('‚úèÔ∏è Editando producto ID:', productId);
  console.log('üìã Productos disponibles:', currentProducts.length);

  const producto = currentProducts.find(p => {
    const id = p.codigo || p.id;
    console.log('üîç Comparando:', id, 'con', productId);
    return id == productId;
  });

  if (!producto) {
    console.error('‚ùå Producto no encontrado:', productId);
    alert('Producto no encontrado');
    return;
  }

  console.log('‚úÖ Producto encontrado:', producto);

  // Usar el modal component
  if (window.productModal) {
    window.productModal.show(producto);
  } else {
    console.error('‚ùå ProductModal no est√° disponible');
    alert('Error: Modal no disponible');
  }
}

// Eliminar producto
async function deleteProduct(productId) {
  console.log('üóëÔ∏è Eliminando producto ID:', productId);

  const producto = currentProducts.find(p => (p.codigo || p.id) == productId);
  const nombreProducto = producto ? (producto.descripcion || `Producto #${productId}`) : `Producto #${productId}`;

  if (!confirm(`¬øEst√°s seguro de que quieres desactivar "${nombreProducto}"?\n\nEl producto se marcar√° como inactivo y no aparecer√° en nuevos pedidos.`)) {
    return;
  }

  const token = localStorage.getItem('token');

  try {
    console.log('üì° Enviando petici√≥n DELETE...');
    const response = await fetch(`https://back-adm.fly.dev/api/productos/${productId}`, {
      method: 'DELETE',
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Error del servidor:', errorText);
      throw new Error(`Error ${response.status}: ${errorText}`);
    }

    console.log('‚úÖ Producto desactivado correctamente');

    // Mostrar mensaje de √©xito
    showSuccessMessage('Producto desactivado correctamente');

    // Recargar la lista
    loadProductosData();

  } catch (error) {
    console.error('üí• Error eliminando producto:', error);
    showErrorMessage('Error eliminando producto: ' + error.message);
  }
}

// Funciones para mostrar mensajes
function showSuccessMessage(message) {
  const messageDiv = document.createElement('div');
  messageDiv.style.cssText = `
    position: fixed;
    top: 20px;
    right: 20px;
    background: #10b981;
    color: white;
    padding: 1rem 1.5rem;
    border-radius: 0.5rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    z-index: 10000;
    font-weight: 500;
  `;
  messageDiv.textContent = message;

  document.body.appendChild(messageDiv);

  setTimeout(() => {
    messageDiv.remove();
  }, 3000);
}

function showErrorMessage(message) {
  const messageDiv = document.createElement('div');
  messageDiv.style.cssText = `
    position: fixed;
    top: 20px;
    right: 20px;
    background: #ef4444;
    color: white;
    padding: 1rem 1.5rem;
    border-radius: 0.5rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    z-index: 10000;
    font-weight: 500;
  `;
  messageDiv.textContent = message;

  document.body.appendChild(messageDiv);

  setTimeout(() => {
    messageDiv.remove();
  }, 5000);
}

// Buscar productos
async function searchProducts(searchTerm: string) {
  console.log('üîç Buscando productos:', searchTerm);
  currentProductFilters.search = searchTerm;
  await applyProductFilters();
}

// Filtrar productos por estado (activo/inactivo)
async function filterProductosByEstado(estado?: string) {
  const estadoFilter = estado || (document.getElementById('filterProductosEstado') as HTMLSelectElement)?.value || 'todos';
  console.log('üîç Filtrando productos por estado:', estadoFilter);
  currentProductFilters.estado = estadoFilter;
  await applyProductFilters();
}

// Aplicar filtros de productos
async function applyProductFilters() {
  console.log('üîç Aplicando filtros de productos:', currentProductFilters);
  const token = localStorage.getItem('token');

  try {
    // Primero cargar todos los productos
    const response = await fetch('https://back-adm.fly.dev/api/productos', {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Error del servidor:', errorText);
      throw new Error(`Error ${response.status}: ${errorText}`);
    }

    let productos = await response.json();
    console.log('‚úÖ Productos cargados:', productos.length);

    // Aplicar filtro de b√∫squeda (si hay)
    if (currentProductFilters.search && currentProductFilters.search.trim()) {
      const searchTerm = currentProductFilters.search.toLowerCase();
      productos = productos.filter(producto => 
        (producto.descripcion || producto.nombre || '').toLowerCase().includes(searchTerm)
      );
      console.log('üîç Productos despu√©s de b√∫squeda:', productos.length);
    }

    // Aplicar filtro de estado
    if (currentProductFilters.estado !== 'todos') {
      if (currentProductFilters.estado === 'activos') {
        productos = productos.filter(producto => producto.activo === 1);
      } else if (currentProductFilters.estado === 'inactivos') {
        productos = productos.filter(producto => producto.activo === 0);
      }
      console.log('üîç Productos despu√©s de filtro de estado:', productos.length);
    }

    currentProducts = productos;
    renderProductsList(productos);
  } catch (error) {
    console.error('üí• Error aplicando filtros:', error);
    // En caso de error, mostrar todos los productos
    loadProductosData();
  }
}

// Limpiar filtros de productos
function clearProductosFilters() {
  console.log('üßπ Limpiando filtros de productos');
  
  // Limpiar campos de filtro
  const searchInput = document.getElementById('productosSearch') as HTMLInputElement;
  const estadoFilter = document.getElementById('filterProductosEstado') as HTMLSelectElement;
  
  if (searchInput) searchInput.value = '';
  if (estadoFilter) estadoFilter.value = 'todos';
  
  // Resetear filtros
  currentProductFilters = { search: '', estado: 'todos' };
  
  // Recargar productos sin filtros
  loadProductosData();
}

// Renderizar lista de productos con dise√±o moderno
function renderProductsList(productos) {
  const productsList = document.getElementById('productosList');
  if (!productsList) return;
  
  if (productos.length === 0) {
    productsList.innerHTML = `
      <div class="empty-state">
        <div class="empty-icon">üì¶</div>
        <h4>No hay productos registrados</h4>
        <p>Crea tu primer producto para comenzar</p>
      </div>
    `;
    return;
  }
  
  // Grid de productos con tarjetas modernas
  productsList.innerHTML = `
    <div class="products-grid">
      ${productos.map(producto => `
        <div class="product-card">
          <div class="product-header">
            <h4 class="product-title">
              ${producto.descripcion || producto.nombre || producto.name || 'Sin nombre'}
            </h4>
            <span class="product-status ${producto.activo ? 'active' : 'inactive'}">
              ${producto.activo ? 'Activo' : 'Inactivo'}
            </span>
          </div>
          
          <div class="product-info">
            <div class="product-detail">
              <span class="detail-label">C√≥digo</span>
              <span class="detail-value">${producto.codigo || producto.id}</span>
            </div>
            
            <div class="product-detail">
              <span class="detail-label">Precio</span>
              <span class="detail-value price">$${parseFloat(producto.precio || producto.price || 0).toFixed(2)}</span>
            </div>
            
            <div class="product-detail">
              <span class="detail-label">Stock</span>
              <span class="detail-value stock">${producto.stock || producto.quantity || 0}</span>
            </div>
            
            <div class="product-detail">
              <span class="detail-label">Tipo</span>
              <span class="detail-value retornable">
                ${producto.esRetornable ? 'üîÑ Retornable' : 'üì¶ No retornable'}
              </span>
            </div>
          </div>
          
          <div class="product-actions">
            <button onclick="editProductInline(${producto.codigo || producto.id})" class="btn-edit">
              ‚úèÔ∏è Editar
            </button>
            ${producto.activo ? 
              `<button onclick="deleteProductInline(${producto.codigo || producto.id})" class="btn-delete">
                üóëÔ∏è Eliminar
              </button>` : 
              `<button onclick="activateProductInline(${producto.codigo || producto.id})" class="btn-activate">
                ‚úÖ Activar
              </button>`
            }
          </div>
        </div>
      `).join('')}
    </div>
  `;
}

// Mostrar modal para crear producto
function showCreateProductModal() {
  editingProductId = null;
  const modalTitle = document.getElementById('modalTitle');
  const productForm = document.getElementById('productForm') as HTMLFormElement;
  const productModal = document.getElementById('productModal');
  
  if (modalTitle) modalTitle.textContent = 'Nuevo Producto';
  if (productForm) productForm.reset();
  
  // Configurar valores por defecto para nuevo producto
  const productRetornable = document.getElementById('productRetornable') as HTMLInputElement;
  const productActivo = document.getElementById('productActivo') as HTMLInputElement;
  
  if (productRetornable) productRetornable.checked = false; // Por defecto no retornable
  if (productActivo) productActivo.checked = true; // Por defecto activo
  
  const submitButtonText = document.getElementById('productSubmitButtonText');
  if (submitButtonText) submitButtonText.textContent = 'Guardar Producto';
  
  if (productModal) {
    productModal.classList.remove('hidden');
    productModal.classList.add('show');
    productModal.style.zIndex = '10000';
  }
  
  // Enfocar el primer campo
  setTimeout(() => {
    const productName = document.getElementById('productName');
    if (productName) productName.focus();
  }, 100);
}

// Mostrar modal para editar producto
function editProductInline(productId: any) {
  const producto = currentProducts.find(p => (p.codigo || p.id) == productId);
  if (!producto) return;
  
  editingProductId = productId;
  
  const modalTitle = document.getElementById('modalTitle');
  const productName = document.getElementById('productName') as HTMLInputElement;
  const productPrice = document.getElementById('productPrice') as HTMLInputElement;
  const productStock = document.getElementById('productStock') as HTMLInputElement;
  const productRetornable = document.getElementById('productRetornable') as HTMLInputElement;
  const productActivo = document.getElementById('productActivo') as HTMLInputElement;
  const productModal = document.getElementById('productModal');
  
  if (modalTitle) modalTitle.textContent = 'Editar Producto';
  if (productName) productName.value = producto.descripcion || producto.nombre || producto.name || '';
  if (productPrice) productPrice.value = producto.precio || producto.price || '';
  if (productStock) productStock.value = producto.stock || producto.quantity || '';
  if (productRetornable) productRetornable.checked = !!(producto.esRetornable);
  if (productActivo) productActivo.checked = !!(producto.activo);
  
  const submitButtonText = document.getElementById('productSubmitButtonText');
  if (submitButtonText) submitButtonText.textContent = 'Actualizar Producto';
  
  if (productModal) {
    productModal.classList.remove('hidden');
    productModal.classList.add('show');
    productModal.style.zIndex = '10000';
  }
  
  // Enfocar el primer campo
  setTimeout(() => {
    if (productName) productName.focus();
  }, 100);
}

// Hacer la funci√≥n disponible globalmente
window.editProductInline = editProductInline;

// Cerrar modal
function closeProductModal() {
  const productModal = document.getElementById('productModal');
  if (productModal) {
    productModal.classList.remove('show');
    productModal.classList.add('hidden');
  }
  editingProductId = null;
  
  // Limpiar formulario
  const productForm = document.getElementById('productForm') as HTMLFormElement;
  if (productForm) productForm.reset();
}

// Manejar env√≠o del formulario
async function handleProductSubmit(e) {
  e.preventDefault();
  
  const submitButton = e.target.querySelector('button[type="submit"]');
  const submitButtonText = document.getElementById('productSubmitButtonText');
  const originalText = submitButtonText ? submitButtonText.textContent : 'Guardar';
  
  // Mostrar loading
  if (submitButton) submitButton.disabled = true;
  if (submitButtonText) submitButtonText.textContent = 'Guardando...';
  
  const formData = new FormData(e.target);
  const productData = {
    descripcion: formData.get('nombre'), // El campo "nombre" del form se mapea a "descripcion" en la BD
    precio: parseFloat(formData.get('precio')),
    stock: parseInt(formData.get('stock')),
    esRetornable: formData.get('esRetornable') ? 1 : 0, // Convertir checkbox a 1/0
    activo: formData.get('activo') ? 1 : 0 // Convertir checkbox a 1/0
  };
  
  const token = localStorage.getItem('token');
  
  try {
    let response;
    const isEditing = !!editingProductId;
    
    if (isEditing) {
      response = await fetch(`https://back-adm.fly.dev/api/productos/${editingProductId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(productData)
      });
    } else {
      response = await fetch('https://back-adm.fly.dev/api/productos', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(productData)
      });
    }
    
    if (!response.ok) {
      throw new Error('Error guardando producto');
    }
    
    const result = await response.json();
    
    closeProductModal();
    
    // Emitir evento para actualizaci√≥n reactiva
    if (window.eventBus && window.EVENTS) {
      if (isEditing) {
        window.eventBus.emit(window.EVENTS.PRODUCTO_UPDATED, {
          id: editingProductId,
          producto: { ...productData, codigo: editingProductId }
        });
      } else {
        window.eventBus.emit(window.EVENTS.PRODUCTO_CREATED, {
          producto: result
        });
      }
    }
    
    // Mostrar mensaje de √©xito
    showSuccessMessage(isEditing ? 'Producto actualizado correctamente' : 'Producto creado correctamente');
    
  } catch (error) {
    console.error('Error:', error);
    showErrorMessage('Error guardando producto: ' + error.message);
  } finally {
    // Restaurar bot√≥n
    if (submitButton) submitButton.disabled = false;
    if (submitButtonText) submitButtonText.textContent = originalText;
  }
}

// Eliminar producto (versi√≥n inline)
async function deleteProductInline(productId) {
  if (!confirm('¬øEst√°s seguro de que quieres desactivar este producto?\n\nEl producto se marcar√° como inactivo y no aparecer√° en nuevos pedidos.')) {
    return;
  }
  
  const token = localStorage.getItem('token');
  
  try {
    const response = await fetch(`https://back-adm.fly.dev/api/productos/${productId}`, {
      method: 'DELETE',
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    
    if (!response.ok) {
      throw new Error('Error eliminando producto');
    }
    
    // Emitir evento para actualizaci√≥n reactiva
    if (window.eventBus && window.EVENTS) {
      window.eventBus.emit(window.EVENTS.PRODUCTO_DELETED, {
        id: productId
      });
    }
    
    showSuccessMessage('Producto desactivado correctamente');
    
  } catch (error) {
    console.error('Error:', error);
    showErrorMessage('Error eliminando producto: ' + error.message);
  }
}

// Activar producto (versi√≥n inline)
async function activateProductInline(productId) {
  if (!confirm('¬øEst√°s seguro de que quieres activar este producto?\n\nEl producto volver√° a estar disponible para nuevos pedidos.')) {
    return;
  }
  
  const token = localStorage.getItem('token');
  
  try {
    const response = await fetch(`https://back-adm.fly.dev/api/productos/${productId}/activate`, {
      method: 'PUT',
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    
    if (!response.ok) {
      throw new Error('Error activando producto');
    }
    
    // Emitir evento para actualizaci√≥n reactiva
    if (window.eventBus && window.EVENTS) {
      window.eventBus.emit(window.EVENTS.PRODUCTO_ACTIVATED, {
        id: productId
      });
    }
    
    showSuccessMessage('Producto activado correctamente');
    
    // Recargar la lista para actualizar los botones
    loadProductosData();
    
  } catch (error) {
    console.error('Error:', error);
    showErrorMessage('Error activando producto: ' + error.message);
  }
}

// Funci√≥n searchProducts ya definida arriba

// Hacer las funciones de productos disponibles globalmente
window.showCreateProductModal = showCreateProductModal;
window.deleteProductInline = deleteProductInline;
window.activateProductInline = activateProductInline;
window.closeProductModal = closeProductModal;
window.handleProductSubmit = handleProductSubmit;
window.searchProducts = searchProducts;
window.renderProductsList = renderProductsList;
window.filterProductosByEstado = filterProductosByEstado;
window.searchProducts = searchProducts;
window.clearProductosFilters = clearProductosFilters;
window.applyProductFilters = applyProductFilters;

// Variables globales para filtros de clientes
let currentClientFilters = { search: '', saldo: 'todos', retornables: 'todos' };

// Funci√≥n para configurar event listeners de productos
function setupProductosEventListeners() {
  console.log('üîß Configurando event listeners de productos (setupProductosEventListeners)...');
  
  // B√∫squeda con debounce
  const searchInput = document.getElementById('productosSearch');
  if (searchInput) {
    console.log('‚úÖ Input de b√∫squeda encontrado en setupProductosEventListeners');
    let searchTimeout;
    
    searchInput.addEventListener('input', function() {
      console.log('üîç Input de b√∫squeda detectado:', this.value);
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(() => {
        console.log('üîç Ejecutando b√∫squeda:', this.value);
        if (window.searchProducts) {
          window.searchProducts(this.value);
        } else {
          console.error('‚ùå window.searchProducts no est√° disponible');
        }
      }, 300);
    });
    console.log('‚úÖ Event listener de b√∫squeda configurado');
  } else {
    console.log('‚ÑπÔ∏è Input de b√∫squeda de productos no encontrado (secci√≥n no activa)');
  }

  // Filtro de estado
  const estadoFilter = document.getElementById('filterProductosEstado');
  if (estadoFilter) {
    console.log('‚úÖ Selector de estado encontrado en setupProductosEventListeners');
    estadoFilter.addEventListener('change', function() {
      console.log('üîç Cambio de estado detectado:', this.value);
      if (window.filterProductosByEstado) {
        window.filterProductosByEstado(this.value);
      } else {
        console.error('‚ùå window.filterProductosByEstado no est√° disponible');
      }
    });
    console.log('‚úÖ Event listener de filtro de estado configurado');
  } else {
    console.log('‚ÑπÔ∏è Selector de estado de productos no encontrado (secci√≥n no activa)');
  }
}

// Hacer la funci√≥n disponible globalmente
window.setupProductosEventListeners = setupProductosEventListeners;

// Hacer las funciones de clientes disponibles globalmente
window.searchClientes = searchClientes;
window.filterClientesBySaldo = filterClientesBySaldo;
window.filterClientesByRetornables = filterClientesByRetornables;
window.clearClientesFilters = clearClientesFilters;
window.applyClientFilters = applyClientFilters;
window.renderClientesList = renderClientesList;
window.setupClientesEventListeners = setupClientesEventListeners;
window.loadClientesSection = loadClientesSection;

// Funciones globales para informes
window.clearInformeSearch = clearInformeSearch;
window.filterInformeClientes = filterInformeClientes;
window.setupInformeSearch = setupInformeSearch;

// Buscar clientes
async function searchClientes(searchTerm: string) {
  console.log('üîç Buscando clientes:', searchTerm);
  currentClientFilters.search = searchTerm;
  await applyClientFilters();
}

// Filtrar clientes por saldo
async function filterClientesBySaldo(saldo?: string) {
  const saldoFilter = saldo || (document.getElementById('filterClientesSaldo') as HTMLSelectElement)?.value || 'todos';
  console.log('üîç Filtrando clientes por saldo:', saldoFilter);
  currentClientFilters.saldo = saldoFilter;
  await applyClientFilters();
}

// Filtrar clientes por retornables
async function filterClientesByRetornables(retornables?: string) {
  const retornablesFilter = retornables || (document.getElementById('filterClientesRetornables') as HTMLSelectElement)?.value || 'todos';
  console.log('üîç Filtrando clientes por retornables:', retornablesFilter);
  currentClientFilters.retornables = retornablesFilter;
  await applyClientFilters();
}

// Aplicar filtros de clientes
async function applyClientFilters() {
  console.log('üîç Aplicando filtros de clientes:', currentClientFilters);
  const token = localStorage.getItem('token');

  try {
    // Primero cargar todos los clientes
    const response = await fetch('https://back-adm.fly.dev/api/clientes', {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Error del servidor:', errorText);
      throw new Error(`Error ${response.status}: ${errorText}`);
    }

    let clientes = await response.json();
    console.log('‚úÖ Clientes cargados:', clientes.length);

    // Aplicar filtro de b√∫squeda (si hay)
    if (currentClientFilters.search && currentClientFilters.search.trim()) {
      const searchTerm = currentClientFilters.search.toLowerCase();
      clientes = clientes.filter(cliente => {
        const nombre = (cliente.nombre || cliente.name || '').toLowerCase();
        const apellido = (cliente.apellido || cliente.lastname || '').toLowerCase();
        const telefono = (cliente.telefono || cliente.phone || '').toLowerCase();
        const direccion = (cliente.direccion || cliente.address || '').toLowerCase();
        
        return nombre.includes(searchTerm) || 
               apellido.includes(searchTerm) || 
               telefono.includes(searchTerm) || 
               direccion.includes(searchTerm);
      });
      console.log('üîç Clientes despu√©s de b√∫squeda:', clientes.length);
    }

    // Aplicar filtro de saldo
    if (currentClientFilters.saldo !== 'todos') {
      if (currentClientFilters.saldo === 'positivo') {
        clientes = clientes.filter(cliente => parseFloat(cliente.saldo || 0) > 0);
      } else if (currentClientFilters.saldo === 'negativo') {
        clientes = clientes.filter(cliente => parseFloat(cliente.saldo || 0) < 0);
      } else if (currentClientFilters.saldo === 'cero') {
        clientes = clientes.filter(cliente => parseFloat(cliente.saldo || 0) === 0);
      }
      console.log('üîç Clientes despu√©s de filtro de saldo:', clientes.length);
    }

    // Aplicar filtro de retornables
    if (currentClientFilters.retornables !== 'todos') {
      if (currentClientFilters.retornables === 'con') {
        clientes = clientes.filter(cliente => parseInt(cliente.retornables || 0) > 0);
      } else if (currentClientFilters.retornables === 'sin') {
        clientes = clientes.filter(cliente => parseInt(cliente.retornables || 0) === 0);
      }
      console.log('üîç Clientes despu√©s de filtro de retornables:', clientes.length);
    }

    currentClients = clientes;
    renderClientesList(clientes);
  } catch (error) {
    console.error('üí• Error aplicando filtros:', error);
    // En caso de error, mostrar todos los clientes
    loadClientesData();
  }
}

// Limpiar filtros de clientes
function clearClientesFilters() {
  console.log('üßπ Limpiando filtros de clientes');
  
  // Limpiar campos de filtro
  const searchInput = document.getElementById('clientesSearch') as HTMLInputElement;
  const saldoFilter = document.getElementById('filterClientesSaldo') as HTMLSelectElement;
  const retornablesFilter = document.getElementById('filterClientesRetornables') as HTMLSelectElement;
  
  if (searchInput) searchInput.value = '';
  if (saldoFilter) saldoFilter.value = 'todos';
  if (retornablesFilter) retornablesFilter.value = 'todos';
  
  // Resetear filtros
  currentClientFilters = { search: '', saldo: 'todos', retornables: 'todos' };
  
  // Recargar clientes sin filtros
loadClientesData();
}

// Funci√≥n para editar cliente inline
function editClienteInline(clientId) {
  console.log('‚úèÔ∏è editClienteInline llamada - redirigiendo a ClientModal.js');
  console.log('üîÑ Cliente ID:', clientId);
  
  // Redirigir al ClientModal.js en lugar de usar el modal duplicado
  if (window.clientModal) {
    console.log('‚úÖ Usando ClientModal.js para edici√≥n');
    
    // Obtener el cliente de la lista actual
    const clients = window.currentClients || currentClients || [];
    const cliente = clients.find(c => c.id == clientId || c.codigo == clientId);
    
    if (!cliente) {
      console.error('‚ùå Cliente no encontrado:', clientId);
      alert('Error: Cliente no encontrado');
      return;
    }
    
    console.log('üë§ Cliente encontrado:', cliente);
    window.clientModal.show(cliente);
  } else {
    console.error('‚ùå ClientModal.js no disponible');
    alert('Error: Modal de clientes no disponible. Por favor recarga la p√°gina.');
  }
  
  return; // Evitar ejecutar el c√≥digo del modal duplicado
}

// Funci√≥n para ver cliente inline
function viewClienteInline(clientId) {
  console.log('üëÅÔ∏è Viendo cliente:', clientId);
  
  // Usar window.currentClients para asegurar acceso global
  const clients = window.currentClients || currentClients || [];
  const cliente = clients.find(c => c.id == clientId || c.codigo == clientId);
  if (!cliente) {
    console.error('‚ùå Cliente no encontrado:', clientId);
    return;
  }
  
  // Mostrar informaci√≥n del cliente en un alert temporal
  const nombre = cliente.nombre || cliente.name || 'Sin nombre';
  const apellido = cliente.apellido || cliente.lastname || '';
  const telefono = cliente.telefono || cliente.phone || 'Sin tel√©fono';
  const direccion = cliente.direccion || cliente.address || 'Sin direcci√≥n';
  const saldo = parseFloat(cliente.saldo || 0);
  const retornables = parseInt(cliente.retornables || 0);
  
  const info = `
Cliente: ${nombre} ${apellido}
Tel√©fono: ${telefono}
Direcci√≥n: ${direccion}
Saldo: $${saldo.toFixed(2)}
Retornables: ${retornables} ${retornables === 1 ? 'unidad' : 'unidades'}
  `.trim();
  
  alert(info);
}

// Funci√≥n para cambiar estado del cliente (bloquear/desbloquear)
async function toggleClienteStatus(clientId) {
  console.log('üîÑ Cambiando estado del cliente:', clientId);
  
  // Usar window.currentClients para asegurar acceso global
  const clients = window.currentClients || currentClients || [];
  const cliente = clients.find(c => c.id == clientId || c.codigo == clientId);
  if (!cliente) {
    console.error('‚ùå Cliente no encontrado:', clientId);
    return;
  }
  
  const isActive = cliente.activo !== 0;
  const action = isActive ? 'bloquear' : 'desbloquear';
  
  if (!confirm(`¬øEst√°s seguro de que quieres ${action} este cliente?`)) {
    return;
  }
  
  try {
    const token = localStorage.getItem('token');
    const newStatus = isActive ? 0 : 1;
    
    const response = await fetch(`https://back-adm.fly.dev/api/clientes/${clientId}/toggle-status`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify({ activo: newStatus })
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Error ${response.status}: ${errorText}`);
    }
    
    const result = await response.json();
    console.log('‚úÖ Estado del cliente cambiado:', result);
    
    // Recargar clientes
    await loadClientesData();
    
    // Mostrar mensaje de √©xito
    if (window.clientModal && window.clientModal.showNotification) {
      window.clientModal.showNotification(`Cliente ${action}do correctamente`, 'success');
    } else {
      console.log(`‚úÖ Cliente ${action}do correctamente`);
    }
    
  } catch (error) {
    console.error('üí• Error cambiando estado del cliente:', error);
    if (window.clientModal && window.clientModal.showNotification) {
      window.clientModal.showNotification(`Error: ${error.message}`, 'error');
    } else {
      alert(`Error: ${error.message}`);
    }
  }
}

// Funci√≥n para inicializar el mapa de Leaflet para clientes
let clientMap = null;
let clientMarker = null;

function initializeClientMap(lat = null, lng = null) {
  console.log('üó∫Ô∏è Inicializando mapa de cliente...');
  
  const mapContainer = document.getElementById('clientMap');
  if (!mapContainer) {
    console.error('‚ùå Contenedor del mapa no encontrado');
    return;
  }
  
  // Limpiar mapa existente
  if (clientMap) {
    clientMap.remove();
    clientMap = null;
    clientMarker = null;
  }
  
  // Coordenadas por defecto (Argentina)
  const defaultLat = -34.6037;
  const defaultLng = -58.3816;
  
  // Usar coordenadas proporcionadas o coordenadas por defecto
  const initialLat = lat ? parseFloat(lat) : defaultLat;
  const initialLng = lng ? parseFloat(lng) : defaultLng;
  
  try {
    // Crear mapa
    clientMap = L.map('clientMap').setView([initialLat, initialLng], 13);
    
    // Agregar capa de OpenStreetMap
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '¬© OpenStreetMap contributors'
    }).addTo(clientMap);
    
    // Si hay coordenadas del cliente, agregar marcador
    if (lat && lng) {
      clientMarker = L.marker([initialLat, initialLng]).addTo(clientMap);
      clientMap.setView([initialLat, initialLng], 15);
    }
    
    // Evento de clic en el mapa para agregar/actualizar marcador
    clientMap.on('click', function(e) {
      const clickedLat = e.latlng.lat;
      const clickedLng = e.latlng.lng;
      
      // Actualizar campos ocultos
      const latitudInput = document.getElementById('clientLatitud');
      const longitudInput = document.getElementById('clientLongitud');
      if (latitudInput) latitudInput.value = clickedLat;
      if (longitudInput) longitudInput.value = clickedLng;
      
      // Actualizar o crear marcador
      if (clientMarker) {
        clientMarker.setLatLng([clickedLat, clickedLng]);
      } else {
        clientMarker = L.marker([clickedLat, clickedLng]).addTo(clientMap);
      }
      
      console.log('üìç Ubicaci√≥n seleccionada:', clickedLat, clickedLng);
    });
    
    // Configurar botones del mapa
    setupMapControls();
    
    console.log('‚úÖ Mapa de cliente inicializado correctamente');
    
  } catch (error) {
    console.error('‚ùå Error inicializando mapa:', error);
  }
}

// Funci√≥n para configurar controles del mapa
function setupMapControls() {
  const getLocationBtn = document.getElementById('getLocationBtn');
  const clearLocationBtn = document.getElementById('clearLocationBtn');
  
  if (getLocationBtn) {
    getLocationBtn.addEventListener('click', function() {
      console.log('üìç Obteniendo ubicaci√≥n actual...');
      
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
          function(position) {
            const lat = position.coords.latitude;
            const lng = position.coords.longitude;
            
            // Actualizar campos ocultos
            const latitudInput = document.getElementById('clientLatitud');
            const longitudInput = document.getElementById('clientLongitud');
            if (latitudInput) latitudInput.value = lat;
            if (longitudInput) longitudInput.value = lng;
            
            // Actualizar mapa
            if (clientMap) {
              clientMap.setView([lat, lng], 15);
              
              if (clientMarker) {
                clientMarker.setLatLng([lat, lng]);
              } else {
                clientMarker = L.marker([lat, lng]).addTo(clientMap);
              }
            }
            
            console.log('‚úÖ Ubicaci√≥n obtenida:', lat, lng);
          },
          function(error) {
            console.error('‚ùå Error obteniendo ubicaci√≥n:', error);
            alert('No se pudo obtener tu ubicaci√≥n. Puedes hacer clic en el mapa para seleccionar una ubicaci√≥n.');
          }
        );
      } else {
        alert('Tu navegador no soporta geolocalizaci√≥n. Puedes hacer clic en el mapa para seleccionar una ubicaci√≥n.');
      }
    });
  }
  
  if (clearLocationBtn) {
    clearLocationBtn.addEventListener('click', function() {
      console.log('üóëÔ∏è Limpiando ubicaci√≥n...');
      
      // Limpiar campos ocultos
      const latitudInput = document.getElementById('clientLatitud');
      const longitudInput = document.getElementById('clientLongitud');
      if (latitudInput) latitudInput.value = '';
      if (longitudInput) longitudInput.value = '';
      
      // Remover marcador
      if (clientMarker) {
        clientMap.removeLayer(clientMarker);
        clientMarker = null;
      }
      
      console.log('‚úÖ Ubicaci√≥n limpiada');
    });
  }
}

// Exponer funciones globalmente para que est√©n disponibles cuando se genere el HTML
window.editClienteInline = editClienteInline;
window.toggleClienteStatus = toggleClienteStatus;
window.viewClienteInline = viewClienteInline;
window.initializeClientMap = initializeClientMap;

// Renderizar lista de clientes con dise√±o moderno
function renderClientesList(clientes) {
  const clientesList = document.getElementById('clientesList');
  if (!clientesList) return;
  
  if (clientes.length === 0) {
    clientesList.innerHTML = `
      <div class="empty-state">
        <div class="empty-icon">üë•</div>
        <h4>No hay clientes registrados</h4>
        <p>Crea tu primer cliente para comenzar</p>
      </div>
    `;
    return;
  }
  
  // Grid de clientes con tarjetas modernas
  clientesList.innerHTML = `
    <div class="clientes-grid">
      ${clientes.map(cliente => {
        // Asegurar que todos los campos tengan valores por defecto
        const id = cliente.id || cliente.codigo || cliente.Code || 'N/A';
        const codigo = cliente.codigo || cliente.Code || cliente.id || 'N/A';
        const nombre = cliente.nombre || cliente.name || cliente.Name || 'Sin nombre';
        const apellido = cliente.apellido || cliente.lastname || cliente.LastName || '';
        const nombreCompleto = cliente.nombreCompleto || `${nombre} ${apellido}`.trim() || 'Cliente sin nombre';
        const telefono = cliente.telefono || cliente.phone || cliente.Phone || 'Sin tel√©fono';
        const direccion = cliente.direccion || cliente.address || cliente.Address || 'Sin direcci√≥n';
        const saldoDinero = parseFloat(cliente.saldo || 0);
        const saldoRetornables = parseInt(cliente.retornables || 0);

        return `
          <div class="cliente-card">
            <div class="cliente-header">
              <h4 class="cliente-title">${nombreCompleto}</h4>
              <div style="display: flex; gap: 0.5rem; align-items: center;">
                <span class="cliente-codigo">#${codigo}</span>
                ${cliente.activo === 0 ? `
                  <span class="cliente-status blocked" title="Cliente bloqueado">
                    üîí Bloqueado
                  </span>
                ` : `
                  <span class="cliente-status active" title="Cliente activo">
                    ‚úÖ Activo
                  </span>
                `}
                ${(cliente.latitud && cliente.longitud) ? `
                  <span class="cliente-gps" title="Cliente con ubicaci√≥n GPS">
                    üìç GPS
                  </span>
                ` : ''}
              </div>
            </div>
            
            <div class="cliente-info">
              <div class="cliente-detail">
                <span class="detail-icon">üìû</span>
                <span>${telefono}</span>
              </div>
              <div class="cliente-detail">
                <span class="detail-icon">üìç</span>
                <span>${direccion}</span>
              </div>
            </div>
            
            <div class="cliente-saldos">
              <div class="saldo-item">
                <span class="saldo-label">Saldo $:</span>
                <span class="saldo-value ${saldoDinero <= 0 ? 'saldo-positivo' : 'saldo-negativo'}">
                  $${saldoDinero.toFixed(2)}
                </span>
              </div>
              <div class="saldo-item">
                <span class="saldo-label">Retornables:</span>
                <span class="saldo-value ${saldoRetornables <= 0 ? 'saldo-positivo' : 'saldo-negativo'}">
                  ${saldoRetornables} ${saldoRetornables === 1 ? 'unidad' : 'unidades'}
                </span>
              </div>
            </div>
            
            <div class="cliente-actions">
              <button onclick="editClienteInline(${id})" class="btn-edit">
                ‚úèÔ∏è Editar
              </button>
              <button onclick="showClientPaymentModal(${id})" class="btn-view" title="Registrar cobro">
                üí≥ Cobrar
              </button>
              <button onclick="toggleClienteStatus(${id})" class="btn-toggle ${cliente.activo === 0 ? 'btn-blocked' : 'btn-active'}">
                ${cliente.activo === 0 ? 'üîì Desbloquear' : 'üîí Bloquear'}
              </button>
            </div>
          </div>
        `;
      }).join('')}
    </div>
  `;
}

// Funci√≥n para configurar event listeners de clientes
function setupClientesEventListeners() {
  console.log('üîß Configurando event listeners de clientes...');
  
  // B√∫squeda con debounce
  const searchInput = document.getElementById('clientesSearch');
  if (searchInput) {
    console.log('‚úÖ Input de b√∫squeda de clientes encontrado');
    let searchTimeout;
    
    searchInput.addEventListener('input', function() {
      console.log('üîç Input de b√∫squeda de clientes detectado:', this.value);
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(() => {
        console.log('üîç Ejecutando b√∫squeda de clientes:', this.value);
        if (window.searchClientes) {
          window.searchClientes(this.value);
        } else {
          console.error('‚ùå window.searchClientes no est√° disponible');
        }
      }, 300);
    });
    console.log('‚úÖ Event listener de b√∫squeda de clientes configurado');
  } else {
    console.log('‚ÑπÔ∏è Input de b√∫squeda de clientes no encontrado (secci√≥n no activa)');
  }

  // Filtro de saldo
  const saldoFilter = document.getElementById('filterClientesSaldo');
  if (saldoFilter) {
    console.log('‚úÖ Selector de saldo encontrado');
    saldoFilter.addEventListener('change', function() {
      console.log('üîç Cambio de saldo detectado:', this.value);
      if (window.filterClientesBySaldo) {
        window.filterClientesBySaldo(this.value);
      } else {
        console.error('‚ùå window.filterClientesBySaldo no est√° disponible');
      }
    });
    console.log('‚úÖ Event listener de filtro de saldo configurado');
  } else {
    console.log('‚ÑπÔ∏è Selector de saldo no encontrado (secci√≥n no activa)');
  }

  // Filtro de retornables
  const retornablesFilter = document.getElementById('filterClientesRetornables');
  if (retornablesFilter) {
    console.log('‚úÖ Selector de retornables encontrado');
    retornablesFilter.addEventListener('change', function() {
      console.log('üîç Cambio de retornables detectado:', this.value);
      if (window.filterClientesByRetornables) {
        window.filterClientesByRetornables(this.value);
      } else {
        console.error('‚ùå window.filterClientesByRetornables no est√° disponible');
      }
    });
    console.log('‚úÖ Event listener de filtro de retornables configurado');
  } else {
    console.log('‚ÑπÔ∏è Selector de retornables no encontrado (secci√≥n no activa)');
  }
}

// Configurar listeners de eventos para actualizaci√≥n reactiva
function setupProductEventListeners() {
  if (window.eventBus && window.EVENTS) {
    // Escuchar cuando se crea un producto
    window.eventBus.on(window.EVENTS.PRODUCTO_CREATED, (data) => {
      console.log('üì¶ Nuevo producto creado, actualizando lista...', data);
      loadProductosData();
    });

    // Escuchar cuando se actualiza un producto
    window.eventBus.on(window.EVENTS.PRODUCTO_UPDATED, (data) => {
      console.log('üì¶ Producto actualizado, actualizando lista...', data);
      
      // Actualizaci√≥n reactiva: actualizar solo el producto espec√≠fico
      const producto = data.producto;
      const productIndex = currentProducts.findIndex(p => (p.codigo || p.id) == data.id);
      
      if (productIndex !== -1) {
        // Actualizar el producto en el array
        currentProducts[productIndex] = { ...currentProducts[productIndex], ...producto };
        // Re-renderizar la lista
        renderProductsList(currentProducts);
      } else {
        // Si no se encuentra, recargar toda la lista
        loadProductosData();
      }
    });

    // Escuchar cuando se elimina un producto
    window.eventBus.on(window.EVENTS.PRODUCTO_DELETED, (data) => {
      console.log('üì¶ Producto eliminado, actualizando lista...', data);
      
      // Actualizaci√≥n reactiva: remover el producto del array
      currentProducts = currentProducts.filter(p => (p.codigo || p.id) != data.id);
      renderProductsList(currentProducts);
    });

    // Escuchar cuando se activa un producto
    window.eventBus.on(window.EVENTS.PRODUCTO_ACTIVATED, (data) => {
      console.log('üì¶ Producto activado, actualizando lista...', data);
      
      // Actualizaci√≥n reactiva: actualizar el estado del producto
      const productIndex = currentProducts.findIndex(p => (p.codigo || p.id) == data.id);
      if (productIndex !== -1) {
        currentProducts[productIndex].activo = 1;
        renderProductsList(currentProducts);
      } else {
        // Si no se encuentra, recargar toda la lista
        loadProductosData();
      }
    });

    console.log('‚úÖ Event listeners de productos configurados');
  }
}

// ========== FUNCIONES PARA CLIENTES ==========

// Buscar clientes
async function searchClients(searchTerm) {
  console.log('üîç Buscando clientes:', searchTerm);
  const token = localStorage.getItem('token');

  try {
    let url = '/api/clientes';
    if (searchTerm && searchTerm.trim()) {
      url += `?search=${encodeURIComponent(searchTerm.trim())}`;
    }

    console.log('üì° URL de b√∫squeda:', url);

    const response = await fetch(url, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Error del servidor:', errorText);
      throw new Error(`Error ${response.status}: ${errorText}`);
    }

    const clientes = await response.json();
    console.log('‚úÖ Clientes encontrados:', clientes.length);

    currentClients = clientes;
    renderClientes(clientes);
  } catch (error) {
    console.error('üí• Error buscando clientes:', error);
    // En caso de error, mostrar todos los clientes
    loadClientesData();
  }
}

// Funci√≥n de debounce para la b√∫squeda de clientes
function debounceSearchClients(searchTerm) {
  // Limpiar el timeout anterior
  if (clientSearchTimeout) {
    clearTimeout(clientSearchTimeout);
  }

  // Establecer un nuevo timeout
  clientSearchTimeout = setTimeout(() => {
    searchClients(searchTerm);
  }, 300); // Esperar 300ms despu√©s de que el usuario deje de escribir
}

// Limpiar b√∫squeda de clientes
function clearClientSearch() {
  const searchInput = document.getElementById('searchClients');
  if (searchInput) {
    searchInput.value = '';
    searchClients(''); // Mostrar todos los clientes
  }
}

// Funci√≥n para editar cliente
function editClient(clientId) {
  console.log('‚úèÔ∏è Editando cliente ID:', clientId);
  console.log('üìã Clientes disponibles:', currentClients.length);
  console.log('üîç editingClientId ANTES de editar:', editingClientId);

  const cliente = currentClients.find(c => {
    const id = c.codigo || c.id;
    console.log('üîç Comparando:', id, 'con', clientId);
    return id == clientId;
  });

  if (!cliente) {
    console.error('‚ùå Cliente no encontrado:', clientId);
    alert('Cliente no encontrado');
    return;
  }

  console.log('‚úÖ Cliente encontrado:', cliente);

  // Usar el modal component
  console.log('üîç Verificando disponibilidad de ClientModal...');
  console.log('üîç window.clientModal:', !!window.clientModal);
  console.log('üîç typeof window.clientModal:', typeof window.clientModal);
  
  if (window.clientModal) {
    console.log('‚úÖ Usando ClientModal.js para edici√≥n');
    console.log('üîß Estableciendo editingClientId en ClientModal...');
    window.clientModal.show(cliente);
  } else {
    console.error('‚ùå ClientModal no est√° disponible, usando modal del index.astro como fallback');
    console.log('üîß Configurando editingClientId para el modal del index.astro...');
    console.log('üîß editingClientId ANTES de asignar:', editingClientId);
    
    // Fallback: usar el modal del index.astro
    editingClientId = clientId;
    console.log('üîß editingClientId DESPU√âS de asignar:', editingClientId);
    
    showEditClientModal(cliente);
  }
  
  console.log('üîç editingClientId FINAL:', editingClientId);
}

// Mostrar ubicaci√≥n del cliente en el mapa
function showClientLocation(clientId) {
  console.log('üìç Mostrando ubicaci√≥n del cliente ID:', clientId);

  const cliente = currentClients.find(c => (c.codigo || c.id) == clientId);

  if (!cliente) {
    console.error('‚ùå Cliente no encontrado:', clientId);
    alert('Cliente no encontrado');
    return;
  }

  if (!cliente.latitud || !cliente.longitud) {
    alert('Este cliente no tiene ubicaci√≥n GPS registrada.');
    return;
  }

  const nombreCompleto = cliente.nombreCompleto || `${cliente.nombre || ''} ${cliente.apellido || ''}`.trim() || 'Cliente sin nombre';

  // Abrir Google Maps con la ubicaci√≥n
  const googleMapsUrl = `https://www.google.com/maps?q=${cliente.latitud},${cliente.longitud}&z=15&t=m`;
  window.open(googleMapsUrl, '_blank');

  // Tambi√©n mostrar informaci√≥n en consola
  console.log(`üìç Ubicaci√≥n de ${nombreCompleto}:`, {
    latitud: cliente.latitud,
    longitud: cliente.longitud,
    direccion: cliente.direccion
  });
}

// Mostrar cuenta corriente del cliente
function showClientAccount(clientId) {
  console.log('üí∞ Mostrando cuenta corriente del cliente ID:', clientId);

  const cliente = currentClients.find(c => (c.codigo || c.id) == clientId);

  if (!cliente) {
    console.error('‚ùå Cliente no encontrado:', clientId);
    alert('Cliente no encontrado');
    return;
  }

  const nombreCompleto = cliente.nombreCompleto || `${cliente.nombre || ''} ${cliente.apellido || ''}`.trim() || 'Cliente sin nombre';
  const saldoDinero = parseFloat(cliente.saldoDinero || 0);
  const saldoRetornables = parseInt(cliente.saldoRetornables || 0);

  // TODO: Implementar modal de cuenta corriente detallada
  alert(`Cuenta Corriente - ${nombreCompleto}\n\nSaldo en dinero: $${saldoDinero.toFixed(2)}\nRetornables pendientes: ${saldoRetornables} unidades\n\n(Funcionalidad detallada en desarrollo...)`);
}

// Eliminar cliente
async function deleteClient(clientId) {
  console.log('üóëÔ∏è Eliminando cliente ID:', clientId);

  const cliente = currentClients.find(c => (c.codigo || c.id) == clientId);
  const nombreCliente = cliente ? (cliente.nombreCompleto || `Cliente #${clientId}`) : `Cliente #${clientId}`;

  if (!confirm(`¬øEst√°s seguro de que quieres eliminar "${nombreCliente}"?\n\nEsta acci√≥n no se puede deshacer.`)) {
    return;
  }

  const token = localStorage.getItem('token');

  try {
    console.log('üì° Enviando petici√≥n DELETE...');
    const response = await fetch(`https://back-adm.fly.dev/api/clientes/${clientId}`, {
      method: 'DELETE',
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Error del servidor:', errorText);
      throw new Error(`Error ${response.status}: ${errorText}`);
    }

    console.log('‚úÖ Cliente eliminado correctamente');

    // Mostrar mensaje de √©xito
    showSuccessMessage('Cliente eliminado correctamente');

    // Recargar la lista
    loadClientesData();

  } catch (error) {
    console.error('üí• Error eliminando cliente:', error);
    showErrorMessage('Error eliminando cliente: ' + error.message);
  }
}

// Mostrar modal para crear cliente
function showCreateClientModal() {
  if (window.clientModal) {
    window.clientModal.show();
  } else {
    console.error('‚ùå ClientModal no est√° disponible');
    alert('Error: Modal no disponible');
  }
}

// Funci√≥n para establecer clientes actuales (usada por renderClientes)
function setCurrentClients(clients) {
  currentClients = clients;
}

// Asegurar que las funciones est√©n disponibles globalmente
window.debounceSearch = debounceSearch;
window.clearSearch = clearSearch;
window.editProduct = editProduct;
window.deleteProduct = deleteProduct;
window.showSuccessMessage = showSuccessMessage;
window.showErrorMessage = showErrorMessage;

// Funciones de pedidos (loadPedidos no existe, usar loadPedidosData)
window.loadPedidos = loadPedidosData;
window.clearPedidosFilters = clearPedidosFilters;
window.viewPedido = viewPedido;
window.editPedido = editPedido;
window.entregarPedido = entregarPedido;
window.cancelPedido = cancelPedido;
window.updatePedidoStatus = updatePedidoStatus;

// Funciones de clientes
window.loadClientes = loadClientesData;
window.clearClientSearch = clearClientSearch;
window.editClient = editClient;
window.showClientLocation = showClientLocation;
window.showClientAccount = showClientAccount;
window.deleteClient = deleteClient;

// Funciones de productos (ya definidas arriba)
window.loadProductosData = loadProductosData;

// ========== FUNCIONES PARA PEDIDOS ==========

// Mostrar modal del mapa de pedidos
function showMapModal() {
  console.log('üó∫Ô∏è Abriendo mapa de pedidos...');

  if (window.mapModal) {
    window.mapModal.show();
  } else {
    console.error('‚ùå MapModal no est√° disponible');
    alert('Error: Modal del mapa no disponible');
  }
}

// Entregar pedido
function entregarPedido(pedidoId) {
  console.log('üöö Iniciando entrega del pedido:', pedidoId);
  console.log('üìã currentPedidos disponible:', !!window.currentPedidos);
  console.log('üìã allPedidos disponible:', !!window.allPedidos);
  console.log('üìã Cantidad currentPedidos:', window.currentPedidos?.length || 0);
  console.log('üìã Cantidad allPedidos:', window.allPedidos?.length || 0);

  if (window.deliveryModal) {
    window.deliveryModal.show(pedidoId);
  } else {
    console.error('‚ùå DeliveryModal no est√° disponible');
    alert('Error: Modal de entrega no disponible');
  }
}

// Funciones de clientes
window.searchClients = searchClients;
window.debounceSearchClients = debounceSearchClients;
window.clearClientSearch = clearClientSearch;
window.editClient = editClient;
window.showClientLocation = showClientLocation;
window.showClientAccount = showClientAccount;
window.deleteClient = deleteClient;
window.showCreateClientModal = showCreateClientModal;
window.setCurrentClients = setCurrentClients;

// Funciones de pagos
window.showClientPayment = showClientPayment;
window.closePaymentModal = closePaymentModal;
window.processClientPayment = processClientPayment;

// Funciones de retornables
window.showReturnablesModal = showReturnablesModal;
window.closeReturnablesModal = closeReturnablesModal;
window.processReturnablesReturn = processReturnablesReturn;

// Funciones de productos
window.debounceSearch = debounceSearch;
window.clearSearch = clearSearch;
window.editProduct = editProduct;
window.deleteProduct = deleteProduct;
window.showSuccessMessage = showSuccessMessage;
window.showErrorMessage = showErrorMessage;

// Funciones de pedidos
window.showMapModal = showMapModal;
window.entregarPedido = entregarPedido;
window.getPedidoItems = getPedidoItems;
window.viewPedido = viewPedido;
window.filterPedidos = filterPedidos;
window.clearPedidosFilters = clearPedidosFilters;
window.cancelPedido = cancelPedido;
window.updatePedidoStatus = updatePedidoStatus;

// Funciones de autenticaci√≥n
window.logout = logout;

// Funci√≥n para debuggear tipos de pago
window.debugTipoPago = async function(tipoPagoId) {
  const token = localStorage.getItem('token');
  try {
    const response = await fetch(`https://back-adm.fly.dev/api/tiposdepago/debug/${tipoPagoId}`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    const data = await response.json();
    console.log('üîç DEBUG TIPO DE PAGO:', data);
    return data;
  } catch (error) {
    console.error('‚ùå Error debuggeando tipo de pago:', error);
  }
};

// Mostrar modal de pago para cliente
async function showClientPayment(clientId) {
  console.log('üí∞ Mostrando modal de pago para cliente ID:', clientId);

  const cliente = currentClients.find(c => (c.codigo || c.id) == clientId);

  if (!cliente) {
    console.error('‚ùå Cliente no encontrado:', clientId);
    alert('Cliente no encontrado');
    return;
  }

  const nombreCompleto = cliente.nombreCompleto || `${cliente.nombre || ''} ${cliente.apellido || ''}`.trim() || 'Cliente sin nombre';
  const saldoActual = parseFloat(cliente.saldo || 0);

  // Cargar tipos de pago que NO aplican saldo (aplicaSaldo = 0)
  let tiposPagoDisponibles = [];
  try {
    const token = localStorage.getItem('token');
    const response = await fetch('https://back-adm.fly.dev/api/tiposdepago', {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    
    if (response.ok) {
      const todosLosTipos = await response.json();
      // Filtrar solo los que NO aplican saldo
      tiposPagoDisponibles = todosLosTipos.filter(tipo => {
        // Convertir aplicaSaldo de Buffer a boolean
        const aplicaSaldo = tipo.aplicaSaldo && typeof tipo.aplicaSaldo === 'object' && tipo.aplicaSaldo.type === 'Buffer' 
          ? tipo.aplicaSaldo.data[0] === 1 
          : tipo.aplicaSaldo === 1 || tipo.aplicaSaldo === true;
        
        return !aplicaSaldo; // Solo los que NO aplican saldo
      });
    }
  } catch (error) {
    console.error('‚ùå Error cargando tipos de pago:', error);
  }

  // Crear opciones de tipos de pago
  const opcionesTipoPago = tiposPagoDisponibles.map(tipo => 
    `<option value="${tipo.id}">${tipo.pago}</option>`
  ).join('');

  const modalContent = `
    <div id="paymentModal" class="modal-overlay" style="display: flex;">
      <div class="modal-content" style="max-width: 500px;">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5rem;">
          <h4 class="modal-title">üí∞ Ingresar Pago</h4>
          <button onclick="closePaymentModal()" style="background: none; border: none; font-size: 1.5rem; cursor: pointer; color: #6b7280;">
            √ó
          </button>
        </div>
        
        <div style="margin-bottom: 1.5rem; padding: 1rem; background: #f0f9ff; border: 1px solid #0ea5e9; border-radius: 0.375rem;">
          <div style="margin-bottom: 0.5rem;">
            <strong>üë§ Cliente:</strong> ${nombreCompleto}
          </div>
          <div style="margin-bottom: 0.5rem;">
            <strong>üí∞ Saldo Actual:</strong> $${saldoActual.toFixed(2)}
          </div>
          <div style="font-size: 0.875rem; color: #6b7280;">
            ${saldoActual > 0 ? 'El cliente tiene deuda pendiente' : saldoActual < 0 ? 'El cliente tiene cr√©dito disponible' : 'El cliente no tiene saldo pendiente'}
          </div>
        </div>

        <form id="paymentForm" onsubmit="processClientPayment(event, ${clientId})">
          <div class="form-group">
            <label class="form-label">Tipo de Pago *</label>
            <select id="paymentTipoPago" name="tipoPago" required class="form-input">
              <option value="">Seleccionar tipo de pago...</option>
              ${opcionesTipoPago}
            </select>
            <small style="color: #6b7280; font-size: 0.875rem;">
              Solo se muestran m√©todos de pago que no aplican saldo
            </small>
          </div>

          <div class="form-group">
            <label class="form-label">Monto a Pagar *</label>
            <div style="position: relative;">
              <span style="position: absolute; left: 0.75rem; top: 50%; transform: translateY(-50%); color: #6b7280;">$</span>
              <input type="number" id="paymentMonto" name="monto" step="0.01" min="0.01" required 
                     class="form-input" style="padding-left: 2rem;" placeholder="0.00" />
            </div>
            <small style="color: #6b7280; font-size: 0.875rem;">
              Este monto se restar√° del saldo del cliente
            </small>
          </div>

          <div class="form-group">
            <label class="form-label">Observaciones</label>
            <textarea id="paymentObservaciones" name="observaciones" class="form-input" rows="2"
                      placeholder="Observaciones opcionales sobre el pago"></textarea>
          </div>

          <div class="modal-buttons">
            <button type="button" onclick="closePaymentModal()" class="btn-secondary">
              Cancelar
            </button>
            <button type="submit" class="btn-primary" style="width: auto; padding: 0.5rem 1rem;">
              üí∞ Confirmar Pago
            </button>
          </div>
        </form>
      </div>
    </div>
  `;

  // Agregar el modal al body
  document.body.insertAdjacentHTML('beforeend', modalContent);
}

// Cerrar modal de pago
function closePaymentModal() {
  const modal = document.getElementById('paymentModal');
  if (modal) {
    modal.remove();
  }
}

// Procesar el pago del cliente
async function processClientPayment(event, clientId) {
  event.preventDefault();
  
  const form = event.target;
  const formData = new FormData(form);
  
  const tipoPago = formData.get('tipoPago');
  const monto = parseFloat(formData.get('monto'));
  const observaciones = formData.get('observaciones');

  if (!tipoPago || !monto || monto <= 0) {
    alert('Por favor complete todos los campos correctamente');
    return;
  }

  try {
    const token = localStorage.getItem('token');
    const response = await fetch('https://back-adm.fly.dev/api/pagos/cliente', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        clienteId: clientId,
        tipoPagoId: tipoPago,
        monto: monto,
        observaciones: observaciones || null
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Error ${response.status}: ${errorText}`);
    }

    const resultado = await response.json();
    console.log('‚úÖ Pago procesado:', resultado);

    // Cerrar modal
    closePaymentModal();

    // Mostrar mensaje de √©xito
    alert(`‚úÖ Pago registrado exitosamente\n\nCliente: ${resultado.clienteNombre}\nMonto: $${monto.toFixed(2)}\nNuevo saldo: $${resultado.nuevoSaldo.toFixed(2)}`);

    // Recargar la lista de clientes para mostrar el saldo actualizado
    await loadClientes();

  } catch (error) {
    console.error('‚ùå Error procesando pago:', error);
    alert(`Error procesando pago: ${error.message}`);
  }
}

// Funci√≥n ya integrada en el listener principal de DOMContentLoaded

// Mostrar modal de devoluci√≥n de retornables
async function showReturnablesModal(clientId) {
  console.log('üîÑ Mostrando modal de devoluci√≥n de retornables para cliente ID:', clientId);

  const cliente = currentClients.find(c => (c.codigo || c.id) == clientId);

  if (!cliente) {
    console.error('‚ùå Cliente no encontrado:', clientId);
    alert('Cliente no encontrado');
    return;
  }

  const nombreCompleto = cliente.nombreCompleto || `${cliente.nombre || ''} ${cliente.apellido || ''}`.trim() || 'Cliente sin nombre';
  const retornablesActuales = parseInt(cliente.retornables || 0);

  // Cargar productos retornables
  let productosRetornables = [];
  try {
    const token = localStorage.getItem('token');
    const response = await fetch('https://back-adm.fly.dev/api/productos', {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    
    if (response.ok) {
      const todosLosProductos = await response.json();
      // Filtrar solo productos retornables
      productosRetornables = todosLosProductos.filter(producto => {
        const esRetornable = producto.esRetornable === 1 || producto.esRetornable === true;
        return esRetornable;
      });
    }
  } catch (error) {
    console.error('‚ùå Error cargando productos retornables:', error);
  }

  // Crear opciones de productos retornables
  const opcionesProductos = productosRetornables.map(producto => 
    `<option value="${producto.id}">${producto.descripcion}</option>`
  ).join('');

  const modalContent = `
    <div id="returnablesModal" class="modal-overlay" style="display: flex;">
      <div class="modal-content" style="max-width: 600px;">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5rem;">
          <h4 class="modal-title">üîÑ Devolver Retornables</h4>
          <button onclick="closeReturnablesModal()" style="background: none; border: none; font-size: 1.5rem; cursor: pointer; color: #6b7280;">
            √ó
          </button>
        </div>
        
        <div style="margin-bottom: 1.5rem; padding: 1rem; background: #f0fdf4; border: 1px solid #22c55e; border-radius: 0.375rem;">
          <div style="margin-bottom: 0.5rem;">
            <strong>üë§ Cliente:</strong> ${nombreCompleto}
          </div>
          <div style="margin-bottom: 0.5rem;">
            <strong>üîÑ Retornables Actuales:</strong> ${retornablesActuales} unidades
          </div>
          <div style="font-size: 0.875rem; color: #6b7280;">
            ${retornablesActuales > 0 ? 'El cliente tiene retornables para devolver' : 'El cliente no tiene retornables pendientes'}
          </div>
        </div>

        <form id="returnablesForm" onsubmit="processReturnablesReturn(event, ${clientId})">
          <div class="form-group">
            <label class="form-label">Producto Retornable *</label>
            <select id="returnablesProducto" name="productoId" required class="form-input">
              <option value="">Seleccionar producto...</option>
              ${opcionesProductos}
            </select>
            <small style="color: #6b7280; font-size: 0.875rem;">
              Solo se muestran productos marcados como retornables
            </small>
          </div>

          <div class="form-group">
            <label class="form-label">Cantidad a Devolver *</label>
            <input type="number" id="returnablesCantidad" name="cantidad" min="1" max="${retornablesActuales}" required 
                   class="form-input" placeholder="0" />
            <small style="color: #6b7280; font-size: 0.875rem;">
              M√°ximo: ${retornablesActuales} unidades (retornables actuales del cliente)
            </small>
          </div>

          <div class="form-group">
            <label class="form-label">Observaciones</label>
            <textarea id="returnablesObservaciones" name="observaciones" class="form-input" rows="2"
                      placeholder="Observaciones opcionales sobre la devoluci√≥n"></textarea>
          </div>

          <div class="modal-buttons">
            <button type="button" onclick="closeReturnablesModal()" class="btn-secondary">
              Cancelar
            </button>
            <button type="submit" class="btn-primary" style="width: auto; padding: 0.5rem 1rem; background: #10b981;">
              üîÑ Confirmar Devoluci√≥n
            </button>
          </div>
        </form>
      </div>
    </div>
  `;

  // Agregar el modal al body
  document.body.insertAdjacentHTML('beforeend', modalContent);
}

// Cerrar modal de retornables
function closeReturnablesModal() {
  const modal = document.getElementById('returnablesModal');
  if (modal) {
    modal.remove();
  }
}

// Procesar la devoluci√≥n de retornables
async function processReturnablesReturn(event, clientId) {
  event.preventDefault();
  
  const form = event.target;
  const formData = new FormData(form);
  
  const productoId = formData.get('productoId');
  const cantidad = parseInt(formData.get('cantidad'));
  const observaciones = formData.get('observaciones');

  if (!productoId || !cantidad || cantidad <= 0) {
    alert('Por favor complete todos los campos correctamente');
    return;
  }

  try {
    const token = localStorage.getItem('token');
    const response = await fetch('https://back-adm.fly.dev/api/clientes/retornables/devolver', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        clienteId: clientId,
        productoId: productoId,
        cantidad: cantidad,
        observaciones: observaciones || null
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Error ${response.status}: ${errorText}`);
    }

    const resultado = await response.json();
    console.log('‚úÖ Devoluci√≥n procesada:', resultado);

    // Cerrar modal
    closeReturnablesModal();

    // Mostrar mensaje de √©xito
    alert(`‚úÖ Devoluci√≥n registrada exitosamente\n\nCliente: ${resultado.clienteNombre}\nProducto: ${resultado.productoNombre}\nCantidad: ${cantidad} unidades\nNuevos retornables: ${resultado.nuevosRetornables} unidades`);

    // Recargar la lista de clientes para mostrar los retornables actualizados
    await loadClientes();

  } catch (error) {
    console.error('‚ùå Error procesando devoluci√≥n:', error);
    alert(`Error procesando devoluci√≥n: ${error.message}`);
  }
}
</script>

<!-- Sistema de eventos global -->
<script src="/js/utils/events.js" is:inline></script>

<!-- Cargar los componentes modales -->
<!-- ProductModal.js no es necesario, funcionalidad incluida en otros modales -->
<script src="/js/ClientModal.js" is:inline></script>
<script src="/js/OrderModal.js" is:inline></script>
<script src="/js/MapModal.js" is:inline></script>
<script src="/js/DeliveryModal.js" is:inline></script>

<!-- Configurar event listeners despu√©s de cargar todo -->
<script is:inline>
// Variables para el modal de clientes
let editingClientId = null;

// Funci√≥n para manejar el env√≠o del formulario de cliente
async function handleClientSubmit(e) {
  e.preventDefault();
  console.log('üìù Enviando formulario de cliente...');
  console.log('üîç Formulario que se env√≠a:', e.target.id);
  console.log('üîç Handler: index.astro handleClientSubmit');
  
  // Verificar que este handler solo se ejecute para el formulario correcto
  if (e.target.id !== 'indexClientForm') {
    console.log('‚ùå Este handler no debe ejecutarse para el formulario:', e.target.id);
    console.log('‚ùå Deteniendo ejecuci√≥n del handler del index.astro');
    return;
  }
  
  // Debug de editingClientId
  console.log('üîç editingClientId:', editingClientId);
  console.log('üîç ¬øEs edici√≥n?', !!editingClientId);
  
  const formData = new FormData(e.target);
  const clientData = {
    nombre: formData.get('nombre') || '',
    apellido: formData.get('apellido') || '',
    telefono: formData.get('telefono') || '',
    direccion: formData.get('direccion') || '',
    saldo: parseFloat(formData.get('saldo') || 0),
    retornables: parseInt(formData.get('retornables') || 0),
    latitud: formData.get('latitud') || null,
    longitud: formData.get('longitud') || null
  };
  
  console.log('üìã Datos del cliente:', clientData);
  
  try {
    const token = localStorage.getItem('token');
    const url = editingClientId ? `/api/clientes/${editingClientId}` : '/api/clientes';
    const method = editingClientId ? 'PUT' : 'POST';
    
    console.log('üåê URL:', url);
    console.log('üîß M√©todo:', method);
    
    const response = await fetch(url, {
      method: method,
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify(clientData)
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Error ${response.status}: ${errorText}`);
    }
    
    const result = await response.json();
    console.log('‚úÖ Cliente guardado:', result);
    
    // Cerrar modal
    closeClientModal();
    
    // Recargar clientes
    if (typeof loadClientesData === 'function') {
      await loadClientesData();
    } else if (typeof loadClientes === 'function') {
      await loadClientes();
    } else if (window.loadClientesData) {
      await window.loadClientesData();
    } else {
      console.log('‚ö†Ô∏è Funci√≥n de recarga de clientes no encontrada');
    }
    
    // Mostrar mensaje de √©xito usando el sistema de notificaciones del ClientModal
    if (window.clientModal && window.clientModal.showNotification) {
      window.clientModal.showNotification(
        editingClientId ? 'Cliente actualizado correctamente' : 'Cliente creado correctamente', 
        'success'
      );
    } else {
      console.log('‚úÖ', editingClientId ? 'Cliente actualizado correctamente' : 'Cliente creado correctamente');
    }
    
  } catch (error) {
    console.error('üí• Error guardando cliente:', error);
    
    // Mostrar mensaje de error usando el sistema de notificaciones del ClientModal
    if (window.clientModal && window.clientModal.showNotification) {
      window.clientModal.showNotification(`Error: ${error.message}`, 'error');
    } else {
      console.error('‚ùå Error:', error.message);
      alert(`Error: ${error.message}`);
    }
  }
}

// Funci√≥n para mostrar el modal de crear cliente
function showCreateClientModal() {
  console.log('‚ûï showCreateClientModal (duplicada) - redirigiendo a ClientModal.js');
  
  // Redirigir al ClientModal.js en lugar de usar el modal duplicado
  if (window.clientModal) {
    console.log('‚úÖ Usando ClientModal.js para creaci√≥n');
    window.clientModal.show();
  } else {
    console.error('‚ùå ClientModal.js no disponible');
    alert('Error: Modal de clientes no disponible. Por favor recarga la p√°gina.');
  }
  
  return; // Evitar ejecutar el c√≥digo del modal duplicado
  
  const modal = document.getElementById('indexClientModal');
  const modalTitle = document.getElementById('modalTitle');
  const form = document.getElementById('indexClientForm');
  
  if (modal && modalTitle && form) {
    modalTitle.textContent = 'Nuevo Cliente';
    form.reset();
    
    // Limpiar campos espec√≠ficos
    const saldoInput = document.getElementById('clientSaldo');
    const retornablesInput = document.getElementById('clientRetornables');
    if (saldoInput) saldoInput.value = '0';
    if (retornablesInput) retornablesInput.value = '0';
    
    // Limpiar coordenadas GPS
    const latitudInput = document.getElementById('clientLatitud');
    const longitudInput = document.getElementById('clientLongitud');
    if (latitudInput) latitudInput.value = '';
    if (longitudInput) longitudInput.value = '';
    
    modal.classList.add('show');
    
    // Inicializar mapa despu√©s de que el modal est√© visible
    setTimeout(() => {
      initializeClientMap();
    }, 100);
  }
}

// Funci√≥n para mostrar el modal de editar cliente
function showEditClientModal(cliente) {
  console.log('‚úèÔ∏è Abriendo modal para editar cliente:', cliente);
  
  const modal = document.getElementById('indexClientModal');
  const modalTitle = document.getElementById('modalTitle');
  const form = document.getElementById('indexClientForm');
  
  if (modal && modalTitle && form) {
    modalTitle.textContent = 'Editar Cliente';
    
    // Llenar formulario con datos del cliente
    const nameInput = document.getElementById('clientName');
    const apellidoInput = document.getElementById('clientApellido');
    const telefonoInput = document.getElementById('clientTelefono');
    const direccionInput = document.getElementById('clientDireccion');
    const saldoInput = document.getElementById('clientSaldo');
    const retornablesInput = document.getElementById('clientRetornables');
    
    if (nameInput) nameInput.value = cliente.nombre || cliente.name || '';
    if (apellidoInput) apellidoInput.value = cliente.apellido || cliente.lastname || '';
    if (telefonoInput) telefonoInput.value = cliente.telefono || cliente.phone || '';
    if (direccionInput) direccionInput.value = cliente.direccion || cliente.address || '';
    if (saldoInput) saldoInput.value = cliente.saldo || 0;
    if (retornablesInput) retornablesInput.value = cliente.retornables || 0;
    
    // Llenar coordenadas GPS si existen
    const latitudInput = document.getElementById('clientLatitud');
    const longitudInput = document.getElementById('clientLongitud');
    if (latitudInput) latitudInput.value = cliente.latitud || '';
    if (longitudInput) longitudInput.value = cliente.longitud || '';
    
    modal.classList.add('show');
    
    // Inicializar mapa despu√©s de que el modal est√© visible
    setTimeout(() => {
      initializeClientMap(cliente.latitud, cliente.longitud);
    }, 100);
  } else {
    console.error('‚ùå Elementos del modal no encontrados');
  }
}

// Funci√≥n para cerrar el modal de cliente
function closeClientModal() {
  console.log('‚ùå Cerrando modal de cliente...');
  const modal = document.getElementById('indexClientModal');
  if (modal) {
    modal.classList.remove('show');
  }
  editingClientId = null;
}

// Funci√≥n para configurar event listeners del modal
function setupClientEventListeners() {
  console.log('üîß Configurando event listeners del modal de clientes...');
  
  // Cerrar modal al hacer clic fuera
  const modal = document.getElementById('indexClientModal');
  if (modal) {
    modal.addEventListener('click', function(e) {
      if (e.target === modal) {
        closeClientModal();
      }
    });
  }
  
  // Cerrar modal con Escape
  document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape') {
      const modal = document.getElementById('indexClientModal');
      if (modal && modal.classList.contains('show')) {
        closeClientModal();
      }
    }
  });
}

// Hacer las funciones y variables disponibles globalmente
window.handleClientSubmit = handleClientSubmit;
window.showCreateClientModal = showCreateClientModal;
window.showEditClientModal = showEditClientModal;
window.closeClientModal = closeClientModal;
window.setupClientEventListeners = setupClientEventListeners;
window.loadClientesData = loadClientesData;
window.currentClients = currentClients;
// Configurar listeners de eventos para actualizaci√≥n reactiva
function setupEventListeners() {
  if (window.eventBus && window.EVENTS) {
    // Escuchar cuando se crea un nuevo pedido
    window.eventBus.on(window.EVENTS.PEDIDO_CREATED, async (data) => {
      console.log('üì¶ Nuevo pedido creado en index.astro, actualizando lista...', data);

      // Solo actualizar si estamos en la vista de pedidos
      if (window.currentRoute === 'pedidos') {
        try {
          await loadPedidosData();
          console.log('‚úÖ Lista de pedidos actualizada reactivamente');
        } catch (error) {
          console.error('‚ùå Error actualizando pedidos:', error);
        }
      }
    });

    // Escuchar cuando se actualiza un pedido
    window.eventBus.on(window.EVENTS.PEDIDO_UPDATED, async (data) => {
      console.log('üì¶ Pedido actualizado en index.astro, actualizando lista...', data);

      // Solo actualizar si estamos en la vista de pedidos
      if (window.currentRoute === 'pedidos') {
        try {
          await loadPedidosData();
          console.log('‚úÖ Lista de pedidos actualizada reactivamente');
        } catch (error) {
          console.error('‚ùå Error actualizando pedidos:', error);
        }
      }
    });

    console.log('üì° Event listeners configurados para index.astro');
    return true; // Indicar que se configur√≥ exitosamente
  } else {
    return false; // Indicar que no se pudo configurar
  }
}

// Funci√≥n de desarrollo para saltarse la verificaci√≥n del servidor
window.enableDevMode = function() {
  localStorage.setItem('skipServerCheck', 'true');
  console.log('üîß Modo desarrollo activado. Recarga la p√°gina para aplicar.');
  console.log('Para desactivar: localStorage.removeItem("skipServerCheck")');
};

window.disableDevMode = function() {
  localStorage.removeItem('skipServerCheck');
  console.log('üîß Modo desarrollo desactivado. Recarga la p√°gina para aplicar.');
};

// Funci√≥n de diagn√≥stico
window.diagnosticar = function() {
  console.log('üîç DIAGN√ìSTICO DE LA APLICACI√ìN');
  console.log('================================');
  console.log('‚úÖ Sistema de eventos:', window.eventBus ? 'OK' : '‚ùå NO DISPONIBLE');
  console.log('‚úÖ Eventos definidos:', window.EVENTS ? 'OK' : '‚ùå NO DISPONIBLE');
  console.log('‚úÖ Usuario actual:', currentUser ? 'OK' : '‚ùå NO DEFINIDO');
  console.log('‚úÖ Token:', localStorage.getItem('token') ? 'OK' : '‚ùå NO ENCONTRADO');
  console.log('‚úÖ Ruta actual:', currentRoute || '‚ùå NO DEFINIDA');
  console.log('‚úÖ Modo desarrollo:', localStorage.getItem('skipServerCheck') === 'true' ? 'ACTIVADO' : 'DESACTIVADO');
  console.log('================================');
  
  // Verificar funciones cr√≠ticas
  const funciones = [
    'checkAuth', 'showMainApp', 'loadRoute', 
    'editProductInline', 'deleteProductInline', 'showCreateProductModal',
    'editClient', 'deleteClient', 'showCreateClientModal',
    'viewPedido', 'editPedido', 'entregarPedido'
  ];
  funciones.forEach(func => {
    console.log(`‚úÖ ${func}:`, typeof window[func] === 'function' ? 'OK' : '‚ùå NO DEFINIDA');
  });
};

// Funci√≥n para debuggear tipos de pago
window.debugTipoPago = async function(tipoPagoId) {
  const token = localStorage.getItem('token');
  try {
    const response = await fetch(`https://back-adm.fly.dev/api/tiposdepago/debug/${tipoPagoId}`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    const data = await response.json();
    console.log('üîç DEBUG TIPO DE PAGO:', data);
    return data;
  } catch (error) {
    console.error('‚ùå Error debuggeando tipo de pago:', error);
  }
};

// Funciones de pagos
window.showClientPayment = showClientPayment;
window.closePaymentModal = closePaymentModal;
window.processClientPayment = processClientPayment;



// Funci√≥n ya integrada en el listener principal de DOMContentLoaded
</script>

<style>
/* Estilos espec√≠ficos para Informes */
.informes-container {
  padding: 0;
}

.filters-card {
  background: white;
  border-radius: 12px;
  padding: 1.5rem;
  margin-bottom: 2rem;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  border: 1px solid #e5e7eb;
}

.filters-row {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 1rem;
  align-items: end;
}

.filter-group {
  display: flex;
  flex-direction: column;
}

.filter-group label {
  font-weight: 500;
  color: #374151;
  margin-bottom: 0.5rem;
  font-size: 0.875rem;
}

.filter-input, .filter-select {
  padding: 0.75rem;
  border: 2px solid #e5e7eb;
  border-radius: 8px;
  font-size: 0.875rem;
  transition: border-color 0.2s ease;
}

.filter-input:focus, .filter-select:focus {
  outline: none;
  border-color: #3b82f6;
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

.informe-resultados {
  background: white;
  border-radius: 12px;
  padding: 2rem;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  border: 1px solid #e5e7eb;
  min-height: 200px;
}

.empty-state, .loading-state, .error-state {
  text-align: center;
  padding: 3rem 1rem;
  color: #6b7280;
}

.empty-icon, .error-icon {
  font-size: 3rem;
  margin-bottom: 1rem;
}

.loading-state .spinner {
  width: 40px;
  height: 40px;
  border: 4px solid #f3f4f6;
  border-top: 4px solid #3b82f6;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin: 0 auto 1rem;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.informe-card {
  padding: 0;
}

.informe-card h4 {
  color: #1f2937;
  font-size: 1.25rem;
  font-weight: 600;
  margin-bottom: 1.5rem;
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

/* Estilos para el informe detallado por cliente */
.cliente-card {
  background: white;
  border: 1px solid #e5e7eb;
  border-radius: 12px;
  padding: 1.5rem;
  margin-bottom: 1.5rem;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
}

.cliente-header {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 1.5rem;
  padding-bottom: 1rem;
  border-bottom: 1px solid #f3f4f6;
}

.cliente-info h5 {
  font-size: 1.125rem;
  font-weight: 600;
  color: #1f2937;
  margin: 0 0 0.5rem 0;
}

.cliente-telefono {
  color: #6b7280;
  font-size: 0.875rem;
  margin: 0;
}

.cliente-stats {
  display: flex;
  gap: 1rem;
}

.stat-mini {
  text-align: center;
  padding: 0.5rem;
  background: #f9fafb;
  border-radius: 8px;
  min-width: 80px;
}

.stat-mini .stat-value {
  display: block;
  font-weight: 600;
  color: #1f2937;
  font-size: 0.875rem;
}

.stat-mini .stat-label {
  display: block;
  font-size: 0.75rem;
  color: #6b7280;
  margin-top: 0.25rem;
}

.productos-cliente, .pedidos-cliente {
  margin-top: 1rem;
}

.productos-cliente h6, .pedidos-cliente h6 {
  font-size: 1rem;
  font-weight: 600;
  color: #374151;
  margin: 0 0 1rem 0;
}

.mini-table {
  width: 100%;
  border-collapse: collapse;
  font-size: 0.875rem;
  margin-bottom: 1rem;
}

.mini-table th {
  background: #f9fafb;
  padding: 0.75rem;
  text-align: left;
  font-weight: 600;
  color: #374151;
  border-bottom: 1px solid #e5e7eb;
}

.mini-table td {
  padding: 0.75rem;
  border-bottom: 1px solid #f3f4f6;
}

.mini-table tr:hover {
  background: #f9fafb;
}

.pedidos-list {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.pedido-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0.75rem;
  background: #f9fafb;
  border-radius: 8px;
  font-size: 0.875rem;
}

.pedido-fecha {
  color: #6b7280;
}

.pedido-total {
  font-weight: 600;
  color: #059669;
}

.pedido-items {
  color: #6b7280;
}

.pedido-codigo {
  font-family: monospace;
  color: #6b7280;
  font-size: 0.75rem;
}

.empty-state-mini {
  text-align: center;
  padding: 1rem;
  color: #6b7280;
  font-size: 0.875rem;
  background: #f9fafb;
  border-radius: 8px;
}

.resumen-stats {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 1.5rem;
  margin-bottom: 2rem;
}

.stat-item {
  background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
  padding: 1.5rem;
  border-radius: 12px;
  text-align: center;
  border: 1px solid #e2e8f0;
}

.stat-value {
  font-size: 1.875rem;
  font-weight: 700;
  color: #1e293b;
  margin-bottom: 0.5rem;
}

.stat-label {
  font-size: 0.875rem;
  color: #64748b;
  font-weight: 500;
}

.productos-vendidos {
  margin-top: 2rem;
}

.productos-vendidos h5 {
  color: #374151;
  font-size: 1.125rem;
  font-weight: 600;
  margin-bottom: 1rem;
}

.productos-list {
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
}

.producto-item {
  display: grid;
  grid-template-columns: 1fr auto auto;
  gap: 1rem;
  align-items: center;
  padding: 1rem;
  background: #f8fafc;
  border-radius: 8px;
  border: 1px solid #e2e8f0;
}

.producto-nombre {
  font-weight: 500;
  color: #374151;
}

.producto-cantidad {
  font-size: 0.875rem;
  color: #6b7280;
}

.producto-total {
  font-weight: 600;
  color: #059669;
}

.table-container {
  overflow-x: auto;
  margin-top: 1rem;
}

.informe-table {
  width: 100%;
  border-collapse: collapse;
  font-size: 0.875rem;
}

.informe-table th {
  background: #f8fafc;
  color: #374151;
  font-weight: 600;
  padding: 1rem;
  text-align: left;
  border-bottom: 2px solid #e5e7eb;
  white-space: nowrap;
}

.informe-table td {
  padding: 1rem;
  border-bottom: 1px solid #e5e7eb;
  vertical-align: top;
}

.informe-table tr:hover {
  background: #f9fafb;
}

.cliente-info strong {
  display: block;
  color: #374151;
  margin-bottom: 0.25rem;
}

.cliente-info small {
  color: #6b7280;
  font-size: 0.75rem;
}

/* Responsive */
@media (max-width: 768px) {
  .filters-row {
    grid-template-columns: 1fr;
  }
  
  .resumen-stats {
    grid-template-columns: repeat(2, 1fr);
  }
  
  .producto-item {
    grid-template-columns: 1fr;
    gap: 0.5rem;
    text-align: center;
  }
  
  .informe-table {
    font-size: 0.75rem;
  }
  
  .informe-table th,
  .informe-table td {
    padding: 0.5rem;
  }
}

/* Campo de b√∫squeda en acciones r√°pidas */
.search-group {
  margin-bottom: 1rem;
}

.search-input-wrapper {
  position: relative;
  display: flex;
  align-items: center;
}

.search-icon {
  position: absolute;
  left: 0.75rem;
  color: #6b7280;
  font-size: 1rem;
  z-index: 1;
}

.search-input {
  width: 100%;
  padding: 0.75rem 0.75rem 0.75rem 2.5rem;
  border: 1px solid rgba(255, 255, 255, 0.2);
  border-radius: 0.5rem;
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(10px);
  color: #111827;
  font-size: 0.875rem;
  transition: all 0.2s ease;
}

.search-input::placeholder {
  color: #6b7280;
}

.search-input:focus {
  outline: none;
  border-color: rgba(59, 130, 246, 0.5);
  background: rgba(255, 255, 255, 0.15);
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

.action-buttons {
  display: flex;
  gap: 0.75rem;
  flex-wrap: wrap;
}

/* Bot√≥n para mostrar/ocultar filtros avanzados */
.filters-toggle {
  margin-bottom: 1rem;
  text-align: center;
}

.btn-toggle-filters {
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(10px);
  color: #111827;
  border: 1px solid rgba(255, 255, 255, 0.2);
  padding: 0.5rem 1rem;
  border-radius: 0.375rem;
  font-weight: 500;
  font-size: 0.875rem;
  cursor: pointer;
  transition: all 0.2s ease;
}

.btn-toggle-filters:hover {
  background: rgba(255, 255, 255, 0.15);
  transform: translateY(-1px);
}

.btn-toggle-filters.active {
  background: rgba(59, 130, 246, 0.1);
  border-color: rgba(59, 130, 246, 0.3);
  color: #1e40af;
}

/* Panel de filtros con animaci√≥n */
.filters-panel {
  transition: max-height 0.3s ease, opacity 0.3s ease;
  overflow: hidden;
  max-height: 1000px;
  opacity: 1;
}

.filters-panel[style*="display: none"] {
  max-height: 0px;
  opacity: 0;
}

/* Estilos por defecto para tarjetas de pedidos */
.pedido-desktop {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  gap: 1rem;
}

.pedido-mobile {
  display: none;
}

@media (max-width: 480px) {
  .resumen-stats {
    grid-template-columns: 1fr;
  }
  
  /* Dise√±o m√≥vil para tarjetas de pedidos */
  .pedido-desktop {
    display: none !important;
  }
  
  .pedido-mobile {
    display: block !important;
  }
  
  .btn-mobile {
    flex: 1;
    padding: 0.75rem 0.5rem;
    border: none;
    border-radius: 0.5rem;
    background: #f3f4f6;
    color: #111827;
    font-size: 1.2rem;
    cursor: pointer;
    transition: all 0.2s;
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: 44px;
  }
  
  .btn-mobile:hover {
    background: #e5e7eb;
    transform: translateY(-1px);
  }
  
  .btn-mobile:active {
    transform: translateY(0);
  }
}
</style>
