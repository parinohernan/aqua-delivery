---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Aqua Delivery Manager">
  <!-- Pantalla de carga -->
  <div id="loading" class="loading-screen">
    <div class="spinner"></div>
    <p>Cargando aplicaci√≥n...</p>
  </div>

  <!-- Aplicaci√≥n principal -->
  <div id="mainApp" class="hidden">
    <div class="app-container">
      <!-- Header con gradiente -->
      <header class="header">
        <div class="header-content">
          <div class="header-left">
            <div class="app-icon">üíß</div>
            <h1 class="app-title">Aqua Delivery Manager</h1>
          </div>
          <div class="header-right">
            <span id="userInfo" class="user-info"></span>
            <button onclick="logout()" class="logout-button">
              <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                <path d="M10 12.5a.5.5 0 0 1-.5.5h-8a.5.5 0 0 1-.5-.5v-9a.5.5 0 0 1 .5-.5h8a.5.5 0 0 1 .5.5v2a.5.5 0 0 0 1 0v-2A1.5 1.5 0 0 0 9.5 2h-8A1.5 1.5 0 0 0 0 3.5v9A1.5 1.5 0 0 0 1.5 14h8a1.5 1.5 0 0 0 1.5-1.5v-2a.5.5 0 0 0-1 0v2z"/>
                <path d="M15.854 8.354a.5.5 0 0 0 0-.708l-3-3a.5.5 0 0 0-.708.708L14.293 7.5H5.5a.5.5 0 0 0 0 1h8.793l-2.147 2.146a.5.5 0 0 0 .708.708l3-3z"/>
              </svg>
              Salir
            </button>
          </div>
        </div>
      </header>

      <!-- Navegaci√≥n Desktop -->
      <nav class="nav-buttons">
        <button data-route="pedidos" class="nav-button active">
          <div class="nav-icon">üì¶</div>
          <span>Pedidos</span>
        </button>
        <button data-route="clientes" class="nav-button">
          <div class="nav-icon">üë•</div>
          <span>Clientes</span>
        </button>
        <button data-route="productos" class="nav-button">
          <div class="nav-icon">üõçÔ∏è</div>
          <span>Productos</span>
        </button>
        <button data-route="informes" class="nav-button">
          <div class="nav-icon">üìä</div>
          <span>Informes</span>
        </button>
      </nav>

      <!-- Contenido principal -->
      <main class="main-content">
        <div id="contentArea" class="content-card">
          <!-- El contenido se cargar√° aqu√≠ din√°micamente -->
        </div>
      </main>

      <!-- Navegaci√≥n M√≥vil -->
      <nav class="mobile-nav">
        <button data-route="pedidos" class="mobile-nav-button active">
          <div class="mobile-nav-icon">üì¶</div>
          <span>Pedidos</span>
        </button>
        <button data-route="clientes" class="mobile-nav-button">
          <div class="mobile-nav-icon">üë•</div>
          <span>Clientes</span>
        </button>
        <button data-route="productos" class="mobile-nav-button">
          <div class="mobile-nav-icon">üõçÔ∏è</div>
          <span>Productos</span>
        </button>
        <button data-route="informes" class="mobile-nav-button">
          <div class="mobile-nav-icon">üìä</div>
          <span>Informes</span>
        </button>
      </nav>
    </div>
  </div>
</Layout>

<script>
// Definir funci√≥n de informes INMEDIATAMENTE para evitar errores de carga
window.generarInforme = async function() {
  console.log('üöÄ window.generarInforme() llamada');
  
  // Verificar que los elementos existen
  const fechaDesde = document.getElementById('fechaDesde')?.value;
  const fechaHasta = document.getElementById('fechaHasta')?.value;
  const tipoInforme = document.getElementById('tipoInforme')?.value;
  const resultadosDiv = document.getElementById('informeResultados');

  console.log('üìã Datos del formulario:', { fechaDesde, fechaHasta, tipoInforme });

  if (!fechaDesde || !fechaHasta) {
    alert('Por favor selecciona ambas fechas');
    return;
  }

  if (new Date(fechaDesde) > new Date(fechaHasta)) {
    alert('La fecha desde no puede ser mayor a la fecha hasta');
    return;
  }

  try {
    // Mostrar loading
    if (resultadosDiv) {
      resultadosDiv.innerHTML = `
        <div class="loading-state">
          <div class="spinner"></div>
          <p>Generando informe...</p>
        </div>
      `;
    }

    const token = localStorage.getItem('token');
    const response = await fetch(`/api/informes/ventas?fechaDesde=${fechaDesde}&fechaHasta=${fechaHasta}&tipo=${tipoInforme}`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });

    if (!response.ok) {
      throw new Error('Error al generar el informe');
    }

    const datos = await response.json();
    
    // Mostrar resultados
    if (tipoInforme === 'resumen') {
      mostrarInformeResumen(datos, resultadosDiv);
    } else {
      mostrarInformeDetallado(datos, resultadosDiv);
    }

  } catch (error) {
    console.error('‚ùå Error generando informe:', error);
    if (resultadosDiv) {
      resultadosDiv.innerHTML = `
        <div class="error-state">
          <div class="error-icon">‚ö†Ô∏è</div>
          <h4>Error al generar informe</h4>
          <p>${error.message}</p>
        </div>
      `;
    }
  }
};

// Funciones auxiliares para informes (definidas antes de su uso)
function mostrarInformeResumen(datos, container) {
  const html = `
    <div class="informe-card">
      <h4>üìà Resumen de Ventas</h4>
      <div class="resumen-stats">
        <div class="stat-item">
          <div class="stat-value">${datos.totalPedidos || 0}</div>
          <div class="stat-label">Total Pedidos</div>
        </div>
        <div class="stat-item">
          <div class="stat-value">$${(datos.totalVentas || 0).toLocaleString('es-AR')}</div>
          <div class="stat-label">Total Ventas</div>
        </div>
        <div class="stat-item">
          <div class="stat-value">${datos.totalClientes || 0}</div>
          <div class="stat-label">Clientes √önicos</div>
        </div>
        <div class="stat-item">
          <div class="stat-value">$${((datos.totalVentas || 0) / (datos.totalPedidos || 1)).toLocaleString('es-AR')}</div>
          <div class="stat-label">Promedio por Pedido</div>
        </div>
      </div>
      
      ${datos.productos && datos.productos.length > 0 ? `
        <div class="productos-vendidos">
          <h5>Productos M√°s Vendidos</h5>
          <div class="productos-list">
            ${datos.productos.map(producto => `
              <div class="producto-item">
                <span class="producto-nombre">${producto.descripcion}</span>
                <span class="producto-cantidad">${producto.cantidad} unidades</span>
                <span class="producto-total">$${producto.total.toLocaleString('es-AR')}</span>
              </div>
            `).join('')}
          </div>
        </div>
      ` : ''}
    </div>
  `;
  
  container.innerHTML = html;
}

function mostrarInformeDetallado(datos, container) {
  const html = `
    <div class="informe-card">
      <h4>üìã Detalle por Cliente</h4>
      
      ${datos.clientes && datos.clientes.length > 0 ? `
        <div class="clientes-detalle">
          ${datos.clientes.map((cliente, index) => `
            <div class="cliente-card">
              <div class="cliente-header">
                <div class="cliente-info">
                  <h5>${cliente.nombre} ${cliente.apellido || ''}</h5>
                  <p class="cliente-telefono">üìû ${cliente.telefono || 'Sin tel√©fono'}</p>
                </div>
                <div class="cliente-stats">
                  <div class="stat-mini">
                    <span class="stat-value">${cliente.totalPedidos}</span>
                    <span class="stat-label">Pedidos</span>
                  </div>
                  <div class="stat-mini">
                    <span class="stat-value">$${cliente.totalComprado.toLocaleString('es-AR')}</span>
                    <span class="stat-label">Total</span>
                  </div>
                  <div class="stat-mini">
                    <span class="stat-value">$${(cliente.totalComprado / cliente.totalPedidos).toLocaleString('es-AR')}</span>
                    <span class="stat-label">Promedio</span>
                  </div>
                </div>
              </div>
              
              ${cliente.productos && cliente.productos.length > 0 ? `
                <div class="productos-cliente">
                  <h6>üõçÔ∏è Productos Comprados:</h6>
                  <div class="productos-table">
                    <table class="mini-table">
                      <thead>
                        <tr>
                          <th>Producto</th>
                          <th>Cantidad</th>
                          <th>Precio Promedio</th>
                          <th>Total Pagado</th>
                          <th>Pedidos</th>
                        </tr>
                      </thead>
                      <tbody>
                        ${cliente.productos.map(producto => `
                          <tr>
                            <td><strong>${producto.descripcion}</strong></td>
                            <td>${producto.cantidadTotal} unidades</td>
                            <td>$${producto.precioPromedio.toLocaleString('es-AR')}</td>
                            <td>$${producto.totalPagado.toLocaleString('es-AR')}</td>
                            <td>${producto.pedidosConEsteProducto} pedidos</td>
                          </tr>
                        `).join('')}
                      </tbody>
                    </table>
                  </div>
                </div>
              ` : `
                <div class="empty-state-mini">
                  <p>No hay productos registrados para este cliente</p>
                </div>
              `}
              
              ${cliente.pedidos && cliente.pedidos.length > 0 ? `
                <div class="pedidos-cliente">
                  <h6>üì¶ Historial de Pedidos:</h6>
                  <div class="pedidos-list">
                    ${cliente.pedidos.map(pedido => `
                      <div class="pedido-item">
                        <span class="pedido-fecha">üìÖ ${new Date(pedido.fechaEntrega).toLocaleDateString('es-AR')}</span>
                        <span class="pedido-total">üí∞ $${pedido.total.toLocaleString('es-AR')}</span>
                        <span class="pedido-items">üì¶ ${pedido.cantidadItems} items</span>
                        <span class="pedido-codigo">#${pedido.codigo}</span>
                      </div>
                    `).join('')}
                  </div>
                </div>
              ` : ''}
            </div>
          `).join('')}
        </div>
      ` : `
        <div class="empty-state">
          <p>No se encontraron ventas en el per√≠odo seleccionado</p>
        </div>
      `}
    </div>
  `;
  
  container.innerHTML = html;
}

// Estado global de la aplicaci√≥n
let currentUser: any = null;
let currentRoute: string = 'pedidos';

// Inicializaci√≥n principal de la aplicaci√≥n
document.addEventListener('DOMContentLoaded', async () => {
  console.log('üöÄ Inicializando aplicaci√≥n...');
  
  // Verificar autenticaci√≥n
  await checkAuth();
  
  // Configurar listeners de eventos con un peque√±o delay
  setTimeout(() => {
    if (typeof trySetupEventListeners === 'function') {
      trySetupEventListeners();
    } else {
      console.warn('‚ö†Ô∏è trySetupEventListeners no est√° disponible a√∫n');
    }
  }, 100);
});

// Verificar si el usuario est√° autenticado
async function checkAuth() {
  console.log('üîê Verificando autenticaci√≥n...');
  const token = localStorage.getItem('token');
  const userStr = localStorage.getItem('user');

  console.log('üîë Token encontrado:', token ? 'S√≠' : 'No');
  console.log('üë§ Usuario encontrado:', userStr ? 'S√≠' : 'No');

  if (!token || !userStr) {
    console.log('‚ùå No hay token o usuario, redirigiendo al login');
    redirectToLogin();
    return;
  }

  // Modo desarrollo: permitir saltarse la verificaci√≥n del servidor
  const isDevelopment = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';
  if (isDevelopment && localStorage.getItem('skipServerCheck') === 'true') {
    console.log('üîß Modo desarrollo: saltando verificaci√≥n del servidor');
    currentUser = JSON.parse(userStr);
    showMainApp();
    loadRoute(currentRoute);
    return;
  }

  try {
    console.log('üì° Verificando token con el servidor...');
    
    // Agregar timeout a la petici√≥n
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 5000); // 5 segundos timeout
    
    const response = await fetch('/api/pedidos', {
      headers: {
        'Authorization': `Bearer ${token}`
      },
      signal: controller.signal
    });
    
    clearTimeout(timeoutId);
    console.log('üì• Respuesta del servidor:', response.status, response.statusText);

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Error del servidor:', errorText);
      throw new Error(`Token inv√°lido: ${response.status} - ${errorText}`);
    }

    console.log('‚úÖ Token v√°lido, mostrando aplicaci√≥n');
    currentUser = JSON.parse(userStr);
    showMainApp();
    loadRoute(currentRoute);
  } catch (error: unknown) {
    console.error('üí• Error de autenticaci√≥n:', error);
    
    if (error instanceof Error) {
    if (error.name === 'AbortError') {
      console.error('‚è∞ Timeout: El servidor no responde');
      alert('Error: No se puede conectar con el servidor. Aseg√∫rate de que el backend est√© corriendo en el puerto 8001.');
    } else if (error.message.includes('fetch')) {
      console.error('üåê Error de conexi√≥n');
      alert('Error de conexi√≥n: No se puede conectar con el servidor. Verifica que el backend est√© corriendo.');
      }
    }
    
    console.log('üßπ Limpiando localStorage y redirigiendo al login');
    localStorage.removeItem('token');
    localStorage.removeItem('user');
    redirectToLogin();
  }
}

// Redirigir al login
function redirectToLogin() {
  if (window.location.pathname !== '/login') {
    window.location.href = '/login';
  }
}

// Mostrar la aplicaci√≥n principal
function showMainApp() {
  const loadingElement = document.getElementById('loading');
  const mainAppElement = document.getElementById('mainApp');
  
  if (loadingElement) loadingElement.classList.add('hidden');
  if (mainAppElement) mainAppElement.classList.remove('hidden');

  // Mostrar informaci√≥n del usuario
  const userInfo = document.getElementById('userInfo');
  if (userInfo && currentUser) {
    userInfo.textContent = `Hola, ${currentUser.nombre || currentUser.telegramId}`;
  }
}

// Funci√≥n de logout
function logout() {
  if (confirm('¬øEst√°s seguro de que quieres cerrar sesi√≥n?')) {
    localStorage.removeItem('token');
    localStorage.removeItem('user');
    window.location.href = '/login';
  }
}

// Navegaci√≥n
document.addEventListener('click', (e) => {
  const target = e.target as HTMLElement;
  if (target.matches('[data-route]') || target.closest('[data-route]')) {
    const button = target.matches('[data-route]') ? target : target.closest('[data-route]') as HTMLElement;
    const route = button.getAttribute('data-route');
    if (route) {
    navigateTo(route);
    }
  }
});

function navigateTo(route: string) {
  currentRoute = route;
  
  // Actualizar botones activos
  document.querySelectorAll('.nav-button, .mobile-nav-button').forEach(btn => {
    btn.classList.remove('active');
  });
  
  document.querySelectorAll(`[data-route="${route}"]`).forEach(btn => {
    btn.classList.add('active');
  });
  
  loadRoute(route);
}

// Cargar contenido de la ruta
async function loadRoute(route: string) {
  // Guardar la ruta actual para los event listeners
  window.currentRoute = route;

  const contentArea = document.getElementById('contentArea');
  if (contentArea) {
  contentArea.innerHTML = '<div style="display: flex; justify-content: center; padding: 2rem;"><div class="spinner"></div></div>';
  }

  try {
    switch (route) {
      case 'pedidos':
        await loadZonas();
        await loadPedidos();
        break;
      case 'clientes':
        await loadClientes();
        break;
      case 'productos':
        await loadProductosSection();
        break;
      case 'informes':
        await loadInformes();
        break;
      default:
        contentArea.innerHTML = '<div style="text-align: center; padding: 2rem; color: #6b7280;">P√°gina no encontrada</div>';
    }
  } catch (error) {
    console.error('Error cargando ruta:', error);
      if (contentArea) {
    contentArea.innerHTML = '<div style="text-align: center; padding: 2rem; color: #dc2626;">Error cargando contenido</div>';
      }
  }
}

// Variables globales para filtros
let currentFilters: { estado: string; fecha: string; zona: string; search: string } = { estado: '', fecha: '', zona: '', search: '' };
let availableZonas: any[] = [];

// Cargar zonas disponibles
async function loadZonas() {
  console.log('üó∫Ô∏è Cargando zonas...');
  const token = localStorage.getItem('token');

  try {
    const response = await fetch('/api/zonas', {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });

    if (response.ok) {
      availableZonas = await response.json();
      console.log('‚úÖ Zonas cargadas:', availableZonas.length, 'zonas');
      updateZonaFilter();
    } else {
      console.warn('‚ö†Ô∏è No se pudieron cargar las zonas');
      availableZonas = [];
    }
  } catch (error) {
    console.error('üí• Error cargando zonas:', error);
    availableZonas = [];
  }
}

// Actualizar el filtro de zonas en el HTML
function updateZonaFilter() {
  const zonaFilter = document.getElementById('filterZona');
  if (zonaFilter && availableZonas.length > 0) {
    zonaFilter.innerHTML = '<option value="">Todas las zonas</option>' +
      availableZonas.map(zona => `<option value="${zona.zona}">${zona.zona}</option>`).join('');
  }
}

// Cargar pedidos con filtros desde el backend
async function loadPedidos() {
  console.log('üì¶ Cargando pedidos con filtros:', currentFilters);
  const token = localStorage.getItem('token');

  try {
    // Si es la primera carga, aplicar filtro por defecto (pendientes)
    if (!currentFilters.estado && allPedidos.length === 0) {
      currentFilters.estado = 'pendient';
      // Configurar el select por defecto
      const estadoSelect = document.getElementById('filterEstado');
      if (estadoSelect) {
        estadoSelect.value = 'pendient';
      }
    }

    // Construir par√°metros de consulta solo con filtros que tienen valor
    const params = new URLSearchParams();
    Object.keys(currentFilters).forEach(key => {
      if (currentFilters[key] && currentFilters[key].trim() !== '') {
        params.append(key, currentFilters[key]);
      }
    });

    const url = `/api/pedidos${params.toString() ? '?' + params.toString() : ''}`;
    console.log('üì° URL de consulta:', url);

    const response = await fetch(url, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Error del servidor:', errorText);
      throw new Error(`Error ${response.status}: ${errorText}`);
    }

    const pedidos = await response.json();
    console.log('‚úÖ Pedidos cargados:', pedidos.length, 'pedidos');
    console.log('üìã Datos de pedidos:', pedidos);

    // Guardar en variables globales
    allPedidos = pedidos;
    currentPedidos = pedidos;
    window.allPedidos = pedidos;
    window.currentPedidos = pedidos;

    // Actualizar informaci√≥n de resultados
    updatePedidosInfo(pedidos);

    // Renderizar pedidos directamente (ya vienen filtrados del backend)
    renderPedidos(pedidos);
  } catch (error) {
    console.error('üí• Error cargando pedidos:', error);
    const contentArea = document.getElementById('contentArea');
    if (contentArea) {
      contentArea.innerHTML = `
        <h3 class="content-title">Gesti√≥n de Pedidos</h3>
        <div style="text-align: center; padding: 2rem; color: #dc2626;">
          <p>Error cargando pedidos: ${error.message}</p>
          <button onclick="loadPedidos()" class="btn-primary" style="margin-top: 1rem;">
            Reintentar
          </button>
        </div>
      `;
    }
  }
}

// Actualizar informaci√≥n de resultados
function updatePedidosInfo(pedidos) {
  const pedidosCount = document.getElementById('pedidosCount');
  const pedidosFilters = document.getElementById('pedidosFilters');
  
  if (pedidosCount) {
    pedidosCount.textContent = `${pedidos.length} pedido(s)`;
  }
  
  if (pedidosFilters) {
    const filters = [];
    if (currentFilters.estado) {
      const estadoText = getStatusText(currentFilters.estado);
      filters.push(`Estado: ${estadoText}`);
    }
    if (currentFilters.fecha) filters.push(`Fecha: ${currentFilters.fecha}`);
    if (currentFilters.zona) filters.push(`Zona: ${currentFilters.zona}`);
    if (currentFilters.search) filters.push(`Cliente: "${currentFilters.search}"`);
    
    const filterText = filters.length > 0 ? filters.join(', ') : 'Todos los pedidos';
    pedidosFilters.textContent = `Filtros: ${filterText}`;
  }
}

// Funci√≥n para obtener texto del estado
function getStatusText(estado) {
  switch (estado) {
    case 'pendient':
      return 'Pendientes';
    case 'proceso':
      return 'En Proceso';
    case 'entregad':
      return 'Entregados';
    case 'anulado':
      return 'Anulados';
    default:
      return estado;
  }
}

// Obtener items de un pedido espec√≠fico
async function getPedidoItems(pedidoId) {
  console.log('üìã Obteniendo items del pedido:', pedidoId);
  const token = localStorage.getItem('token');

  try {
    const response = await fetch(`/api/pedidos/${pedidoId}/items`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Error del servidor:', errorText);
      throw new Error(`Error ${response.status}: ${errorText}`);
    }

    const items = await response.json();
    console.log('‚úÖ Items del pedido cargados:', items.length, 'items');
    console.log('üìã Items:', items);

    return items;
  } catch (error) {
    console.error('üí• Error obteniendo items del pedido:', error);
    return [];
  }
}

function renderPedidos(pedidos) {
  const contentArea = document.getElementById('contentArea');

  if (pedidos.length === 0) {
    contentArea.innerHTML = `
      <h3 class="content-title">Gesti√≥n de Pedidos</h3>
      <div style="text-align: center; padding: 3rem; color: #6b7280;">
        <p style="font-size: 1.125rem; margin-bottom: 0.5rem;">No hay pedidos registrados</p>
        <p style="font-size: 0.875rem;">Los pedidos aparecer√°n aqu√≠ cuando se registren en el sistema.</p>
        <div style="display: flex; gap: 0.5rem; justify-content: center; margin-top: 1rem;">
          <button onclick="showMapModal()" class="btn-secondary">
            üó∫Ô∏è Ver Mapa
          </button>
          <button onclick="showCreateOrderModal()" class="btn-primary">
            + Crear Primer Pedido
          </button>
        </div>
      </div>
    `;
    return;
  }

  const html = `
    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5rem;">
      <h3 class="content-title" style="margin-bottom: 0;">Gesti√≥n de Pedidos</h3>
      <div style="display: flex; gap: 0.5rem;">
        <button onclick="showMapModal()" class="btn-secondary" style="width: auto; padding: 0.5rem 1rem;">
          üó∫Ô∏è Mapa
        </button>
        <button onclick="showCreateOrderModal()" class="btn-primary" style="width: auto; padding: 0.5rem 1rem;">
          + Nuevo Pedido
        </button>
      </div>
    </div>

    <div style="margin-bottom: 1rem; background: white; padding: 1rem; border-radius: 0.5rem; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
      <h4 style="margin: 0 0 1rem 0; font-size: 1rem; font-weight: 600; color: #374151;">Filtros de B√∫squeda - Pedidos Pendientes</h4>
      <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 1rem; margin-bottom: 1rem;">
        <div>
          <label style="display: block; font-size: 0.875rem; font-weight: 500; color: #374151; margin-bottom: 0.25rem;">Estado</label>
          <select id="filterEstado" onchange="filterPedidos()" class="form-input" style="width: 100%;">
            <option value="">Todos los estados</option>
            <option value="pendient" selected>üì¶ Pendientes</option>
            <option value="proceso">üîÑ En Proceso</option>
            <option value="entregad">‚úÖ Entregados</option>
            <option value="anulado">‚ùå Anulados</option>
          </select>
        </div>

        <div>
          <label style="display: block; font-size: 0.875rem; font-weight: 500; color: #374151; margin-bottom: 0.25rem;">Fecha</label>
          <input
            type="date"
            id="filterFecha"
            onchange="filterPedidos()"
            class="form-input"
            style="width: 100%;"
          />
        </div>

        <div>
          <label style="display: block; font-size: 0.875rem; font-weight: 500; color: #374151; margin-bottom: 0.25rem;">Zona/Ruta</label>
          <select id="filterZona" onchange="filterPedidos()" class="form-input" style="width: 100%;">
            <option value="">Todas las zonas</option>
          </select>
        </div>

        <div>
          <label style="display: block; font-size: 0.875rem; font-weight: 500; color: #374151; margin-bottom: 0.25rem;">Buscar Cliente</label>
          <input
            type="text"
            id="filterSearch"
            placeholder="Nombre o apellido..."
            onchange="filterPedidos()"
            oninput="debouncePedidosSearch()"
            class="form-input"
            style="width: 100%;"
          />
        </div>
      </div>

      <div style="display: flex; gap: 0.5rem; justify-content: space-between; align-items: center;">
      <div style="display: flex; gap: 0.5rem;">
        <button onclick="clearPedidosFilters()" style="padding: 0.5rem 1rem; background: #6b7280; color: white; border: none; border-radius: 0.375rem; cursor: pointer; font-size: 0.875rem;">
            üóëÔ∏è Limpiar Filtros
        </button>
        </div>
        <div id="pedidosInfo" style="font-size: 0.875rem; color: #6b7280;">
          <span id="pedidosCount">Cargando...</span> | <span id="pedidosFilters">Filtros: Pendientes por defecto</span>
        </div>
      </div>
    </div>

    <div style="display: grid; gap: 1rem;">
      ${pedidos.map(pedido => {
        // Asegurar que todos los campos tengan valores por defecto
        const id = pedido.id || pedido.codigo || 'N/A';
        const clienteNombre = pedido.cliente_nombre || pedido.nombre || 'Cliente sin nombre';
        const direccion = pedido.direccion || 'Direcci√≥n no especificada';
        const fechaPedido = pedido.fecha_pedido || pedido.fechaPedido;
        const total = pedido.total || 0;
        const estado = pedido.estado || 'pendient';

        // Formatear fecha
        let fechaFormateada = 'Fecha no disponible';
        if (fechaPedido) {
          try {
            const fecha = new Date(fechaPedido);
            if (!isNaN(fecha.getTime())) {
              fechaFormateada = fecha.toLocaleDateString('es-ES', {
                year: 'numeric',
                month: 'short',
                day: 'numeric'
              });
            }
          } catch (e) {
            console.error('Error formateando fecha:', e);
          }
        }

        return `
          <div style="border: 1px solid #e5e7eb; border-radius: 0.5rem; padding: 1rem; background: white;">
            <div style="display: flex; justify-content: space-between; align-items: start;">
              <div style="flex: 1;">
                <h4 style="font-weight: 600; color: #111827; margin-bottom: 0.5rem;">#${id}</h4>
                <p style="font-size: 0.875rem; color: #4b5563; margin-bottom: 0.25rem;">üë§ ${clienteNombre}</p>
                <p style="font-size: 0.875rem; color: #6b7280; margin-bottom: 0.25rem;">üìç ${direccion}</p>
                <p style="font-size: 0.875rem; color: #6b7280;">üìÖ ${fechaFormateada}</p>
              </div>
              <div style="text-align: right;">
                <p style="font-weight: 600; color: #059669; margin-bottom: 0.5rem; font-size: 1.125rem;">$${parseFloat(total).toFixed(2)}</p>
                <span style="display: inline-flex; align-items: center; padding: 0.25rem 0.75rem; border-radius: 9999px; font-size: 0.75rem; font-weight: 500; ${getStatusColor(estado)}">
                  ${estado}
                </span>
                <div style="margin-top: 0.5rem; display: flex; gap: 0.25rem; justify-content: flex-end; flex-wrap: wrap;">
                  <button onclick="viewPedido(${id})" style="padding: 0.25rem 0.5rem; background: #6b7280; color: white; border: none; border-radius: 0.25rem; cursor: pointer; font-size: 0.75rem;">
                    Ver
                  </button>
                  ${estado === 'pendient' ? `
                    <button onclick="entregarPedido(${id})" style="padding: 0.25rem 0.5rem; background: #059669; color: white; border: none; border-radius: 0.25rem; cursor: pointer; font-size: 0.75rem;">
                      üöö Entregar
                    </button>
                  ` : ''}
                  <button onclick="editPedido(${id})" style="padding: 0.25rem 0.5rem; background: #3b82f6; color: white; border: none; border-radius: 0.25rem; cursor: pointer; font-size: 0.75rem;">
                    Editar
                  </button>
                </div>
              </div>
            </div>
          </div>
        `;
      }).join('')}
    </div>
  `;

  contentArea.innerHTML = html;
}

function getStatusColor(estado) {
  switch (estado) {
    case 'pendient':
      return 'background-color: #fef3c7; color: #92400e;';
    case 'En Preparaci√≥n':
      return 'background-color: #dbeafe; color: #1e40af;';
    case 'Entregado':
      return 'background-color: #d1fae5; color: #065f46;';
    case 'anulado':
      return 'background-color: #fee2e2; color: #dc2626;';
    default:
      return 'background-color: #f3f4f6; color: #374151;';
  }
}

// Variables globales para pedidos
let currentPedidos: any[] = [];
let allPedidos: any[] = [];

// Timeout para b√∫squeda con debounce de pedidos
let pedidosSearchTimeout: any;

// Filtrar pedidos (ahora desde el backend)
async function filterPedidos() {
  const estadoFilter = (document.getElementById('filterEstado') as HTMLSelectElement)?.value || '';
  const fechaFilter = (document.getElementById('filterFecha') as HTMLInputElement)?.value || '';
  const zonaFilter = (document.getElementById('filterZona') as HTMLSelectElement)?.value || '';
  const searchFilter = (document.getElementById('filterSearch') as HTMLInputElement)?.value || '';

  console.log('üîç Aplicando filtros:', { estadoFilter, fechaFilter, zonaFilter, searchFilter });

  // Actualizar filtros globales
  currentFilters = {
    estado: estadoFilter,
    fecha: fechaFilter,
    zona: zonaFilter,
    search: searchFilter
  };

  // Recargar pedidos con los nuevos filtros desde el backend
  await loadPedidos();
}

// B√∫squeda con debounce para el campo de b√∫squeda de pedidos
function debouncePedidosSearch() {
  clearTimeout(pedidosSearchTimeout);
  pedidosSearchTimeout = setTimeout(() => {
    filterPedidos();
  }, 500); // Esperar 500ms despu√©s de que el usuario deje de escribir
}

// Limpiar filtros de pedidos
async function clearPedidosFilters() {
  console.log('üßπ Limpiando filtros de pedidos');

  // Limpiar campos de filtro
  const filterEstado = document.getElementById('filterEstado');
  const filterFecha = document.getElementById('filterFecha');
  const filterZona = document.getElementById('filterZona');
  const filterSearch = document.getElementById('filterSearch');

  if (filterEstado) filterEstado.value = 'pendient'; // Volver a pendientes por defecto
  if (filterFecha) filterFecha.value = '';
  if (filterZona) filterZona.value = '';
  if (filterSearch) filterSearch.value = '';

  // Resetear filtros globales
  currentFilters = {
    estado: 'pendient', // Mantener pendientes por defecto
    fecha: '',
    zona: '',
    search: ''
  };

  // Aplicar filtros (mostrar√° solo pedidos pendientes)
  await filterPedidos();
}

// Ver detalles del pedido
async function viewPedido(pedidoId) {
  const pedido = currentPedidos.find(p => (p.id || p.codigo) == pedidoId);
  if (!pedido) {
    alert('Pedido no encontrado');
    return;
  }

  console.log('üëÅÔ∏è Viendo detalles del pedido:', pedidoId);

  const clienteNombre = pedido.cliente_nombre || pedido.nombre || 'Cliente sin nombre';
  const apellido = pedido.apellido || '';
  const nombreCompleto = `${clienteNombre} ${apellido}`.trim();
  const total = parseFloat(pedido.total || 0).toFixed(2);
  const estado = pedido.estado || 'pendient';
  const direccion = pedido.direccion || 'Direcci√≥n no especificada';
  const telefono = pedido.telefono || 'Sin tel√©fono';
  const fecha = pedido.FechaPedido || pedido.fecha || 'Fecha no disponible';

  try {
    // Obtener items del pedido
    const items = await getPedidoItems(pedidoId);

    let itemsText = '';
    if (items.length > 0) {
      itemsText = '\n\nüì¶ PRODUCTOS:\n';
      items.forEach(item => {
        const subtotal = parseFloat(item.subtotal || 0).toFixed(2);
        itemsText += `‚Ä¢ ${item.nombreProducto}\n  Cantidad: ${item.cantidad} x $${parseFloat(item.precioUnitario || 0).toFixed(2)} = $${subtotal}\n`;
      });
    } else {
      itemsText = '\n\nüì¶ No hay items registrados para este pedido';
    }

    const detalles = `üßæ PEDIDO #${pedidoId}

üë§ CLIENTE: ${nombreCompleto}
üìû Tel√©fono: ${telefono}
üìç Direcci√≥n: ${direccion}
üìÖ Fecha: ${fecha}
üìä Estado: ${estado}
üí∞ Total: $${total}${itemsText}`;

    alert(detalles);

  } catch (error) {
    console.error('Error obteniendo detalles del pedido:', error);

    // Mostrar informaci√≥n b√°sica si falla la carga de items
    const detallesBasicos = `üßæ PEDIDO #${pedidoId}

üë§ CLIENTE: ${nombreCompleto}
üìû Tel√©fono: ${telefono}
üìç Direcci√≥n: ${direccion}
üìÖ Fecha: ${fecha}
üìä Estado: ${estado}
üí∞ Total: $${total}

‚ö†Ô∏è No se pudieron cargar los items del pedido`;

    alert(detallesBasicos);
  }
}

// Editar pedido
function editPedido(pedidoId) {
  alert('Funcionalidad de edici√≥n en desarrollo...');
}

// Cargar clientes
async function loadClientes() {
  console.log('üë• Cargando clientes...');
  const token = localStorage.getItem('token');

  try {
    const response = await fetch('/api/clientes', {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Error del servidor:', errorText);
      throw new Error(`Error ${response.status}: ${errorText}`);
    }

    const clientes = await response.json();
    console.log('‚úÖ Clientes cargados:', clientes.length, 'clientes');
    console.log('üìã Datos de clientes:', clientes);

    // Guardar en variable global para b√∫squedas y edici√≥n
    currentClients = clientes;

    renderClientes(clientes);
  } catch (error) {
    console.error('üí• Error cargando clientes:', error);
    const contentArea = document.getElementById('contentArea');
    if (contentArea) {
      contentArea.innerHTML = `
        <h3 class="content-title">Gesti√≥n de Clientes</h3>
        <div style="text-align: center; padding: 2rem; color: #dc2626;">
          <p>Error cargando clientes: ${error.message}</p>
          <button onclick="loadClientes()" class="btn-primary" style="margin-top: 1rem;">
            Reintentar
          </button>
        </div>
      `;
    }
  }
}

function renderClientes(clientes) {
  const contentArea = document.getElementById('contentArea');

  if (clientes.length === 0) {
    contentArea.innerHTML = `
      <h3 class="content-title">Gesti√≥n de Clientes</h3>
      <div style="text-align: center; padding: 3rem; color: #6b7280;">
        <p style="font-size: 1.125rem; margin-bottom: 0.5rem;">No hay clientes registrados</p>
        <p style="font-size: 0.875rem;">Los clientes aparecer√°n aqu√≠ cuando se registren en el sistema.</p>
        <button onclick="showCreateClientModal()" class="btn-primary" style="margin-top: 1rem;">
          + Agregar Primer Cliente
        </button>
      </div>
    `;
    return;
  }

  const html = `
    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5rem;">
      <h3 class="content-title" style="margin-bottom: 0;">Gesti√≥n de Clientes</h3>
      <button onclick="showCreateClientModal()" class="btn-primary" style="width: auto; padding: 0.5rem 1rem;">
        + Nuevo Cliente
      </button>
    </div>

    <div style="margin-bottom: 1rem; display: flex; gap: 1rem; align-items: center;">
      <div style="position: relative; max-width: 300px; flex: 1;">
        <input
          type="text"
          id="searchClients"
          placeholder="Buscar clientes por nombre, apellido o tel√©fono..."
          class="form-input"
          style="padding-left: 2.5rem;"
          onkeyup="debounceSearchClients(this.value)"
          oninput="debounceSearchClients(this.value)"
        />
        <svg style="position: absolute; left: 0.75rem; top: 50%; transform: translateY(-50%); width: 1rem; height: 1rem; color: #6b7280;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0 114 0z"></path>
        </svg>
      </div>
      <button onclick="clearClientSearch()" style="padding: 0.5rem; background: #6b7280; color: white; border: none; border-radius: 0.375rem; cursor: pointer; font-size: 0.875rem;">
        Limpiar
      </button>
    </div>

    <div style="display: grid; gap: 1rem;">
      ${clientes.map(cliente => {
        // Asegurar que todos los campos tengan valores por defecto
        // Intentar diferentes nombres de columnas que podr√≠an existir
        const id = cliente.id || cliente.codigo || cliente.Code || 'N/A';
        const codigo = cliente.codigo || cliente.Code || cliente.id || 'N/A';
        const nombre = cliente.nombre || cliente.name || cliente.Name || 'Sin nombre';
        const apellido = cliente.apellido || cliente.lastname || cliente.LastName || '';
        const nombreCompleto = cliente.nombreCompleto || `${nombre} ${apellido}`.trim() || 'Cliente sin nombre';
        const telefono = cliente.telefono || cliente.phone || cliente.Phone || 'Sin tel√©fono';
        const direccion = cliente.direccion || cliente.address || cliente.Address || 'Sin direcci√≥n';

        // Usar los nombres correctos de columnas
        const saldoDinero = parseFloat(cliente.saldo || 0);
        const saldoRetornables = parseInt(cliente.retornables || 0);

        return `
          <div style="border: 1px solid #e5e7eb; border-radius: 0.5rem; padding: 1rem; background: white; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
            <div style="display: flex; justify-content: space-between; align-items: start;">
              <div style="flex: 1;">
                <div style="display: flex; align-items: center; gap: 0.5rem; margin-bottom: 0.5rem; flex-wrap: wrap;">
                  <h4 style="font-weight: 600; color: #111827; margin: 0;">${nombreCompleto}</h4>
                  <span style="background: #f3f4f6; color: #6b7280; padding: 0.125rem 0.5rem; border-radius: 0.25rem; font-size: 0.75rem;">
                    #${codigo}
                  </span>
                  ${(cliente.latitud && cliente.longitud) ? `
                    <span style="background: #dbeafe; color: #1e40af; padding: 0.125rem 0.5rem; border-radius: 0.25rem; font-size: 0.75rem; font-weight: 500;" title="Cliente con ubicaci√≥n GPS">
                      üìç GPS
                    </span>
                  ` : ''}
                </div>

                <div style="margin-bottom: 0.75rem;">
                  <p style="font-size: 0.875rem; color: #4b5563; margin-bottom: 0.25rem;">üìû ${telefono}</p>
                  <p style="font-size: 0.875rem; color: #6b7280; margin-bottom: 0.25rem;">üìç ${direccion}</p>
                </div>

                <div style="display: flex; gap: 1rem; align-items: center; flex-wrap: wrap;">
                  <div style="display: flex; align-items: center; gap: 0.25rem;">
                    <span style="color: #6b7280; font-size: 0.875rem;">Saldo $:</span>
                    <span style="color: ${saldoDinero <= 0 ? '#059669' : '#dc2626'}; font-weight: 600; font-size: 0.875rem;">
                      $${saldoDinero.toFixed(2)}
                    </span>
                  </div>
                  <div style="display: flex; align-items: center; gap: 0.5rem; margin-bottom: 0.5rem;">
                    <span style="color: #6b7280; font-size: 0.875rem;">Retornables:</span>
                    <span style="color: ${saldoRetornables <= 0 ? '#059669' : '#dc2626'}; font-weight: 600; font-size: 0.875rem;">
                      ${saldoRetornables} ${saldoRetornables === 1 ? 'unidad' : 'unidades'}
                    </span>
                  </div>
                </div>
              </div>

              <div style="display: flex; gap: 0.5rem; margin-left: 1rem; flex-wrap: wrap;">
                <button
                  onclick="editClient(${id})"
                  style="padding: 0.5rem; background: #3b82f6; color: white; border: none; border-radius: 0.375rem; cursor: pointer; display: flex; align-items: center; gap: 0.25rem; font-size: 0.875rem;"
                  title="Editar cliente"
                >
                  <svg width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M12.146.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1 0 .708L10.5 8.207l-3-3L12.146.146zM11.207 9l-3-3L2.5 11.707V14.5a.5.5 0 0 0 .5.5h2.793L11.207 9z"/>
                  </svg>
                  Editar
                </button>

                ${(cliente.latitud && cliente.longitud) ? `
                  <button
                    onclick="showClientLocation(${id})"
                    style="padding: 0.5rem; background: #7c3aed; color: white; border: none; border-radius: 0.375rem; cursor: pointer; display: flex; align-items: center; gap: 0.25rem; font-size: 0.875rem;"
                    title="Ver ubicaci√≥n en el mapa"
                  >
                    <svg width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                      <path d="M8 16s6-5.686 6-10A6 6 0 0 0 2 6c0 4.314 6 10 6 10zm0-7a3 3 0 1 1 0-6 3 3 0 0 1 0 6z"/>
                    </svg>
                    Mapa
                  </button>
                ` : ''}

                <!-- Bot√≥n Cta Cte comentado temporalmente
                <button
                  onclick="showClientAccount(${id})"
                  style="padding: 0.5rem; background: #059669; color: white; border: none; border-radius: 0.375rem; cursor: pointer; display: flex; align-items: center; gap: 0.25rem; font-size: 0.875rem;"
                  title="Ver cuenta corriente"
                >
                  <svg width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M0 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V4zm2-1a1 1 0 0 0-1 1v1h14V4a1 1 0 0 0-1-1H2zm13 4H1v5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V8z"/>
                    <path d="M2 10a1 1 0 0 1 1-1h1a1 1 0 1 1 0 2H3a1 1 0 0 1-1-1zm0 2a1 1 0 0 1 1-1h1a1 1 0 1 1 0 2H3a1 1 0 0 1-1-1zm4-2a1 1 0 0 1 1-1h1a1 1 0 1 1 0 2H7a1 1 0 0 1-1-1zm0 2a1 1 0 0 1 1-1h1a1 1 0 1 1 0 2H7a1 1 0 0 1-1-1zm4-2a1 1 0 0 1 1-1h1a1 1 0 1 1 0 2h-1a1 1 0 0 1-1-1zm0 2a1 1 0 0 1 1-1h1a1 1 0 1 1 0 2h-1a1 1 0 0 1-1-1z"/>
                  </svg>
                  Cta Cte
                </button>
                -->

                <button
                  onclick="showClientPayment(${id})"
                  style="padding: 0.5rem; background: #f59e0b; color: white; border: none; border-radius: 0.375rem; cursor: pointer; display: flex; align-items: center; gap: 0.25rem; font-size: 0.875rem;"
                  title="Ingresar pago"
                >
                  <svg width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M0 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V4zm2-1a1 1 0 0 0-1 1v1h14V4a1 1 0 0 0-1-1H2zm13 4H1v5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V8z"/>
                    <path d="M2 10a1 1 0 0 1 1-1h1a1 1 0 1 1 0 2H3a1 1 0 0 1-1-1zm0 2a1 1 0 0 1 1-1h1a1 1 0 1 1 0 2H3a1 1 0 0 1-1-1zm4-2a1 1 0 0 1 1-1h1a1 1 0 1 1 0 2H7a1 1 0 0 1-1-1zm0 2a1 1 0 0 1 1-1h1a1 1 0 1 1 0 2H7a1 1 0 0 1-1-1zm4-2a1 1 0 0 1 1-1h1a1 1 0 1 1 0 2h-1a1 1 0 0 1-1-1zm0 2a1 1 0 0 1 1-1h1a1 1 0 1 1 0 2h-1a1 1 0 0 1-1-1z"/>
                  </svg>
                  Pagar
                </button>

                <button
                  onclick="showReturnablesModal(${id})"
                  style="padding: 0.5rem; background: #10b981; color: white; border: none; border-radius: 0.375rem; cursor: pointer; display: flex; align-items: center; gap: 0.25rem; font-size: 0.875rem;"
                  title="Devolver retornables"
                >
                  <svg width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M8 3a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.5.5H6a.5.5 0 0 1 0-1h1.5V3.5A.5.5 0 0 1 8 3zm3.5 1a.5.5 0 0 1 .5.5v1.5H12a.5.5 0 0 1 0 1h-2a.5.5 0 0 1-.5-.5v-2a.5.5 0 0 1 .5-.5z"/>
                    <path d="M8 1a2 2 0 0 1 2 2v2a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h2zM6 3a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1V4a1 1 0 0 0-1-1H6z"/>
                    <path d="M8 9a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.5.5H6a.5.5 0 0 1 0-1h1.5v-1.5A.5.5 0 0 1 8 9zm3.5 1a.5.5 0 0 1 .5.5v1.5H12a.5.5 0 0 1 0 1h-2a.5.5 0 0 1-.5-.5v-2a.5.5 0 0 1 .5-.5z"/>
                    <path d="M8 7a2 2 0 0 1 2 2v2a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V9a2 2 0 0 1 2-2h2zM6 9a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1H6z"/>
                  </svg>
                  Devolver
                </button>

                <button
                  onclick="deleteClient(${id})"
                  style="padding: 0.5rem; background: #ef4444; color: white; border: none; border-radius: 0.375rem; cursor: pointer; display: flex; align-items: center; gap: 0.25rem; font-size: 0.875rem;"
                  title="Eliminar cliente"
                >
                  <svg width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
                    <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
                  </svg>
                  Eliminar
                </button>
              </div>
            </div>
          </div>
        `;
      }).join('')}
    </div>
  `;

  contentArea.innerHTML = html;

  // Pasar los clientes a las funciones globales
  if (window.setCurrentClients) {
    window.setCurrentClients(clientes);
  }
}

// Cargar secci√≥n de productos con dise√±o moderno
async function loadProductosSection() {
  console.log('üõçÔ∏è Cargando secci√≥n de productos...');
  const contentArea = document.getElementById('contentArea');
  
  // Cargar el HTML del componente ProductosSection
  const productosHTML = `
    <div class="productos-section">
      <div class="productos-header">
        <div class="header-content">
          <h2 class="section-title">
            <span class="icon">üì¶</span>
            Gesti√≥n de Productos
          </h2>
          <p class="section-subtitle">Administra tu cat√°logo de productos de manera eficiente</p>
        </div>
      </div>

      <div class="productos-container">
        <!-- Panel de acciones -->
        <div class="actions-panel">
          <div class="actions-header">
            <h3>‚ö° Acciones R√°pidas</h3>
          </div>
          
          <div class="actions-content">
            <button onclick="window.showCreateProductModal()" class="btn-create">
              <span class="btn-icon">‚ûï</span>
              Nuevo Producto
            </button>
            
            <div class="search-group">
              <div class="search-input-wrapper">
                <span class="search-icon">üîç</span>
                <input 
                  type="text" 
                  id="productosSearch" 
                  placeholder="Buscar productos..."
                  class="search-input"
                >
              </div>
            </div>
          </div>
        </div>

        <!-- Panel de filtros -->
        <div class="filters-panel">
          <div class="filters-header">
            <h3>üîç Filtros</h3>
          </div>
          
          <div class="filters-content">
            <div class="filter-group">
              <label for="filterProductosEstado" class="filter-label">
                <span class="label-icon">üìä</span>
                Estado
              </label>
              <div class="modern-select estado-select">
                <select id="filterProductosEstado">
                  <option value="todos">Todos los productos</option>
                  <option value="activos">Solo activos</option>
                  <option value="inactivos">Solo inactivos</option>
                </select>
              </div>
            </div>
            
            <button onclick="window.clearProductosFilters()" class="btn-clear">
              <span class="btn-icon">üîÑ</span>
              Limpiar Filtros
            </button>
          </div>
        </div>

        <!-- Lista de productos -->
        <div class="products-area">
          <div id="productosList" class="products-container">
            <div class="empty-state">
              <div class="empty-icon">üì¶</div>
              <h4>Cargando productos...</h4>
              <p>Preparando tu cat√°logo de productos</p>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Modal para crear/editar producto -->
    <div id="productModal" class="modal-overlay">
      <div class="product-modal">
        <div class="modal-header">
          <h4 id="modalTitle" class="modal-title">Nuevo Producto</h4>
          <button onclick="closeProductModal()" class="btn-close">√ó</button>
        </div>
        
        <form id="productForm" class="modal-form">
          <div class="form-group">
            <label class="form-label">Descripci√≥n del Producto</label>
            <input type="text" id="productName" name="nombre" required class="form-input" placeholder="Ej: Botella 2L, Bid√≥n 20L, etc." />
          </div>
          
          <div class="form-group">
            <label class="form-label">Precio</label>
            <input type="number" id="productPrice" name="precio" step="0.01" required class="form-input" />
          </div>
          
          <div class="form-group">
            <label class="form-label">Stock</label>
            <input type="number" id="productStock" name="stock" required class="form-input" />
          </div>
          
          <div class="form-group">
            <div class="checkbox-group">
              <input type="checkbox" id="productRetornable" name="esRetornable" class="form-checkbox" />
              <label class="form-label" style="margin: 0; cursor: pointer;">Es Retornable</label>
            </div>
            <p style="font-size: 0.75rem; color: rgba(255, 255, 255, 0.6); margin-top: 0.25rem;">Marcar si el producto debe ser devuelto (ej: bidones, botellas de vidrio)</p>
          </div>
          
          <div class="form-group">
            <div class="checkbox-group">
              <input type="checkbox" id="productActivo" name="activo" class="form-checkbox" checked />
              <label class="form-label" style="margin: 0; cursor: pointer;">Producto Activo</label>
            </div>
            <p style="font-size: 0.75rem; color: rgba(255, 255, 255, 0.6); margin-top: 0.25rem;">Desmarcar para ocultar el producto sin eliminarlo</p>
          </div>
          
          <div class="modal-actions">
            <button type="button" onclick="closeProductModal()" class="btn-cancel">
              Cancelar
            </button>
            <button type="submit" class="btn-save">
              <span class="btn-icon">üíæ</span>
              Guardar
            </button>
          </div>
        </form>
      </div>
    </div>
      </div>
    </div>
  `;
  
  contentArea.innerHTML = productosHTML;
  
  // Configurar el formulario
  const productForm = document.getElementById('productForm');
  if (productForm) {
    productForm.addEventListener('submit', handleProductSubmit);
  }
  
  // Configurar listeners de eventos
  setupProductEventListeners();
  
  // Cargar los productos
  await loadProductosData();
  
  // Configurar event listeners despu√©s de cargar el HTML y los productos
  setTimeout(() => {
    console.log('üîß Configurando event listeners despu√©s de cargar productos...');
    setupProductosEventListeners();
  }, 500);
}

// Cargar productos (funci√≥n original renombrada)
async function loadProductosData() {
  console.log('üõçÔ∏è Cargando productos...');
  const token = localStorage.getItem('token');

  try {
    const response = await fetch('/api/productos', {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Error del servidor:', errorText);
      throw new Error(`Error ${response.status}: ${errorText}`);
    }

    const productos = await response.json();
    console.log('‚úÖ Productos cargados:', productos.length, 'productos');
    console.log('üìã Datos de productos:', productos);

    // Guardar en variable global para b√∫squedas y edici√≥n
    currentProducts = productos;

    // Aplicar filtros si existen
    if (currentProductFilters.search || currentProductFilters.estado !== 'all') {
      await applyProductFilters();
    } else {
    renderProductsList(productos);
    }
  } catch (error) {
    console.error('üí• Error cargando productos:', error);
    const contentArea = document.getElementById('contentArea');
    if (contentArea) {
      contentArea.innerHTML = `
        <h3 class="content-title">Gesti√≥n de Productos</h3>
        <div style="text-align: center; padding: 2rem; color: #dc2626;">
          <p>Error cargando productos: ${error.message}</p>
          <button onclick="loadProductosData()" class="btn-primary" style="margin-top: 1rem;">
            Reintentar
          </button>
        </div>
      `;
    }
  }
}

function renderProductos(productos) {
  const contentArea = document.getElementById('contentArea');

  if (productos.length === 0) {
    contentArea.innerHTML = `
      <h3 class="content-title">Gesti√≥n de Productos</h3>
      <div style="text-align: center; padding: 3rem; color: #6b7280;">
        <p style="font-size: 1.125rem; margin-bottom: 0.5rem;">No hay productos registrados</p>
        <p style="font-size: 0.875rem;">Los productos aparecer√°n aqu√≠ cuando se registren en el sistema.</p>
        <button onclick="productModal.show()" class="btn-primary" style="margin-top: 1rem;">
          + Agregar Primer Producto
        </button>
      </div>
    `;
    return;
  }

  const html = `
    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5rem;">
      <h3 class="content-title" style="margin-bottom: 0;">Gesti√≥n de Productos</h3>
      <button onclick="productModal.show()" class="btn-primary" style="width: auto; padding: 0.5rem 1rem;">
        + Nuevo Producto
      </button>
    </div>

    <div style="margin-bottom: 1rem; display: flex; gap: 1rem; align-items: center;">
      <div style="position: relative; max-width: 300px; flex: 1;">
        <input
          type="text"
          id="searchProducts"
          placeholder="Buscar productos por descripci√≥n..."
          class="form-input"
          style="padding-left: 2.5rem;"
          onkeyup="debounceSearch(this.value)"
          oninput="debounceSearch(this.value)"
        />
        <svg style="position: absolute; left: 0.75rem; top: 50%; transform: translateY(-50%); width: 1rem; height: 1rem; color: #6b7280;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0 114 0z"></path>
        </svg>
      </div>
      <button onclick="clearSearch()" style="padding: 0.5rem; background: #6b7280; color: white; border: none; border-radius: 0.375rem; cursor: pointer; font-size: 0.875rem;">
        Limpiar
      </button>
    </div>

    <div style="display: grid; gap: 1rem;">
      ${productos.map(producto => {
        // Asegurar que todos los campos tengan valores por defecto
        // Intentar diferentes nombres de columnas que podr√≠an existir
        const id = producto.id || producto.codigo || producto.Code || 'N/A';
        const codigo = producto.codigo || producto.Code || producto.id || 'N/A';
        const nombre = producto.descripcion || producto.Description || producto.description || 'Sin nombre';
        const precio = parseFloat(producto.precio || producto.price || producto.Price || 0);
        const stock = parseInt(producto.stock || producto.Stock || producto.cantidad || producto.Cantidad || 0);
        const esRetornable = producto.esRetornable == 1;

        return `
          <div style="border: 1px solid #e5e7eb; border-radius: 0.5rem; padding: 1rem; background: white; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
            <div style="display: flex; justify-content: space-between; align-items: start;">
              <div style="flex: 1;">
                <div style="display: flex; align-items: center; gap: 0.5rem; margin-bottom: 0.5rem; flex-wrap: wrap;">
                  <h4 style="font-weight: 600; color: #111827; margin: 0;">${nombre}</h4>
                  <span style="background: #f3f4f6; color: #6b7280; padding: 0.125rem 0.5rem; border-radius: 0.25rem; font-size: 0.75rem;">
                    #${codigo}
                  </span>
                  ${esRetornable ? `
                    <span style="background: #dbeafe; color: #1e40af; padding: 0.125rem 0.5rem; border-radius: 0.25rem; font-size: 0.75rem; font-weight: 500;">
                      üîÑ Retornable
                    </span>
                  ` : ''}
                </div>

                <div style="display: flex; gap: 1rem; align-items: center;">
                  <div style="display: flex; align-items: center; gap: 0.25rem;">
                    <span style="color: #059669; font-weight: 600; font-size: 1.125rem;">$${precio.toFixed(2)}</span>
                  </div>

                  <div style="display: flex; align-items: center; gap: 0.25rem;">
                    <span style="color: #6b7280; font-size: 0.875rem;">Stock:</span>
                    <span style="color: ${stock > 0 ? '#059669' : '#dc2626'}; font-weight: 600; font-size: 0.875rem;">
                      ${stock} ${stock === 1 ? 'unidad' : 'unidades'}
                    </span>
                  </div>
                </div>
              </div>

              <div style="display: flex; gap: 0.5rem; margin-left: 1rem;">
                <button
                  onclick="editProduct(${id})"
                  style="padding: 0.5rem; background: #3b82f6; color: white; border: none; border-radius: 0.375rem; cursor: pointer; display: flex; align-items: center; gap: 0.25rem; font-size: 0.875rem;"
                  title="Editar producto"
                >
                  <svg width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M12.146.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1 0 .708L10.5 8.207l-3-3L12.146.146zM11.207 9l-3-3L2.5 11.707V14.5a.5.5 0 0 0 .5.5h2.793L11.207 9z"/>
                  </svg>
                  Editar
                </button>

                <button
                  onclick="deleteProduct(${id})"
                  style="padding: 0.5rem; background: #ef4444; color: white; border: none; border-radius: 0.375rem; cursor: pointer; display: flex; align-items: center; gap: 0.25rem; font-size: 0.875rem;"
                  title="Eliminar producto"
                >
                  <svg width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
                    <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
                  </svg>
                  Eliminar
                </button>
              </div>
            </div>
          </div>
        `;
      }).join('')}
    </div>
  `;

  contentArea.innerHTML = html;

  // Pasar los productos al modal para que pueda acceder a ellos
  if (window.productModal) {
    window.productModal.setCurrentProducts(productos);
  }
}

// Cargar informes con dise√±o moderno
async function loadInformes() {
  const contentArea = document.getElementById('contentArea');

  const html = `
    <div class="informes-section">
      <div class="informes-header">
        <div class="header-content">
          <h2 class="section-title">
            <span class="icon">üìä</span>
            Informes de Ventas
          </h2>
          <p class="section-subtitle">Analiza el rendimiento de tu negocio con reportes detallados</p>
        </div>
      </div>

      <div class="informes-container">
        <!-- Panel de configuraci√≥n -->
        <div class="config-panel">
          <div class="config-header">
            <h3>‚öôÔ∏è Configuraci√≥n del Informe</h3>
          </div>
          
          <div class="config-form">
            <div class="form-row">
              <div class="form-group">
                <label for="fechaDesde" class="form-label">
                  <span class="label-icon">üìÖ</span>
                  Fecha Desde
                </label>
                <input 
                  type="date" 
                  id="fechaDesde" 
                  class="form-input date-input"
                  required
                >
              </div>
              
              <div class="form-group">
                <label for="fechaHasta" class="form-label">
                  <span class="label-icon">üìÖ</span>
                  Fecha Hasta
                </label>
                <input 
                  type="date" 
                  id="fechaHasta" 
                  class="form-input date-input"
                  required
                >
              </div>
            </div>
            
            <div class="form-row">
              <div class="form-group">
                <label for="tipoInforme" class="form-label">
                  <span class="label-icon">üìã</span>
                  Tipo de Informe
                </label>
                            <div class="modern-select tipo-informe-select">
              <select id="tipoInforme">
                <option value="resumen">üìà Resumen General</option>
                <option value="detallado">üë• Detalle por Cliente</option>
              </select>
            </div>
              </div>
              
              <div class="form-group">
                <button 
                  onclick="window.generarInforme()" 
                  class="btn-generate"
                  id="btnGenerarInforme"
                >
                  <span class="btn-icon">üöÄ</span>
                  Generar Informe
                </button>
              </div>
            </div>
          </div>
        </div>

        <!-- √Årea de resultados -->
        <div class="results-area">
          <div id="informeResultados" class="results-container">
            <div class="empty-state">
              <div class="empty-icon">üìä</div>
              <h4>Selecciona las fechas y genera tu informe</h4>
              <p>Configura el per√≠odo de an√°lisis y el tipo de informe que deseas generar</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  `;

  contentArea.innerHTML = html;
  
  // Establecer fechas por defecto (√∫ltimos 30 d√≠as)
  const hoy = new Date();
  const hace30Dias = new Date();
  hace30Dias.setDate(hoy.getDate() - 30);
  
  const fechaDesde = document.getElementById('fechaDesde');
  const fechaHasta = document.getElementById('fechaHasta');
  
  if (fechaDesde && fechaHasta) {
    fechaDesde.value = hace30Dias.toISOString().split('T')[0];
    fechaHasta.value = hoy.toISOString().split('T')[0];
  }
}

// Funci√≥n para generar informes
async function generarInforme() {
  console.log('üöÄ generarInforme() ejecutada');
  
  const fechaDesde = document.getElementById('fechaDesde')?.value;
  const fechaHasta = document.getElementById('fechaHasta')?.value;
  const tipoInforme = document.getElementById('tipoInforme')?.value;
  const resultadosDiv = document.getElementById('informeResultados');

  console.log('üìã Datos del formulario:', { fechaDesde, fechaHasta, tipoInforme });

  if (!fechaDesde || !fechaHasta) {
    alert('Por favor selecciona ambas fechas');
    return;
  }

  if (new Date(fechaDesde) > new Date(fechaHasta)) {
    alert('La fecha desde no puede ser mayor a la fecha hasta');
    return;
  }

  try {
    // Mostrar loading
    resultadosDiv.innerHTML = `
      <div class="loading-state">
        <div class="spinner"></div>
        <p>Generando informe...</p>
      </div>
    `;

    const token = localStorage.getItem('token');
    const response = await fetch(`/api/informes/ventas?fechaDesde=${fechaDesde}&fechaHasta=${fechaHasta}&tipo=${tipoInforme}`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });

    if (!response.ok) {
      throw new Error('Error al generar el informe');
    }

    const datos = await response.json();
    mostrarResultadosInforme(datos, tipoInforme);

  } catch (error) {
    console.error('Error generando informe:', error);
    resultadosDiv.innerHTML = `
      <div class="error-state">
        <div class="error-icon">‚ö†Ô∏è</div>
        <h4>Error al generar informe</h4>
        <p>${error.message}</p>
      </div>
    `;
  }
}

// Funci√≥n para mostrar los resultados del informe
function mostrarResultadosInforme(datos, tipoInforme) {
  const resultadosDiv = document.getElementById('informeResultados');
  
  if (tipoInforme === 'resumen') {
    mostrarInformeResumen(datos, resultadosDiv);
  } else {
    mostrarInformeDetallado(datos, resultadosDiv);
  }
}



// Variables globales para productos
let currentProducts = [];
let editingProductId = null;
let searchTimeout = null;
let currentProductFilters = { search: '', estado: 'all' };

// Variables globales para clientes
let currentClients = [];
let editingClientId = null;
let clientSearchTimeout = null;

// ========== FUNCIONES PARA PRODUCTOS ==========

// Funci√≥n de debounce para la b√∫squeda de productos
function debounceSearch(searchTerm) {
  // Limpiar el timeout anterior
  if (searchTimeout) {
    clearTimeout(searchTimeout);
  }

  // Establecer un nuevo timeout
  searchTimeout = setTimeout(() => {
    searchProducts(searchTerm);
  }, 300); // Esperar 300ms despu√©s de que el usuario deje de escribir
}

// Limpiar b√∫squeda de productos
function clearSearch() {
  const searchInput = document.getElementById('searchProducts');
  if (searchInput) {
    searchInput.value = '';
    searchProducts(''); // Mostrar todos los productos
  }
}

// Funci√≥n para editar producto
function editProduct(productId) {
  console.log('‚úèÔ∏è Editando producto ID:', productId);
  console.log('üìã Productos disponibles:', currentProducts.length);

  const producto = currentProducts.find(p => {
    const id = p.codigo || p.id;
    console.log('üîç Comparando:', id, 'con', productId);
    return id == productId;
  });

  if (!producto) {
    console.error('‚ùå Producto no encontrado:', productId);
    alert('Producto no encontrado');
    return;
  }

  console.log('‚úÖ Producto encontrado:', producto);

  // Usar el modal component
  if (window.productModal) {
    window.productModal.show(producto);
  } else {
    console.error('‚ùå ProductModal no est√° disponible');
    alert('Error: Modal no disponible');
  }
}

// Eliminar producto
async function deleteProduct(productId) {
  console.log('üóëÔ∏è Eliminando producto ID:', productId);

  const producto = currentProducts.find(p => (p.codigo || p.id) == productId);
  const nombreProducto = producto ? (producto.descripcion || `Producto #${productId}`) : `Producto #${productId}`;

  if (!confirm(`¬øEst√°s seguro de que quieres desactivar "${nombreProducto}"?\n\nEl producto se marcar√° como inactivo y no aparecer√° en nuevos pedidos.`)) {
    return;
  }

  const token = localStorage.getItem('token');

  try {
    console.log('üì° Enviando petici√≥n DELETE...');
    const response = await fetch(`/api/productos/${productId}`, {
      method: 'DELETE',
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Error del servidor:', errorText);
      throw new Error(`Error ${response.status}: ${errorText}`);
    }

    console.log('‚úÖ Producto desactivado correctamente');

    // Mostrar mensaje de √©xito
    showSuccessMessage('Producto desactivado correctamente');

    // Recargar la lista
    loadProductosData();

  } catch (error) {
    console.error('üí• Error eliminando producto:', error);
    showErrorMessage('Error eliminando producto: ' + error.message);
  }
}

// Funciones para mostrar mensajes
function showSuccessMessage(message) {
  const messageDiv = document.createElement('div');
  messageDiv.style.cssText = `
    position: fixed;
    top: 20px;
    right: 20px;
    background: #10b981;
    color: white;
    padding: 1rem 1.5rem;
    border-radius: 0.5rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    z-index: 10000;
    font-weight: 500;
  `;
  messageDiv.textContent = message;

  document.body.appendChild(messageDiv);

  setTimeout(() => {
    messageDiv.remove();
  }, 3000);
}

function showErrorMessage(message) {
  const messageDiv = document.createElement('div');
  messageDiv.style.cssText = `
    position: fixed;
    top: 20px;
    right: 20px;
    background: #ef4444;
    color: white;
    padding: 1rem 1.5rem;
    border-radius: 0.5rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    z-index: 10000;
    font-weight: 500;
  `;
  messageDiv.textContent = message;

  document.body.appendChild(messageDiv);

  setTimeout(() => {
    messageDiv.remove();
  }, 5000);
}

// Buscar productos
async function searchProducts(searchTerm: string) {
  console.log('üîç Buscando productos:', searchTerm);
  currentProductFilters.search = searchTerm;
  await applyProductFilters();
}

// Filtrar productos por estado (activo/inactivo)
async function filterProductosByEstado(estado?: string) {
  const estadoFilter = estado || (document.getElementById('filterProductosEstado') as HTMLSelectElement)?.value || 'todos';
  console.log('üîç Filtrando productos por estado:', estadoFilter);
  currentProductFilters.estado = estadoFilter;
  await applyProductFilters();
}

// Aplicar filtros de productos
async function applyProductFilters() {
  console.log('üîç Aplicando filtros de productos:', currentProductFilters);
  const token = localStorage.getItem('token');

  try {
    // Primero cargar todos los productos
    const response = await fetch('/api/productos', {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Error del servidor:', errorText);
      throw new Error(`Error ${response.status}: ${errorText}`);
    }

    let productos = await response.json();
    console.log('‚úÖ Productos cargados:', productos.length);

    // Aplicar filtro de b√∫squeda (si hay)
    if (currentProductFilters.search && currentProductFilters.search.trim()) {
      const searchTerm = currentProductFilters.search.toLowerCase();
      productos = productos.filter(producto => 
        (producto.descripcion || producto.nombre || '').toLowerCase().includes(searchTerm)
      );
      console.log('üîç Productos despu√©s de b√∫squeda:', productos.length);
    }

    // Aplicar filtro de estado
    if (currentProductFilters.estado !== 'todos') {
      if (currentProductFilters.estado === 'activos') {
        productos = productos.filter(producto => producto.activo === 1);
      } else if (currentProductFilters.estado === 'inactivos') {
        productos = productos.filter(producto => producto.activo === 0);
      }
      console.log('üîç Productos despu√©s de filtro de estado:', productos.length);
    }

    currentProducts = productos;
    renderProductsList(productos);
  } catch (error) {
    console.error('üí• Error aplicando filtros:', error);
    // En caso de error, mostrar todos los productos
    loadProductosData();
  }
}

// Limpiar filtros de productos
function clearProductosFilters() {
  console.log('üßπ Limpiando filtros de productos');
  
  // Limpiar campos de filtro
  const searchInput = document.getElementById('productosSearch') as HTMLInputElement;
  const estadoFilter = document.getElementById('filterProductosEstado') as HTMLSelectElement;
  
  if (searchInput) searchInput.value = '';
  if (estadoFilter) estadoFilter.value = 'todos';
  
  // Resetear filtros
  currentProductFilters = { search: '', estado: 'todos' };
  
  // Recargar productos sin filtros
  loadProductosData();
}

// Renderizar lista de productos con dise√±o moderno
function renderProductsList(productos) {
  const productsList = document.getElementById('productosList');
  if (!productsList) return;
  
  if (productos.length === 0) {
    productsList.innerHTML = `
      <div class="empty-state">
        <div class="empty-icon">üì¶</div>
        <h4>No hay productos registrados</h4>
        <p>Crea tu primer producto para comenzar</p>
      </div>
    `;
    return;
  }
  
  // Grid de productos con tarjetas modernas
  productsList.innerHTML = `
    <div class="products-grid">
      ${productos.map(producto => `
        <div class="product-card">
          <div class="product-header">
            <h4 class="product-title">
              ${producto.descripcion || producto.nombre || producto.name || 'Sin nombre'}
            </h4>
            <span class="product-status ${producto.activo ? 'active' : 'inactive'}">
              ${producto.activo ? 'Activo' : 'Inactivo'}
            </span>
          </div>
          
          <div class="product-info">
            <div class="product-detail">
              <span class="detail-label">C√≥digo</span>
              <span class="detail-value">${producto.codigo || producto.id}</span>
            </div>
            
            <div class="product-detail">
              <span class="detail-label">Precio</span>
              <span class="detail-value price">$${parseFloat(producto.precio || producto.price || 0).toFixed(2)}</span>
            </div>
            
            <div class="product-detail">
              <span class="detail-label">Stock</span>
              <span class="detail-value stock">${producto.stock || producto.quantity || 0}</span>
            </div>
            
            <div class="product-detail">
              <span class="detail-label">Tipo</span>
              <span class="detail-value retornable">
                ${producto.esRetornable ? 'üîÑ Retornable' : 'üì¶ No retornable'}
              </span>
            </div>
          </div>
          
          <div class="product-actions">
            <button onclick="editProductInline(${producto.codigo || producto.id})" class="btn-edit">
              ‚úèÔ∏è Editar
            </button>
            ${producto.activo ? 
              `<button onclick="deleteProductInline(${producto.codigo || producto.id})" class="btn-delete">
                üóëÔ∏è Eliminar
              </button>` : 
              `<button onclick="activateProductInline(${producto.codigo || producto.id})" class="btn-activate">
                ‚úÖ Activar
              </button>`
            }
          </div>
        </div>
      `).join('')}
    </div>
  `;
}

// Mostrar modal para crear producto
function showCreateProductModal() {
  editingProductId = null;
  const modalTitle = document.getElementById('modalTitle');
  const productForm = document.getElementById('productForm') as HTMLFormElement;
  const productModal = document.getElementById('productModal');
  
  if (modalTitle) modalTitle.textContent = 'Nuevo Producto';
  if (productForm) productForm.reset();
  
  // Configurar valores por defecto para nuevo producto
  const productRetornable = document.getElementById('productRetornable') as HTMLInputElement;
  const productActivo = document.getElementById('productActivo') as HTMLInputElement;
  
  if (productRetornable) productRetornable.checked = false; // Por defecto no retornable
  if (productActivo) productActivo.checked = true; // Por defecto activo
  
  if (productModal) productModal.classList.add('show');
}

// Mostrar modal para editar producto
function editProductInline(productId: any) {
  const producto = currentProducts.find(p => (p.codigo || p.id) == productId);
  if (!producto) return;
  
  editingProductId = productId;
  
  const modalTitle = document.getElementById('modalTitle');
  const productName = document.getElementById('productName') as HTMLInputElement;
  const productPrice = document.getElementById('productPrice') as HTMLInputElement;
  const productStock = document.getElementById('productStock') as HTMLInputElement;
  const productRetornable = document.getElementById('productRetornable') as HTMLInputElement;
  const productActivo = document.getElementById('productActivo') as HTMLInputElement;
  const productModal = document.getElementById('productModal');
  
  if (modalTitle) modalTitle.textContent = 'Editar Producto';
  if (productName) productName.value = producto.descripcion || producto.nombre || producto.name || '';
  if (productPrice) productPrice.value = producto.precio || producto.price || '';
  if (productStock) productStock.value = producto.stock || producto.quantity || '';
  if (productRetornable) productRetornable.checked = !!(producto.esRetornable);
  if (productActivo) productActivo.checked = !!(producto.activo);
  if (productModal) productModal.classList.add('show');
}

// Hacer la funci√≥n disponible globalmente
window.editProductInline = editProductInline;

// Cerrar modal
function closeProductModal() {
  const productModal = document.getElementById('productModal');
  if (productModal) productModal.classList.remove('show');
  editingProductId = null;
}

// Manejar env√≠o del formulario
async function handleProductSubmit(e) {
  e.preventDefault();
  
  const formData = new FormData(e.target);
  const productData = {
    descripcion: formData.get('nombre'), // El campo "nombre" del form se mapea a "descripcion" en la BD
    precio: parseFloat(formData.get('precio')),
    stock: parseInt(formData.get('stock')),
    esRetornable: formData.get('esRetornable') ? 1 : 0, // Convertir checkbox a 1/0
    activo: formData.get('activo') ? 1 : 0 // Convertir checkbox a 1/0
  };
  
  const token = localStorage.getItem('token');
  
  try {
    let response;
    const isEditing = !!editingProductId;
    
    if (isEditing) {
      response = await fetch(`/api/productos/${editingProductId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(productData)
      });
    } else {
      response = await fetch('/api/productos', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(productData)
      });
    }
    
    if (!response.ok) {
      throw new Error('Error guardando producto');
    }
    
    const result = await response.json();
    
    closeProductModal();
    
    // Emitir evento para actualizaci√≥n reactiva
    if (window.eventBus && window.EVENTS) {
      if (isEditing) {
        window.eventBus.emit(window.EVENTS.PRODUCTO_UPDATED, {
          id: editingProductId,
          producto: { ...productData, codigo: editingProductId }
        });
      } else {
        window.eventBus.emit(window.EVENTS.PRODUCTO_CREATED, {
          producto: result
        });
      }
    }
    
    // Mostrar mensaje de √©xito
    showSuccessMessage(isEditing ? 'Producto actualizado correctamente' : 'Producto creado correctamente');
    
  } catch (error) {
    console.error('Error:', error);
    showErrorMessage('Error guardando producto: ' + error.message);
  }
}

// Eliminar producto (versi√≥n inline)
async function deleteProductInline(productId) {
  if (!confirm('¬øEst√°s seguro de que quieres desactivar este producto?\n\nEl producto se marcar√° como inactivo y no aparecer√° en nuevos pedidos.')) {
    return;
  }
  
  const token = localStorage.getItem('token');
  
  try {
    const response = await fetch(`/api/productos/${productId}`, {
      method: 'DELETE',
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    
    if (!response.ok) {
      throw new Error('Error eliminando producto');
    }
    
    // Emitir evento para actualizaci√≥n reactiva
    if (window.eventBus && window.EVENTS) {
      window.eventBus.emit(window.EVENTS.PRODUCTO_DELETED, {
        id: productId
      });
    }
    
    showSuccessMessage('Producto desactivado correctamente');
    
  } catch (error) {
    console.error('Error:', error);
    showErrorMessage('Error eliminando producto: ' + error.message);
  }
}

// Activar producto (versi√≥n inline)
async function activateProductInline(productId) {
  if (!confirm('¬øEst√°s seguro de que quieres activar este producto?\n\nEl producto volver√° a estar disponible para nuevos pedidos.')) {
    return;
  }
  
  const token = localStorage.getItem('token');
  
  try {
    const response = await fetch(`/api/productos/${productId}/activate`, {
      method: 'PUT',
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    
    if (!response.ok) {
      throw new Error('Error activando producto');
    }
    
    // Emitir evento para actualizaci√≥n reactiva
    if (window.eventBus && window.EVENTS) {
      window.eventBus.emit(window.EVENTS.PRODUCTO_ACTIVATED, {
        id: productId
      });
    }
    
    showSuccessMessage('Producto activado correctamente');
    
    // Recargar la lista para actualizar los botones
    loadProductosData();
    
  } catch (error) {
    console.error('Error:', error);
    showErrorMessage('Error activando producto: ' + error.message);
  }
}

// Funci√≥n searchProducts ya definida arriba

// Hacer las funciones de productos disponibles globalmente
window.showCreateProductModal = showCreateProductModal;
window.deleteProductInline = deleteProductInline;
window.activateProductInline = activateProductInline;
window.closeProductModal = closeProductModal;
window.handleProductSubmit = handleProductSubmit;
window.searchProducts = searchProducts;
window.renderProductsList = renderProductsList;
window.filterProductosByEstado = filterProductosByEstado;
window.searchProducts = searchProducts;
window.clearProductosFilters = clearProductosFilters;
window.applyProductFilters = applyProductFilters;

// Funci√≥n para configurar event listeners de productos
function setupProductosEventListeners() {
  console.log('üîß Configurando event listeners de productos (setupProductosEventListeners)...');
  
  // B√∫squeda con debounce
  const searchInput = document.getElementById('productosSearch');
  if (searchInput) {
    console.log('‚úÖ Input de b√∫squeda encontrado en setupProductosEventListeners');
    let searchTimeout;
    
    searchInput.addEventListener('input', function() {
      console.log('üîç Input de b√∫squeda detectado:', this.value);
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(() => {
        console.log('üîç Ejecutando b√∫squeda:', this.value);
        if (window.searchProducts) {
          window.searchProducts(this.value);
        } else {
          console.error('‚ùå window.searchProducts no est√° disponible');
        }
      }, 300);
    });
    console.log('‚úÖ Event listener de b√∫squeda configurado');
  } else {
    console.error('‚ùå No se encontr√≥ el input de b√∫squeda');
  }

  // Filtro de estado
  const estadoFilter = document.getElementById('filterProductosEstado');
  if (estadoFilter) {
    console.log('‚úÖ Selector de estado encontrado en setupProductosEventListeners');
    estadoFilter.addEventListener('change', function() {
      console.log('üîç Cambio de estado detectado:', this.value);
      if (window.filterProductosByEstado) {
        window.filterProductosByEstado(this.value);
      } else {
        console.error('‚ùå window.filterProductosByEstado no est√° disponible');
      }
    });
    console.log('‚úÖ Event listener de filtro de estado configurado');
  } else {
    console.error('‚ùå No se encontr√≥ el selector de estado');
  }
}

// Hacer la funci√≥n disponible globalmente
window.setupProductosEventListeners = setupProductosEventListeners;

// Configurar listeners de eventos para actualizaci√≥n reactiva
function setupProductEventListeners() {
  if (window.eventBus && window.EVENTS) {
    // Escuchar cuando se crea un producto
    window.eventBus.on(window.EVENTS.PRODUCTO_CREATED, (data) => {
      console.log('üì¶ Nuevo producto creado, actualizando lista...', data);
      loadProductosData();
    });

    // Escuchar cuando se actualiza un producto
    window.eventBus.on(window.EVENTS.PRODUCTO_UPDATED, (data) => {
      console.log('üì¶ Producto actualizado, actualizando lista...', data);
      
      // Actualizaci√≥n reactiva: actualizar solo el producto espec√≠fico
      const producto = data.producto;
      const productIndex = currentProducts.findIndex(p => (p.codigo || p.id) == data.id);
      
      if (productIndex !== -1) {
        // Actualizar el producto en el array
        currentProducts[productIndex] = { ...currentProducts[productIndex], ...producto };
        // Re-renderizar la lista
        renderProductsList(currentProducts);
      } else {
        // Si no se encuentra, recargar toda la lista
        loadProductosData();
      }
    });

    // Escuchar cuando se elimina un producto
    window.eventBus.on(window.EVENTS.PRODUCTO_DELETED, (data) => {
      console.log('üì¶ Producto eliminado, actualizando lista...', data);
      
      // Actualizaci√≥n reactiva: remover el producto del array
      currentProducts = currentProducts.filter(p => (p.codigo || p.id) != data.id);
      renderProductsList(currentProducts);
    });

    // Escuchar cuando se activa un producto
    window.eventBus.on(window.EVENTS.PRODUCTO_ACTIVATED, (data) => {
      console.log('üì¶ Producto activado, actualizando lista...', data);
      
      // Actualizaci√≥n reactiva: actualizar el estado del producto
      const productIndex = currentProducts.findIndex(p => (p.codigo || p.id) == data.id);
      if (productIndex !== -1) {
        currentProducts[productIndex].activo = 1;
        renderProductsList(currentProducts);
      } else {
        // Si no se encuentra, recargar toda la lista
        loadProductosData();
      }
    });

    console.log('‚úÖ Event listeners de productos configurados');
  }
}

// ========== FUNCIONES PARA CLIENTES ==========

// Buscar clientes
async function searchClients(searchTerm) {
  console.log('üîç Buscando clientes:', searchTerm);
  const token = localStorage.getItem('token');

  try {
    let url = '/api/clientes';
    if (searchTerm && searchTerm.trim()) {
      url += `?search=${encodeURIComponent(searchTerm.trim())}`;
    }

    console.log('üì° URL de b√∫squeda:', url);

    const response = await fetch(url, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Error del servidor:', errorText);
      throw new Error(`Error ${response.status}: ${errorText}`);
    }

    const clientes = await response.json();
    console.log('‚úÖ Clientes encontrados:', clientes.length);

    currentClients = clientes;
    renderClientes(clientes);
  } catch (error) {
    console.error('üí• Error buscando clientes:', error);
    // En caso de error, mostrar todos los clientes
    loadClientes();
  }
}

// Funci√≥n de debounce para la b√∫squeda de clientes
function debounceSearchClients(searchTerm) {
  // Limpiar el timeout anterior
  if (clientSearchTimeout) {
    clearTimeout(clientSearchTimeout);
  }

  // Establecer un nuevo timeout
  clientSearchTimeout = setTimeout(() => {
    searchClients(searchTerm);
  }, 300); // Esperar 300ms despu√©s de que el usuario deje de escribir
}

// Limpiar b√∫squeda de clientes
function clearClientSearch() {
  const searchInput = document.getElementById('searchClients');
  if (searchInput) {
    searchInput.value = '';
    searchClients(''); // Mostrar todos los clientes
  }
}

// Funci√≥n para editar cliente
function editClient(clientId) {
  console.log('‚úèÔ∏è Editando cliente ID:', clientId);
  console.log('üìã Clientes disponibles:', currentClients.length);

  const cliente = currentClients.find(c => {
    const id = c.codigo || c.id;
    console.log('üîç Comparando:', id, 'con', clientId);
    return id == clientId;
  });

  if (!cliente) {
    console.error('‚ùå Cliente no encontrado:', clientId);
    alert('Cliente no encontrado');
    return;
  }

  console.log('‚úÖ Cliente encontrado:', cliente);

  // Usar el modal component
  if (window.clientModal) {
    window.clientModal.show(cliente);
  } else {
    console.error('‚ùå ClientModal no est√° disponible');
    alert('Error: Modal no disponible');
  }
}

// Mostrar ubicaci√≥n del cliente en el mapa
function showClientLocation(clientId) {
  console.log('üìç Mostrando ubicaci√≥n del cliente ID:', clientId);

  const cliente = currentClients.find(c => (c.codigo || c.id) == clientId);

  if (!cliente) {
    console.error('‚ùå Cliente no encontrado:', clientId);
    alert('Cliente no encontrado');
    return;
  }

  if (!cliente.latitud || !cliente.longitud) {
    alert('Este cliente no tiene ubicaci√≥n GPS registrada.');
    return;
  }

  const nombreCompleto = cliente.nombreCompleto || `${cliente.nombre || ''} ${cliente.apellido || ''}`.trim() || 'Cliente sin nombre';

  // Abrir Google Maps con la ubicaci√≥n
  const googleMapsUrl = `https://www.google.com/maps?q=${cliente.latitud},${cliente.longitud}&z=15&t=m`;
  window.open(googleMapsUrl, '_blank');

  // Tambi√©n mostrar informaci√≥n en consola
  console.log(`üìç Ubicaci√≥n de ${nombreCompleto}:`, {
    latitud: cliente.latitud,
    longitud: cliente.longitud,
    direccion: cliente.direccion
  });
}

// Mostrar cuenta corriente del cliente
function showClientAccount(clientId) {
  console.log('üí∞ Mostrando cuenta corriente del cliente ID:', clientId);

  const cliente = currentClients.find(c => (c.codigo || c.id) == clientId);

  if (!cliente) {
    console.error('‚ùå Cliente no encontrado:', clientId);
    alert('Cliente no encontrado');
    return;
  }

  const nombreCompleto = cliente.nombreCompleto || `${cliente.nombre || ''} ${cliente.apellido || ''}`.trim() || 'Cliente sin nombre';
  const saldoDinero = parseFloat(cliente.saldoDinero || 0);
  const saldoRetornables = parseInt(cliente.saldoRetornables || 0);

  // TODO: Implementar modal de cuenta corriente detallada
  alert(`Cuenta Corriente - ${nombreCompleto}\n\nSaldo en dinero: $${saldoDinero.toFixed(2)}\nRetornables pendientes: ${saldoRetornables} unidades\n\n(Funcionalidad detallada en desarrollo...)`);
}

// Eliminar cliente
async function deleteClient(clientId) {
  console.log('üóëÔ∏è Eliminando cliente ID:', clientId);

  const cliente = currentClients.find(c => (c.codigo || c.id) == clientId);
  const nombreCliente = cliente ? (cliente.nombreCompleto || `Cliente #${clientId}`) : `Cliente #${clientId}`;

  if (!confirm(`¬øEst√°s seguro de que quieres eliminar "${nombreCliente}"?\n\nEsta acci√≥n no se puede deshacer.`)) {
    return;
  }

  const token = localStorage.getItem('token');

  try {
    console.log('üì° Enviando petici√≥n DELETE...');
    const response = await fetch(`/api/clientes/${clientId}`, {
      method: 'DELETE',
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Error del servidor:', errorText);
      throw new Error(`Error ${response.status}: ${errorText}`);
    }

    console.log('‚úÖ Cliente eliminado correctamente');

    // Mostrar mensaje de √©xito
    showSuccessMessage('Cliente eliminado correctamente');

    // Recargar la lista
    loadClientes();

  } catch (error) {
    console.error('üí• Error eliminando cliente:', error);
    showErrorMessage('Error eliminando cliente: ' + error.message);
  }
}

// Mostrar modal para crear cliente
function showCreateClientModal() {
  if (window.clientModal) {
    window.clientModal.show();
  } else {
    console.error('‚ùå ClientModal no est√° disponible');
    alert('Error: Modal no disponible');
  }
}

// Funci√≥n para establecer clientes actuales (usada por renderClientes)
function setCurrentClients(clients) {
  currentClients = clients;
}

// Asegurar que las funciones est√©n disponibles globalmente
window.debounceSearch = debounceSearch;
window.clearSearch = clearSearch;
window.editProduct = editProduct;
window.deleteProduct = deleteProduct;
window.showSuccessMessage = showSuccessMessage;
window.showErrorMessage = showErrorMessage;

// Funciones de pedidos
window.loadPedidos = loadPedidos;
window.clearPedidosFilters = clearPedidosFilters;
window.viewPedido = viewPedido;
window.editPedido = editPedido;
window.entregarPedido = entregarPedido;

// Funciones de clientes
window.loadClientes = loadClientes;
window.clearClientSearch = clearClientSearch;
window.editClient = editClient;
window.showClientLocation = showClientLocation;
window.showClientAccount = showClientAccount;
window.deleteClient = deleteClient;

// Funciones de productos (ya definidas arriba)
window.loadProductosData = loadProductosData;

// ========== FUNCIONES PARA PEDIDOS ==========

// Mostrar modal para crear pedido
function showCreateOrderModal() {
  if (window.orderModal) {
    window.orderModal.show();
  } else {
    console.error('‚ùå OrderModal no est√° disponible');
    alert('Error: Modal no disponible');
  }
}

// Mostrar modal del mapa de pedidos
function showMapModal() {
  console.log('üó∫Ô∏è Abriendo mapa de pedidos...');

  if (window.mapModal) {
    window.mapModal.show();
  } else {
    console.error('‚ùå MapModal no est√° disponible');
    alert('Error: Modal del mapa no disponible');
  }
}

// Entregar pedido
function entregarPedido(pedidoId) {
  console.log('üöö Iniciando entrega del pedido:', pedidoId);
  console.log('üìã currentPedidos disponible:', !!window.currentPedidos);
  console.log('üìã allPedidos disponible:', !!window.allPedidos);
  console.log('üìã Cantidad currentPedidos:', window.currentPedidos?.length || 0);
  console.log('üìã Cantidad allPedidos:', window.allPedidos?.length || 0);

  if (window.deliveryModal) {
    window.deliveryModal.show(pedidoId);
  } else {
    console.error('‚ùå DeliveryModal no est√° disponible');
    alert('Error: Modal de entrega no disponible');
  }
}

// Funciones de clientes
window.searchClients = searchClients;
window.debounceSearchClients = debounceSearchClients;
window.clearClientSearch = clearClientSearch;
window.editClient = editClient;
window.showClientLocation = showClientLocation;
window.showClientAccount = showClientAccount;
window.deleteClient = deleteClient;
window.showCreateClientModal = showCreateClientModal;
window.setCurrentClients = setCurrentClients;

// Funciones de pagos
window.showClientPayment = showClientPayment;
window.closePaymentModal = closePaymentModal;
window.processClientPayment = processClientPayment;

// Funciones de retornables
window.showReturnablesModal = showReturnablesModal;
window.closeReturnablesModal = closeReturnablesModal;
window.processReturnablesReturn = processReturnablesReturn;

// Funciones de productos
window.debounceSearch = debounceSearch;
window.clearSearch = clearSearch;
window.editProduct = editProduct;
window.deleteProduct = deleteProduct;
window.showSuccessMessage = showSuccessMessage;
window.showErrorMessage = showErrorMessage;

// Funciones de pedidos
window.showCreateOrderModal = showCreateOrderModal;
window.showMapModal = showMapModal;
window.entregarPedido = entregarPedido;
window.getPedidoItems = getPedidoItems;
window.viewPedido = viewPedido;
window.filterPedidos = filterPedidos;
window.clearPedidosFilters = clearPedidosFilters;

// Funciones de autenticaci√≥n
window.logout = logout;

// Funci√≥n para debuggear tipos de pago
window.debugTipoPago = async function(tipoPagoId) {
  const token = localStorage.getItem('token');
  try {
    const response = await fetch(`/api/tiposdepago/debug/${tipoPagoId}`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    const data = await response.json();
    console.log('üîç DEBUG TIPO DE PAGO:', data);
    return data;
  } catch (error) {
    console.error('‚ùå Error debuggeando tipo de pago:', error);
  }
};

// Mostrar modal de pago para cliente
async function showClientPayment(clientId) {
  console.log('üí∞ Mostrando modal de pago para cliente ID:', clientId);

  const cliente = currentClients.find(c => (c.codigo || c.id) == clientId);

  if (!cliente) {
    console.error('‚ùå Cliente no encontrado:', clientId);
    alert('Cliente no encontrado');
    return;
  }

  const nombreCompleto = cliente.nombreCompleto || `${cliente.nombre || ''} ${cliente.apellido || ''}`.trim() || 'Cliente sin nombre';
  const saldoActual = parseFloat(cliente.saldo || 0);

  // Cargar tipos de pago que NO aplican saldo (aplicaSaldo = 0)
  let tiposPagoDisponibles = [];
  try {
    const token = localStorage.getItem('token');
    const response = await fetch('/api/tiposdepago', {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    
    if (response.ok) {
      const todosLosTipos = await response.json();
      // Filtrar solo los que NO aplican saldo
      tiposPagoDisponibles = todosLosTipos.filter(tipo => {
        // Convertir aplicaSaldo de Buffer a boolean
        const aplicaSaldo = tipo.aplicaSaldo && typeof tipo.aplicaSaldo === 'object' && tipo.aplicaSaldo.type === 'Buffer' 
          ? tipo.aplicaSaldo.data[0] === 1 
          : tipo.aplicaSaldo === 1 || tipo.aplicaSaldo === true;
        
        return !aplicaSaldo; // Solo los que NO aplican saldo
      });
    }
  } catch (error) {
    console.error('‚ùå Error cargando tipos de pago:', error);
  }

  // Crear opciones de tipos de pago
  const opcionesTipoPago = tiposPagoDisponibles.map(tipo => 
    `<option value="${tipo.id}">${tipo.pago}</option>`
  ).join('');

  const modalContent = `
    <div id="paymentModal" class="modal-overlay" style="display: flex;">
      <div class="modal-content" style="max-width: 500px;">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5rem;">
          <h4 class="modal-title">üí∞ Ingresar Pago</h4>
          <button onclick="closePaymentModal()" style="background: none; border: none; font-size: 1.5rem; cursor: pointer; color: #6b7280;">
            √ó
          </button>
        </div>
        
        <div style="margin-bottom: 1.5rem; padding: 1rem; background: #f0f9ff; border: 1px solid #0ea5e9; border-radius: 0.375rem;">
          <div style="margin-bottom: 0.5rem;">
            <strong>üë§ Cliente:</strong> ${nombreCompleto}
          </div>
          <div style="margin-bottom: 0.5rem;">
            <strong>üí∞ Saldo Actual:</strong> $${saldoActual.toFixed(2)}
          </div>
          <div style="font-size: 0.875rem; color: #6b7280;">
            ${saldoActual > 0 ? 'El cliente tiene deuda pendiente' : saldoActual < 0 ? 'El cliente tiene cr√©dito disponible' : 'El cliente no tiene saldo pendiente'}
          </div>
        </div>

        <form id="paymentForm" onsubmit="processClientPayment(event, ${clientId})">
          <div class="form-group">
            <label class="form-label">Tipo de Pago *</label>
            <select id="paymentTipoPago" name="tipoPago" required class="form-input">
              <option value="">Seleccionar tipo de pago...</option>
              ${opcionesTipoPago}
            </select>
            <small style="color: #6b7280; font-size: 0.875rem;">
              Solo se muestran m√©todos de pago que no aplican saldo
            </small>
          </div>

          <div class="form-group">
            <label class="form-label">Monto a Pagar *</label>
            <div style="position: relative;">
              <span style="position: absolute; left: 0.75rem; top: 50%; transform: translateY(-50%); color: #6b7280;">$</span>
              <input type="number" id="paymentMonto" name="monto" step="0.01" min="0.01" required 
                     class="form-input" style="padding-left: 2rem;" placeholder="0.00" />
            </div>
            <small style="color: #6b7280; font-size: 0.875rem;">
              Este monto se restar√° del saldo del cliente
            </small>
          </div>

          <div class="form-group">
            <label class="form-label">Observaciones</label>
            <textarea id="paymentObservaciones" name="observaciones" class="form-input" rows="2"
                      placeholder="Observaciones opcionales sobre el pago"></textarea>
          </div>

          <div class="modal-buttons">
            <button type="button" onclick="closePaymentModal()" class="btn-secondary">
              Cancelar
            </button>
            <button type="submit" class="btn-primary" style="width: auto; padding: 0.5rem 1rem;">
              üí∞ Confirmar Pago
            </button>
          </div>
        </form>
      </div>
    </div>
  `;

  // Agregar el modal al body
  document.body.insertAdjacentHTML('beforeend', modalContent);
}

// Cerrar modal de pago
function closePaymentModal() {
  const modal = document.getElementById('paymentModal');
  if (modal) {
    modal.remove();
  }
}

// Procesar el pago del cliente
async function processClientPayment(event, clientId) {
  event.preventDefault();
  
  const form = event.target;
  const formData = new FormData(form);
  
  const tipoPago = formData.get('tipoPago');
  const monto = parseFloat(formData.get('monto'));
  const observaciones = formData.get('observaciones');

  if (!tipoPago || !monto || monto <= 0) {
    alert('Por favor complete todos los campos correctamente');
    return;
  }

  try {
    const token = localStorage.getItem('token');
    const response = await fetch('/api/pagos/cliente', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        clienteId: clientId,
        tipoPagoId: tipoPago,
        monto: monto,
        observaciones: observaciones || null
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Error ${response.status}: ${errorText}`);
    }

    const resultado = await response.json();
    console.log('‚úÖ Pago procesado:', resultado);

    // Cerrar modal
    closePaymentModal();

    // Mostrar mensaje de √©xito
    alert(`‚úÖ Pago registrado exitosamente\n\nCliente: ${resultado.clienteNombre}\nMonto: $${monto.toFixed(2)}\nNuevo saldo: $${resultado.nuevoSaldo.toFixed(2)}`);

    // Recargar la lista de clientes para mostrar el saldo actualizado
    await loadClientes();

  } catch (error) {
    console.error('‚ùå Error procesando pago:', error);
    alert(`Error procesando pago: ${error.message}`);
  }
}

// Funci√≥n ya integrada en el listener principal de DOMContentLoaded

// Mostrar modal de devoluci√≥n de retornables
async function showReturnablesModal(clientId) {
  console.log('üîÑ Mostrando modal de devoluci√≥n de retornables para cliente ID:', clientId);

  const cliente = currentClients.find(c => (c.codigo || c.id) == clientId);

  if (!cliente) {
    console.error('‚ùå Cliente no encontrado:', clientId);
    alert('Cliente no encontrado');
    return;
  }

  const nombreCompleto = cliente.nombreCompleto || `${cliente.nombre || ''} ${cliente.apellido || ''}`.trim() || 'Cliente sin nombre';
  const retornablesActuales = parseInt(cliente.retornables || 0);

  // Cargar productos retornables
  let productosRetornables = [];
  try {
    const token = localStorage.getItem('token');
    const response = await fetch('/api/productos', {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    
    if (response.ok) {
      const todosLosProductos = await response.json();
      // Filtrar solo productos retornables
      productosRetornables = todosLosProductos.filter(producto => {
        const esRetornable = producto.esRetornable === 1 || producto.esRetornable === true;
        return esRetornable;
      });
    }
  } catch (error) {
    console.error('‚ùå Error cargando productos retornables:', error);
  }

  // Crear opciones de productos retornables
  const opcionesProductos = productosRetornables.map(producto => 
    `<option value="${producto.id}">${producto.descripcion}</option>`
  ).join('');

  const modalContent = `
    <div id="returnablesModal" class="modal-overlay" style="display: flex;">
      <div class="modal-content" style="max-width: 600px;">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5rem;">
          <h4 class="modal-title">üîÑ Devolver Retornables</h4>
          <button onclick="closeReturnablesModal()" style="background: none; border: none; font-size: 1.5rem; cursor: pointer; color: #6b7280;">
            √ó
          </button>
        </div>
        
        <div style="margin-bottom: 1.5rem; padding: 1rem; background: #f0fdf4; border: 1px solid #22c55e; border-radius: 0.375rem;">
          <div style="margin-bottom: 0.5rem;">
            <strong>üë§ Cliente:</strong> ${nombreCompleto}
          </div>
          <div style="margin-bottom: 0.5rem;">
            <strong>üîÑ Retornables Actuales:</strong> ${retornablesActuales} unidades
          </div>
          <div style="font-size: 0.875rem; color: #6b7280;">
            ${retornablesActuales > 0 ? 'El cliente tiene retornables para devolver' : 'El cliente no tiene retornables pendientes'}
          </div>
        </div>

        <form id="returnablesForm" onsubmit="processReturnablesReturn(event, ${clientId})">
          <div class="form-group">
            <label class="form-label">Producto Retornable *</label>
            <select id="returnablesProducto" name="productoId" required class="form-input">
              <option value="">Seleccionar producto...</option>
              ${opcionesProductos}
            </select>
            <small style="color: #6b7280; font-size: 0.875rem;">
              Solo se muestran productos marcados como retornables
            </small>
          </div>

          <div class="form-group">
            <label class="form-label">Cantidad a Devolver *</label>
            <input type="number" id="returnablesCantidad" name="cantidad" min="1" max="${retornablesActuales}" required 
                   class="form-input" placeholder="0" />
            <small style="color: #6b7280; font-size: 0.875rem;">
              M√°ximo: ${retornablesActuales} unidades (retornables actuales del cliente)
            </small>
          </div>

          <div class="form-group">
            <label class="form-label">Observaciones</label>
            <textarea id="returnablesObservaciones" name="observaciones" class="form-input" rows="2"
                      placeholder="Observaciones opcionales sobre la devoluci√≥n"></textarea>
          </div>

          <div class="modal-buttons">
            <button type="button" onclick="closeReturnablesModal()" class="btn-secondary">
              Cancelar
            </button>
            <button type="submit" class="btn-primary" style="width: auto; padding: 0.5rem 1rem; background: #10b981;">
              üîÑ Confirmar Devoluci√≥n
            </button>
          </div>
        </form>
      </div>
    </div>
  `;

  // Agregar el modal al body
  document.body.insertAdjacentHTML('beforeend', modalContent);
}

// Cerrar modal de retornables
function closeReturnablesModal() {
  const modal = document.getElementById('returnablesModal');
  if (modal) {
    modal.remove();
  }
}

// Procesar la devoluci√≥n de retornables
async function processReturnablesReturn(event, clientId) {
  event.preventDefault();
  
  const form = event.target;
  const formData = new FormData(form);
  
  const productoId = formData.get('productoId');
  const cantidad = parseInt(formData.get('cantidad'));
  const observaciones = formData.get('observaciones');

  if (!productoId || !cantidad || cantidad <= 0) {
    alert('Por favor complete todos los campos correctamente');
    return;
  }

  try {
    const token = localStorage.getItem('token');
    const response = await fetch('/api/clientes/retornables/devolver', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        clienteId: clientId,
        productoId: productoId,
        cantidad: cantidad,
        observaciones: observaciones || null
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Error ${response.status}: ${errorText}`);
    }

    const resultado = await response.json();
    console.log('‚úÖ Devoluci√≥n procesada:', resultado);

    // Cerrar modal
    closeReturnablesModal();

    // Mostrar mensaje de √©xito
    alert(`‚úÖ Devoluci√≥n registrada exitosamente\n\nCliente: ${resultado.clienteNombre}\nProducto: ${resultado.productoNombre}\nCantidad: ${cantidad} unidades\nNuevos retornables: ${resultado.nuevosRetornables} unidades`);

    // Recargar la lista de clientes para mostrar los retornables actualizados
    await loadClientes();

  } catch (error) {
    console.error('‚ùå Error procesando devoluci√≥n:', error);
    alert(`Error procesando devoluci√≥n: ${error.message}`);
  }
}
</script>

<!-- Sistema de eventos global -->
<script src="/js/utils/events.js" is:inline></script>

<!-- Cargar los componentes modales -->
<script src="/js/ProductModal.js" is:inline></script>
<script src="/js/ClientModal.js" is:inline></script>
<script src="/js/OrderModal.js" is:inline></script>
<script src="/js/MapModal.js" is:inline></script>
<script src="/js/DeliveryModal.js" is:inline></script>

<!-- Configurar event listeners despu√©s de cargar todo -->
<script is:inline>
// Configurar listeners de eventos para actualizaci√≥n reactiva
function setupEventListeners() {
  if (window.eventBus && window.EVENTS) {
    // Escuchar cuando se crea un nuevo pedido
    window.eventBus.on(window.EVENTS.PEDIDO_CREATED, async (data) => {
      console.log('üì¶ Nuevo pedido creado en index.astro, actualizando lista...', data);

      // Solo actualizar si estamos en la vista de pedidos
      if (window.currentRoute === 'pedidos') {
        try {
          await loadPedidos();
          console.log('‚úÖ Lista de pedidos actualizada reactivamente');
        } catch (error) {
          console.error('‚ùå Error actualizando pedidos:', error);
        }
      }
    });

    // Escuchar cuando se actualiza un pedido
    window.eventBus.on(window.EVENTS.PEDIDO_UPDATED, async (data) => {
      console.log('üì¶ Pedido actualizado en index.astro, actualizando lista...', data);

      // Solo actualizar si estamos en la vista de pedidos
      if (window.currentRoute === 'pedidos') {
        try {
          await loadPedidos();
          console.log('‚úÖ Lista de pedidos actualizada reactivamente');
        } catch (error) {
          console.error('‚ùå Error actualizando pedidos:', error);
        }
      }
    });

    console.log('üì° Event listeners configurados para index.astro');
    return true; // Indicar que se configur√≥ exitosamente
  } else {
    return false; // Indicar que no se pudo configurar
  }
}

// Configurar listeners con l√≠mite de reintentos
let setupAttempts = 0;
const maxAttempts = 10;

function trySetupEventListeners() {
  setupAttempts++;

  if (setupEventListeners()) {
    console.log('‚úÖ Event listeners configurados exitosamente');
    return;
  }

  if (setupAttempts < maxAttempts) {
    console.warn(`‚ö†Ô∏è Sistema de eventos no disponible, reintento ${setupAttempts}/${maxAttempts} en 500ms...`);
    setTimeout(trySetupEventListeners, 500);
  } else {
    console.error('‚ùå No se pudo configurar el sistema de eventos despu√©s de', maxAttempts, 'intentos');
  }
}

// Funci√≥n de desarrollo para saltarse la verificaci√≥n del servidor
window.enableDevMode = function() {
  localStorage.setItem('skipServerCheck', 'true');
  console.log('üîß Modo desarrollo activado. Recarga la p√°gina para aplicar.');
  console.log('Para desactivar: localStorage.removeItem("skipServerCheck")');
};

window.disableDevMode = function() {
  localStorage.removeItem('skipServerCheck');
  console.log('üîß Modo desarrollo desactivado. Recarga la p√°gina para aplicar.');
};

// Funci√≥n de diagn√≥stico
window.diagnosticar = function() {
  console.log('üîç DIAGN√ìSTICO DE LA APLICACI√ìN');
  console.log('================================');
  console.log('‚úÖ Sistema de eventos:', window.eventBus ? 'OK' : '‚ùå NO DISPONIBLE');
  console.log('‚úÖ Eventos definidos:', window.EVENTS ? 'OK' : '‚ùå NO DISPONIBLE');
  console.log('‚úÖ Usuario actual:', currentUser ? 'OK' : '‚ùå NO DEFINIDO');
  console.log('‚úÖ Token:', localStorage.getItem('token') ? 'OK' : '‚ùå NO ENCONTRADO');
  console.log('‚úÖ Ruta actual:', currentRoute || '‚ùå NO DEFINIDA');
  console.log('‚úÖ Modo desarrollo:', localStorage.getItem('skipServerCheck') === 'true' ? 'ACTIVADO' : 'DESACTIVADO');
  console.log('================================');
  
  // Verificar funciones cr√≠ticas
  const funciones = [
    'checkAuth', 'showMainApp', 'loadRoute', 
    'editProductInline', 'deleteProductInline', 'showCreateProductModal',
    'editClient', 'deleteClient', 'showCreateClientModal',
    'viewPedido', 'editPedido', 'entregarPedido'
  ];
  funciones.forEach(func => {
    console.log(`‚úÖ ${func}:`, typeof window[func] === 'function' ? 'OK' : '‚ùå NO DEFINIDA');
  });
};

// Funci√≥n para debuggear tipos de pago
window.debugTipoPago = async function(tipoPagoId) {
  const token = localStorage.getItem('token');
  try {
    const response = await fetch(`/api/tiposdepago/debug/${tipoPagoId}`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    const data = await response.json();
    console.log('üîç DEBUG TIPO DE PAGO:', data);
    return data;
  } catch (error) {
    console.error('‚ùå Error debuggeando tipo de pago:', error);
  }
};

// Funciones de pagos
window.showClientPayment = showClientPayment;
window.closePaymentModal = closePaymentModal;
window.processClientPayment = processClientPayment;



// Funci√≥n ya integrada en el listener principal de DOMContentLoaded
</script>

<style>
/* Estilos espec√≠ficos para Informes */
.informes-container {
  padding: 0;
}

.filters-card {
  background: white;
  border-radius: 12px;
  padding: 1.5rem;
  margin-bottom: 2rem;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  border: 1px solid #e5e7eb;
}

.filters-row {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 1rem;
  align-items: end;
}

.filter-group {
  display: flex;
  flex-direction: column;
}

.filter-group label {
  font-weight: 500;
  color: #374151;
  margin-bottom: 0.5rem;
  font-size: 0.875rem;
}

.filter-input, .filter-select {
  padding: 0.75rem;
  border: 2px solid #e5e7eb;
  border-radius: 8px;
  font-size: 0.875rem;
  transition: border-color 0.2s ease;
}

.filter-input:focus, .filter-select:focus {
  outline: none;
  border-color: #3b82f6;
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

.informe-resultados {
  background: white;
  border-radius: 12px;
  padding: 2rem;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  border: 1px solid #e5e7eb;
  min-height: 200px;
}

.empty-state, .loading-state, .error-state {
  text-align: center;
  padding: 3rem 1rem;
  color: #6b7280;
}

.empty-icon, .error-icon {
  font-size: 3rem;
  margin-bottom: 1rem;
}

.loading-state .spinner {
  width: 40px;
  height: 40px;
  border: 4px solid #f3f4f6;
  border-top: 4px solid #3b82f6;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin: 0 auto 1rem;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.informe-card {
  padding: 0;
}

.informe-card h4 {
  color: #1f2937;
  font-size: 1.25rem;
  font-weight: 600;
  margin-bottom: 1.5rem;
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

/* Estilos para el informe detallado por cliente */
.cliente-card {
  background: white;
  border: 1px solid #e5e7eb;
  border-radius: 12px;
  padding: 1.5rem;
  margin-bottom: 1.5rem;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
}

.cliente-header {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 1.5rem;
  padding-bottom: 1rem;
  border-bottom: 1px solid #f3f4f6;
}

.cliente-info h5 {
  font-size: 1.125rem;
  font-weight: 600;
  color: #1f2937;
  margin: 0 0 0.5rem 0;
}

.cliente-telefono {
  color: #6b7280;
  font-size: 0.875rem;
  margin: 0;
}

.cliente-stats {
  display: flex;
  gap: 1rem;
}

.stat-mini {
  text-align: center;
  padding: 0.5rem;
  background: #f9fafb;
  border-radius: 8px;
  min-width: 80px;
}

.stat-mini .stat-value {
  display: block;
  font-weight: 600;
  color: #1f2937;
  font-size: 0.875rem;
}

.stat-mini .stat-label {
  display: block;
  font-size: 0.75rem;
  color: #6b7280;
  margin-top: 0.25rem;
}

.productos-cliente, .pedidos-cliente {
  margin-top: 1rem;
}

.productos-cliente h6, .pedidos-cliente h6 {
  font-size: 1rem;
  font-weight: 600;
  color: #374151;
  margin: 0 0 1rem 0;
}

.mini-table {
  width: 100%;
  border-collapse: collapse;
  font-size: 0.875rem;
  margin-bottom: 1rem;
}

.mini-table th {
  background: #f9fafb;
  padding: 0.75rem;
  text-align: left;
  font-weight: 600;
  color: #374151;
  border-bottom: 1px solid #e5e7eb;
}

.mini-table td {
  padding: 0.75rem;
  border-bottom: 1px solid #f3f4f6;
}

.mini-table tr:hover {
  background: #f9fafb;
}

.pedidos-list {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.pedido-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0.75rem;
  background: #f9fafb;
  border-radius: 8px;
  font-size: 0.875rem;
}

.pedido-fecha {
  color: #6b7280;
}

.pedido-total {
  font-weight: 600;
  color: #059669;
}

.pedido-items {
  color: #6b7280;
}

.pedido-codigo {
  font-family: monospace;
  color: #6b7280;
  font-size: 0.75rem;
}

.empty-state-mini {
  text-align: center;
  padding: 1rem;
  color: #6b7280;
  font-size: 0.875rem;
  background: #f9fafb;
  border-radius: 8px;
}

.resumen-stats {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 1.5rem;
  margin-bottom: 2rem;
}

.stat-item {
  background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
  padding: 1.5rem;
  border-radius: 12px;
  text-align: center;
  border: 1px solid #e2e8f0;
}

.stat-value {
  font-size: 1.875rem;
  font-weight: 700;
  color: #1e293b;
  margin-bottom: 0.5rem;
}

.stat-label {
  font-size: 0.875rem;
  color: #64748b;
  font-weight: 500;
}

.productos-vendidos {
  margin-top: 2rem;
}

.productos-vendidos h5 {
  color: #374151;
  font-size: 1.125rem;
  font-weight: 600;
  margin-bottom: 1rem;
}

.productos-list {
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
}

.producto-item {
  display: grid;
  grid-template-columns: 1fr auto auto;
  gap: 1rem;
  align-items: center;
  padding: 1rem;
  background: #f8fafc;
  border-radius: 8px;
  border: 1px solid #e2e8f0;
}

.producto-nombre {
  font-weight: 500;
  color: #374151;
}

.producto-cantidad {
  font-size: 0.875rem;
  color: #6b7280;
}

.producto-total {
  font-weight: 600;
  color: #059669;
}

.table-container {
  overflow-x: auto;
  margin-top: 1rem;
}

.informe-table {
  width: 100%;
  border-collapse: collapse;
  font-size: 0.875rem;
}

.informe-table th {
  background: #f8fafc;
  color: #374151;
  font-weight: 600;
  padding: 1rem;
  text-align: left;
  border-bottom: 2px solid #e5e7eb;
  white-space: nowrap;
}

.informe-table td {
  padding: 1rem;
  border-bottom: 1px solid #e5e7eb;
  vertical-align: top;
}

.informe-table tr:hover {
  background: #f9fafb;
}

.cliente-info strong {
  display: block;
  color: #374151;
  margin-bottom: 0.25rem;
}

.cliente-info small {
  color: #6b7280;
  font-size: 0.75rem;
}

/* Responsive */
@media (max-width: 768px) {
  .filters-row {
    grid-template-columns: 1fr;
  }
  
  .resumen-stats {
    grid-template-columns: repeat(2, 1fr);
  }
  
  .producto-item {
    grid-template-columns: 1fr;
    gap: 0.5rem;
    text-align: center;
  }
  
  .informe-table {
    font-size: 0.75rem;
  }
  
  .informe-table th,
  .informe-table td {
    padding: 0.5rem;
  }
}

@media (max-width: 480px) {
  .resumen-stats {
    grid-template-columns: 1fr;
  }
}
</style>
