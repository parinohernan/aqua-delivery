---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Dashboard - AquaDelivery">
  <!-- Pantalla de carga -->
  <div id="loading" class="loading-screen">
    <div class="spinner"></div>
    <p>Cargando aplicación...</p>
  </div>

  <!-- Aplicación principal -->
  <div id="mainApp" class="hidden">
    <div class="app-container">
      <!-- Header con gradiente -->
      <header class="header">
        <div class="header-content">
          <div class="header-left">
            <div class="app-icon">💧</div>
            <h1 class="app-title">AquaDelivery</h1>
          </div>
          <div class="header-right">
            <span id="userInfo" class="user-info"></span>
            <button onclick="logout()" class="logout-button">
              <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                <path d="M10 12.5a.5.5 0 0 1-.5.5h-8a.5.5 0 0 1-.5-.5v-9a.5.5 0 0 1 .5-.5h8a.5.5 0 0 1 .5.5v2a.5.5 0 0 0 1 0v-2A1.5 1.5 0 0 0 9.5 2h-8A1.5 1.5 0 0 0 0 3.5v9A1.5 1.5 0 0 0 1.5 14h8a1.5 1.5 0 0 0 1.5-1.5v-2a.5.5 0 0 0-1 0v2z"/>
                <path d="M15.854 8.354a.5.5 0 0 0 0-.708l-3-3a.5.5 0 0 0-.708.708L14.293 7.5H5.5a.5.5 0 0 0 0 1h8.793l-2.147 2.146a.5.5 0 0 0 .708.708l3-3z"/>
              </svg>
              Salir
            </button>
          </div>
        </div>
      </header>

      <!-- Navegación Desktop -->
      <nav class="nav-buttons">
        <button data-route="pedidos" class="nav-button active">
          <div class="nav-icon">📦</div>
          <span>Pedidos</span>
        </button>
        <button data-route="clientes" class="nav-button">
          <div class="nav-icon">👥</div>
          <span>Clientes</span>
        </button>
        <button data-route="productos" class="nav-button">
          <div class="nav-icon">🛍️</div>
          <span>Productos</span>
        </button>
        <button data-route="pagos" class="nav-button">
          <div class="nav-icon">💰</div>
          <span>Pagos</span>
        </button>
      </nav>

      <!-- Contenido principal -->
      <main class="main-content">
        <div id="contentArea" class="content-card">
          <!-- El contenido se cargará aquí dinámicamente -->
        </div>
      </main>

      <!-- Navegación Móvil -->
      <nav class="mobile-nav">
        <button data-route="pedidos" class="mobile-nav-button active">
          <div class="mobile-nav-icon">📦</div>
          <span>Pedidos</span>
        </button>
        <button data-route="clientes" class="mobile-nav-button">
          <div class="mobile-nav-icon">👥</div>
          <span>Clientes</span>
        </button>
        <button data-route="productos" class="mobile-nav-button">
          <div class="mobile-nav-icon">🛍️</div>
          <span>Productos</span>
        </button>
        <button data-route="pagos" class="mobile-nav-button">
          <div class="mobile-nav-icon">💰</div>
          <span>Pagos</span>
        </button>
      </nav>
    </div>
  </div>
</Layout>

<script>
// Estado global de la aplicación
let currentUser = null;
let currentRoute = 'pedidos';

// Verificar autenticación al cargar la página
document.addEventListener('DOMContentLoaded', async () => {
  await checkAuth();
});

// Verificar si el usuario está autenticado
async function checkAuth() {
  console.log('🔐 Verificando autenticación...');
  const token = localStorage.getItem('token');
  const userStr = localStorage.getItem('user');

  console.log('🔑 Token encontrado:', token ? 'Sí' : 'No');
  console.log('👤 Usuario encontrado:', userStr ? 'Sí' : 'No');

  if (!token || !userStr) {
    console.log('❌ No hay token o usuario, redirigiendo al login');
    redirectToLogin();
    return;
  }

  try {
    console.log('📡 Verificando token con el servidor...');
    // Verificar que el token sea válido haciendo una petición simple
    const response = await fetch('/api/pedidos', {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });

    console.log('📥 Respuesta del servidor:', response.status, response.statusText);

    if (!response.ok) {
      const errorText = await response.text();
      console.error('❌ Error del servidor:', errorText);
      throw new Error(`Token inválido: ${response.status} - ${errorText}`);
    }

    console.log('✅ Token válido, mostrando aplicación');
    currentUser = JSON.parse(userStr);
    showMainApp();
    loadRoute(currentRoute);
  } catch (error) {
    console.error('💥 Error de autenticación:', error);
    console.log('🧹 Limpiando localStorage y redirigiendo al login');
    localStorage.removeItem('token');
    localStorage.removeItem('user');
    redirectToLogin();
  }
}

// Redirigir al login
function redirectToLogin() {
  if (window.location.pathname !== '/login') {
    window.location.href = '/login';
  }
}

// Mostrar la aplicación principal
function showMainApp() {
  document.getElementById('loading').classList.add('hidden');
  document.getElementById('mainApp').classList.remove('hidden');

  // Mostrar información del usuario
  const userInfo = document.getElementById('userInfo');
  if (userInfo && currentUser) {
    userInfo.textContent = `Hola, ${currentUser.nombre || currentUser.telegramId}`;
  }
}

// Función de logout
function logout() {
  if (confirm('¿Estás seguro de que quieres cerrar sesión?')) {
    localStorage.removeItem('token');
    localStorage.removeItem('user');
    window.location.href = '/login';
  }
}

// Navegación
document.addEventListener('click', (e) => {
  if (e.target.matches('[data-route]') || e.target.closest('[data-route]')) {
    const button = e.target.matches('[data-route]') ? e.target : e.target.closest('[data-route]');
    const route = button.getAttribute('data-route');
    navigateTo(route);
  }
});

function navigateTo(route) {
  currentRoute = route;
  
  // Actualizar botones activos
  document.querySelectorAll('.nav-button, .mobile-nav-button').forEach(btn => {
    btn.classList.remove('active');
  });
  
  document.querySelectorAll(`[data-route="${route}"]`).forEach(btn => {
    btn.classList.add('active');
  });
  
  loadRoute(route);
}

// Cargar contenido de la ruta
async function loadRoute(route) {
  const contentArea = document.getElementById('contentArea');
  contentArea.innerHTML = '<div style="display: flex; justify-content: center; padding: 2rem;"><div class="spinner"></div></div>';

  try {
    switch (route) {
      case 'pedidos':
        await loadPedidos();
        break;
      case 'clientes':
        await loadClientes();
        break;
      case 'productos':
        await loadProductos();
        break;
      case 'pagos':
        await loadPagos();
        break;
      default:
        contentArea.innerHTML = '<div style="text-align: center; padding: 2rem; color: #6b7280;">Página no encontrada</div>';
    }
  } catch (error) {
    console.error('Error cargando ruta:', error);
    contentArea.innerHTML = '<div style="text-align: center; padding: 2rem; color: #dc2626;">Error cargando contenido</div>';
  }
}

// Cargar pedidos
async function loadPedidos() {
  console.log('📦 Cargando pedidos...');
  const token = localStorage.getItem('token');

  try {
    const response = await fetch('/api/pedidos', {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('❌ Error del servidor:', errorText);
      throw new Error(`Error ${response.status}: ${errorText}`);
    }

    const pedidos = await response.json();
    console.log('✅ Pedidos cargados:', pedidos.length, 'pedidos');
    console.log('📋 Datos de pedidos:', pedidos);

    // Guardar en variables globales para filtros
    allPedidos = pedidos;
    currentPedidos = pedidos;

    renderPedidos(pedidos);
  } catch (error) {
    console.error('💥 Error cargando pedidos:', error);
    const contentArea = document.getElementById('contentArea');
    if (contentArea) {
      contentArea.innerHTML = `
        <h3 class="content-title">Gestión de Pedidos</h3>
        <div style="text-align: center; padding: 2rem; color: #dc2626;">
          <p>Error cargando pedidos: ${error.message}</p>
          <button onclick="loadPedidos()" class="btn-primary" style="margin-top: 1rem;">
            Reintentar
          </button>
        </div>
      `;
    }
  }
}

function renderPedidos(pedidos) {
  const contentArea = document.getElementById('contentArea');

  if (pedidos.length === 0) {
    contentArea.innerHTML = `
      <h3 class="content-title">Gestión de Pedidos</h3>
      <div style="text-align: center; padding: 3rem; color: #6b7280;">
        <p style="font-size: 1.125rem; margin-bottom: 0.5rem;">No hay pedidos registrados</p>
        <p style="font-size: 0.875rem;">Los pedidos aparecerán aquí cuando se registren en el sistema.</p>
      </div>
    `;
    return;
  }

  const html = `
    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5rem;">
      <h3 class="content-title" style="margin-bottom: 0;">Gestión de Pedidos</h3>
      <button class="btn-primary" style="width: auto; padding: 0.5rem 1rem;">
        + Nuevo Pedido
      </button>
    </div>

    <div style="margin-bottom: 1rem; display: flex; gap: 1rem; flex-wrap: wrap;">
      <select id="filterEstado" onchange="filterPedidos()" class="form-input" style="width: auto;">
        <option value="">Todos los estados</option>
        <option value="Pendiente">Pendiente</option>
        <option value="En Preparación">En Preparación</option>
        <option value="Entregado">Entregado</option>
      </select>

      <input
        type="date"
        id="filterFecha"
        onchange="filterPedidos()"
        class="form-input"
        style="width: auto;"
      />
    </div>

    <div style="display: grid; gap: 1rem;">
      ${pedidos.map(pedido => {
        // Asegurar que todos los campos tengan valores por defecto
        const id = pedido.id || pedido.codigo || 'N/A';
        const clienteNombre = pedido.cliente_nombre || pedido.nombre || 'Cliente sin nombre';
        const direccion = pedido.direccion || 'Dirección no especificada';
        const fechaPedido = pedido.fecha_pedido || pedido.fechaPedido;
        const total = pedido.total || 0;
        const estado = pedido.estado || 'Pendiente';

        // Formatear fecha
        let fechaFormateada = 'Fecha no disponible';
        if (fechaPedido) {
          try {
            const fecha = new Date(fechaPedido);
            if (!isNaN(fecha.getTime())) {
              fechaFormateada = fecha.toLocaleDateString('es-ES', {
                year: 'numeric',
                month: 'short',
                day: 'numeric'
              });
            }
          } catch (e) {
            console.error('Error formateando fecha:', e);
          }
        }

        return `
          <div style="border: 1px solid #e5e7eb; border-radius: 0.5rem; padding: 1rem; background: white;">
            <div style="display: flex; justify-content: space-between; align-items: start;">
              <div style="flex: 1;">
                <h4 style="font-weight: 600; color: #111827; margin-bottom: 0.5rem;">#${id}</h4>
                <p style="font-size: 0.875rem; color: #4b5563; margin-bottom: 0.25rem;">👤 ${clienteNombre}</p>
                <p style="font-size: 0.875rem; color: #6b7280; margin-bottom: 0.25rem;">📍 ${direccion}</p>
                <p style="font-size: 0.875rem; color: #6b7280;">📅 ${fechaFormateada}</p>
              </div>
              <div style="text-align: right;">
                <p style="font-weight: 600; color: #059669; margin-bottom: 0.5rem; font-size: 1.125rem;">$${parseFloat(total).toFixed(2)}</p>
                <span style="display: inline-flex; align-items: center; padding: 0.25rem 0.75rem; border-radius: 9999px; font-size: 0.75rem; font-weight: 500; ${getStatusColor(estado)}">
                  ${estado}
                </span>
                <div style="margin-top: 0.5rem; display: flex; gap: 0.25rem; justify-content: flex-end;">
                  <button onclick="viewPedido(${id})" style="padding: 0.25rem 0.5rem; background: #6b7280; color: white; border: none; border-radius: 0.25rem; cursor: pointer; font-size: 0.75rem;">
                    Ver
                  </button>
                  <button onclick="editPedido(${id})" style="padding: 0.25rem 0.5rem; background: #3b82f6; color: white; border: none; border-radius: 0.25rem; cursor: pointer; font-size: 0.75rem;">
                    Editar
                  </button>
                </div>
              </div>
            </div>
          </div>
        `;
      }).join('')}
    </div>
  `;

  contentArea.innerHTML = html;
}

function getStatusColor(estado) {
  switch (estado) {
    case 'Pendiente':
      return 'background-color: #fef3c7; color: #92400e;';
    case 'En Preparación':
      return 'background-color: #dbeafe; color: #1e40af;';
    case 'Entregado':
      return 'background-color: #d1fae5; color: #065f46;';
    default:
      return 'background-color: #f3f4f6; color: #374151;';
  }
}

// Variables globales para pedidos
let currentPedidos = [];
let allPedidos = [];

// Filtrar pedidos
function filterPedidos() {
  const estadoFilter = document.getElementById('filterEstado')?.value || '';
  const fechaFilter = document.getElementById('filterFecha')?.value || '';

  let filteredPedidos = allPedidos;

  if (estadoFilter) {
    filteredPedidos = filteredPedidos.filter(pedido => pedido.estado === estadoFilter);
  }

  if (fechaFilter) {
    filteredPedidos = filteredPedidos.filter(pedido => {
      const pedidoFecha = new Date(pedido.fecha_pedido || pedido.fechaPedido);
      const filterFecha = new Date(fechaFilter);
      return pedidoFecha.toDateString() === filterFecha.toDateString();
    });
  }

  currentPedidos = filteredPedidos;
  renderPedidos(filteredPedidos);
}

// Ver detalles del pedido
function viewPedido(pedidoId) {
  const pedido = currentPedidos.find(p => (p.id || p.codigo) == pedidoId);
  if (!pedido) {
    alert('Pedido no encontrado');
    return;
  }

  const clienteNombre = pedido.cliente_nombre || pedido.nombre || 'Cliente sin nombre';
  const total = parseFloat(pedido.total || 0).toFixed(2);
  const estado = pedido.estado || 'Pendiente';
  const direccion = pedido.direccion || 'Dirección no especificada';

  alert(`Pedido #${pedidoId}\nCliente: ${clienteNombre}\nDirección: ${direccion}\nTotal: $${total}\nEstado: ${estado}`);
}

// Editar pedido
function editPedido(pedidoId) {
  alert('Funcionalidad de edición en desarrollo...');
}

// Cargar clientes
async function loadClientes() {
  console.log('👥 Cargando clientes...');
  const token = localStorage.getItem('token');

  try {
    const response = await fetch('/api/clientes', {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('❌ Error del servidor:', errorText);
      throw new Error(`Error ${response.status}: ${errorText}`);
    }

    const clientes = await response.json();
    console.log('✅ Clientes cargados:', clientes.length, 'clientes');
    console.log('📋 Datos de clientes:', clientes);

    // Guardar en variable global para búsquedas y edición
    currentClients = clientes;

    renderClientes(clientes);
  } catch (error) {
    console.error('💥 Error cargando clientes:', error);
    const contentArea = document.getElementById('contentArea');
    if (contentArea) {
      contentArea.innerHTML = `
        <h3 class="content-title">Gestión de Clientes</h3>
        <div style="text-align: center; padding: 2rem; color: #dc2626;">
          <p>Error cargando clientes: ${error.message}</p>
          <button onclick="loadClientes()" class="btn-primary" style="margin-top: 1rem;">
            Reintentar
          </button>
        </div>
      `;
    }
  }
}

function renderClientes(clientes) {
  const contentArea = document.getElementById('contentArea');

  if (clientes.length === 0) {
    contentArea.innerHTML = `
      <h3 class="content-title">Gestión de Clientes</h3>
      <div style="text-align: center; padding: 3rem; color: #6b7280;">
        <p style="font-size: 1.125rem; margin-bottom: 0.5rem;">No hay clientes registrados</p>
        <p style="font-size: 0.875rem;">Los clientes aparecerán aquí cuando se registren en el sistema.</p>
        <button onclick="showCreateClientModal()" class="btn-primary" style="margin-top: 1rem;">
          + Agregar Primer Cliente
        </button>
      </div>
    `;
    return;
  }

  const html = `
    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5rem;">
      <h3 class="content-title" style="margin-bottom: 0;">Gestión de Clientes</h3>
      <button onclick="showCreateClientModal()" class="btn-primary" style="width: auto; padding: 0.5rem 1rem;">
        + Nuevo Cliente
      </button>
    </div>

    <div style="margin-bottom: 1rem; display: flex; gap: 1rem; align-items: center;">
      <div style="position: relative; max-width: 300px; flex: 1;">
        <input
          type="text"
          id="searchClients"
          placeholder="Buscar clientes por nombre, apellido o teléfono..."
          class="form-input"
          style="padding-left: 2.5rem;"
          onkeyup="debounceSearchClients(this.value)"
          oninput="debounceSearchClients(this.value)"
        />
        <svg style="position: absolute; left: 0.75rem; top: 50%; transform: translateY(-50%); width: 1rem; height: 1rem; color: #6b7280;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
        </svg>
      </div>
      <button onclick="clearClientSearch()" style="padding: 0.5rem; background: #6b7280; color: white; border: none; border-radius: 0.375rem; cursor: pointer; font-size: 0.875rem;">
        Limpiar
      </button>
    </div>

    <div style="display: grid; gap: 1rem;">
      ${clientes.map(cliente => {
        // Asegurar que todos los campos tengan valores por defecto
        // Intentar diferentes nombres de columnas que podrían existir
        const id = cliente.id || cliente.codigo || cliente.Code || 'N/A';
        const codigo = cliente.codigo || cliente.Code || cliente.id || 'N/A';
        const nombre = cliente.nombre || cliente.name || cliente.Name || 'Sin nombre';
        const apellido = cliente.apellido || cliente.lastname || cliente.LastName || '';
        const nombreCompleto = cliente.nombreCompleto || `${nombre} ${apellido}`.trim() || 'Cliente sin nombre';
        const telefono = cliente.telefono || cliente.phone || cliente.Phone || 'Sin teléfono';
        const direccion = cliente.direccion || cliente.address || cliente.Address || 'Sin dirección';

        // Usar los nombres correctos de columnas
        const saldoDinero = parseFloat(cliente.saldo || 0);
        const saldoRetornables = parseInt(cliente.retornables || 0);

        return `
          <div style="border: 1px solid #e5e7eb; border-radius: 0.5rem; padding: 1rem; background: white; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
            <div style="display: flex; justify-content: space-between; align-items: start;">
              <div style="flex: 1;">
                <div style="display: flex; align-items: center; gap: 0.5rem; margin-bottom: 0.5rem; flex-wrap: wrap;">
                  <h4 style="font-weight: 600; color: #111827; margin: 0;">${nombreCompleto}</h4>
                  <span style="background: #f3f4f6; color: #6b7280; padding: 0.125rem 0.5rem; border-radius: 0.25rem; font-size: 0.75rem;">
                    #${codigo}
                  </span>
                </div>

                <div style="margin-bottom: 0.75rem;">
                  <p style="font-size: 0.875rem; color: #4b5563; margin-bottom: 0.25rem;">📞 ${telefono}</p>
                  <p style="font-size: 0.875rem; color: #6b7280; margin-bottom: 0.25rem;">📍 ${direccion}</p>
                </div>

                <div style="display: flex; gap: 1rem; align-items: center; flex-wrap: wrap;">
                  <div style="display: flex; align-items: center; gap: 0.25rem;">
                    <span style="color: #6b7280; font-size: 0.875rem;">Saldo $:</span>
                    <span style="color: ${saldoDinero >= 0 ? '#059669' : '#dc2626'}; font-weight: 600; font-size: 0.875rem;">
                      $${saldoDinero.toFixed(2)}
                    </span>
                  </div>

                  <div style="display: flex; align-items: center; gap: 0.25rem;">
                    <span style="color: #6b7280; font-size: 0.875rem;">Retornables:</span>
                    <span style="color: ${saldoRetornables > 0 ? '#dc2626' : '#059669'}; font-weight: 600; font-size: 0.875rem;">
                      ${saldoRetornables} ${saldoRetornables === 1 ? 'unidad' : 'unidades'}
                    </span>
                  </div>
                </div>
              </div>

              <div style="display: flex; gap: 0.5rem; margin-left: 1rem; flex-wrap: wrap;">
                <button
                  onclick="editClient(${id})"
                  style="padding: 0.5rem; background: #3b82f6; color: white; border: none; border-radius: 0.375rem; cursor: pointer; display: flex; align-items: center; gap: 0.25rem; font-size: 0.875rem;"
                  title="Editar cliente"
                >
                  <svg width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M12.146.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1 0 .708L10.5 8.207l-3-3L12.146.146zM11.207 9l-3-3L2.5 11.707V14.5a.5.5 0 0 0 .5.5h2.793L11.207 9z"/>
                  </svg>
                  Editar
                </button>

                <button
                  onclick="showClientAccount(${id})"
                  style="padding: 0.5rem; background: #059669; color: white; border: none; border-radius: 0.375rem; cursor: pointer; display: flex; align-items: center; gap: 0.25rem; font-size: 0.875rem;"
                  title="Ver cuenta corriente"
                >
                  <svg width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M1 3a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1H1zM7 5a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1v6a1 1 0 0 1-1 1H8a1 1 0 0 1-1-1V5zM9 13V6h5v7H9z"/>
                    <path d="M2 6a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v6a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V6zm5 0H3v6h4V6z"/>
                  </svg>
                  Cta Cte
                </button>

                <button
                  onclick="deleteClient(${id})"
                  style="padding: 0.5rem; background: #ef4444; color: white; border: none; border-radius: 0.375rem; cursor: pointer; display: flex; align-items: center; gap: 0.25rem; font-size: 0.875rem;"
                  title="Eliminar cliente"
                >
                  <svg width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
                    <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
                  </svg>
                  Eliminar
                </button>
              </div>
            </div>
          </div>
        `;
      }).join('')}
    </div>
  `;

  contentArea.innerHTML = html;

  // Pasar los clientes a las funciones globales
  if (window.setCurrentClients) {
    window.setCurrentClients(clientes);
  }
}

// Cargar productos
async function loadProductos() {
  console.log('🛍️ Cargando productos...');
  const token = localStorage.getItem('token');

  try {
    const response = await fetch('/api/productos', {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('❌ Error del servidor:', errorText);
      throw new Error(`Error ${response.status}: ${errorText}`);
    }

    const productos = await response.json();
    console.log('✅ Productos cargados:', productos.length, 'productos');
    console.log('📋 Datos de productos:', productos);

    // Guardar en variable global para búsquedas y edición
    currentProducts = productos;

    renderProductos(productos);
  } catch (error) {
    console.error('💥 Error cargando productos:', error);
    const contentArea = document.getElementById('contentArea');
    if (contentArea) {
      contentArea.innerHTML = `
        <h3 class="content-title">Gestión de Productos</h3>
        <div style="text-align: center; padding: 2rem; color: #dc2626;">
          <p>Error cargando productos: ${error.message}</p>
          <button onclick="loadProductos()" class="btn-primary" style="margin-top: 1rem;">
            Reintentar
          </button>
        </div>
      `;
    }
  }
}

function renderProductos(productos) {
  const contentArea = document.getElementById('contentArea');

  if (productos.length === 0) {
    contentArea.innerHTML = `
      <h3 class="content-title">Gestión de Productos</h3>
      <div style="text-align: center; padding: 3rem; color: #6b7280;">
        <p style="font-size: 1.125rem; margin-bottom: 0.5rem;">No hay productos registrados</p>
        <p style="font-size: 0.875rem;">Los productos aparecerán aquí cuando se registren en el sistema.</p>
        <button onclick="productModal.show()" class="btn-primary" style="margin-top: 1rem;">
          + Agregar Primer Producto
        </button>
      </div>
    `;
    return;
  }

  const html = `
    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5rem;">
      <h3 class="content-title" style="margin-bottom: 0;">Gestión de Productos</h3>
      <button onclick="productModal.show()" class="btn-primary" style="width: auto; padding: 0.5rem 1rem;">
        + Nuevo Producto
      </button>
    </div>

    <div style="margin-bottom: 1rem; display: flex; gap: 1rem; align-items: center;">
      <div style="position: relative; max-width: 300px; flex: 1;">
        <input
          type="text"
          id="searchProducts"
          placeholder="Buscar productos por descripción..."
          class="form-input"
          style="padding-left: 2.5rem;"
          onkeyup="debounceSearch(this.value)"
          oninput="debounceSearch(this.value)"
        />
        <svg style="position: absolute; left: 0.75rem; top: 50%; transform: translateY(-50%); width: 1rem; height: 1rem; color: #6b7280;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
        </svg>
      </div>
      <button onclick="clearSearch()" style="padding: 0.5rem; background: #6b7280; color: white; border: none; border-radius: 0.375rem; cursor: pointer; font-size: 0.875rem;">
        Limpiar
      </button>
    </div>

    <div style="display: grid; gap: 1rem;">
      ${productos.map(producto => {
        // Asegurar que todos los campos tengan valores por defecto
        // Intentar diferentes nombres de columnas que podrían existir
        const id = producto.id || producto.codigo || producto.Code || 'N/A';
        const codigo = producto.codigo || producto.Code || producto.id || 'N/A';
        const nombre = producto.descripcion || producto.Description || producto.description || 'Sin nombre';
        const precio = parseFloat(producto.precio || producto.price || producto.Price || 0);
        const stock = parseInt(producto.stock || producto.Stock || producto.cantidad || producto.Cantidad || 0);
        const esRetornable = producto.esRetornable == 1;

        return `
          <div style="border: 1px solid #e5e7eb; border-radius: 0.5rem; padding: 1rem; background: white; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
            <div style="display: flex; justify-content: space-between; align-items: start;">
              <div style="flex: 1;">
                <div style="display: flex; align-items: center; gap: 0.5rem; margin-bottom: 0.5rem; flex-wrap: wrap;">
                  <h4 style="font-weight: 600; color: #111827; margin: 0;">${nombre}</h4>
                  <span style="background: #f3f4f6; color: #6b7280; padding: 0.125rem 0.5rem; border-radius: 0.25rem; font-size: 0.75rem;">
                    #${codigo}
                  </span>
                  ${esRetornable ? `
                    <span style="background: #dbeafe; color: #1e40af; padding: 0.125rem 0.5rem; border-radius: 0.25rem; font-size: 0.75rem; font-weight: 500;">
                      🔄 Retornable
                    </span>
                  ` : ''}
                </div>

                <div style="display: flex; gap: 1rem; align-items: center;">
                  <div style="display: flex; align-items: center; gap: 0.25rem;">
                    <span style="color: #059669; font-weight: 600; font-size: 1.125rem;">$${precio.toFixed(2)}</span>
                  </div>

                  <div style="display: flex; align-items: center; gap: 0.25rem;">
                    <span style="color: #6b7280; font-size: 0.875rem;">Stock:</span>
                    <span style="color: ${stock > 0 ? '#059669' : '#dc2626'}; font-weight: 600; font-size: 0.875rem;">
                      ${stock} ${stock === 1 ? 'unidad' : 'unidades'}
                    </span>
                  </div>
                </div>
              </div>

              <div style="display: flex; gap: 0.5rem; margin-left: 1rem;">
                <button
                  onclick="editProduct(${id})"
                  style="padding: 0.5rem; background: #3b82f6; color: white; border: none; border-radius: 0.375rem; cursor: pointer; display: flex; align-items: center; gap: 0.25rem; font-size: 0.875rem;"
                  title="Editar producto"
                >
                  <svg width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M12.146.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1 0 .708L10.5 8.207l-3-3L12.146.146zM11.207 9l-3-3L2.5 11.707V14.5a.5.5 0 0 0 .5.5h2.793L11.207 9z"/>
                  </svg>
                  Editar
                </button>

                <button
                  onclick="deleteProduct(${id})"
                  style="padding: 0.5rem; background: #ef4444; color: white; border: none; border-radius: 0.375rem; cursor: pointer; display: flex; align-items: center; gap: 0.25rem; font-size: 0.875rem;"
                  title="Eliminar producto"
                >
                  <svg width="14" height="14" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
                    <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
                  </svg>
                  Eliminar
                </button>
              </div>
            </div>
          </div>
        `;
      }).join('')}
    </div>
  `;

  contentArea.innerHTML = html;

  // Pasar los productos al modal para que pueda acceder a ellos
  if (window.productModal) {
    window.productModal.setCurrentProducts(productos);
  }
}

// Cargar pagos
async function loadPagos() {
  const contentArea = document.getElementById('contentArea');

  const html = `
    <h3 class="content-title">Gestión de Pagos</h3>
    <p style="color: #4b5563;">Funcionalidad de pagos en desarrollo...</p>
  `;

  contentArea.innerHTML = html;
}

// Variables globales para productos
let currentProducts = [];
let editingProductId = null;
let searchTimeout = null;

// Variables globales para clientes
let currentClients = [];
let editingClientId = null;
let clientSearchTimeout = null;

// Función de debounce para la búsqueda (definida globalmente)
function debounceSearch(searchTerm) {
  // Limpiar el timeout anterior
  if (searchTimeout) {
    clearTimeout(searchTimeout);
  }

  // Establecer un nuevo timeout
  searchTimeout = setTimeout(() => {
    searchProducts(searchTerm);
  }, 300); // Esperar 300ms después de que el usuario deje de escribir
}

// Limpiar búsqueda (definida globalmente)
function clearSearch() {
  const searchInput = document.getElementById('searchProducts');
  if (searchInput) {
    searchInput.value = '';
    searchProducts(''); // Mostrar todos los productos
  }
}

// Función para editar producto (definida globalmente)
function editProduct(productId) {
  console.log('✏️ Editando producto ID:', productId);
  console.log('📋 Productos disponibles:', currentProducts.length);

  const producto = currentProducts.find(p => {
    const id = p.codigo || p.id;
    console.log('🔍 Comparando:', id, 'con', productId);
    return id == productId;
  });

  if (!producto) {
    console.error('❌ Producto no encontrado:', productId);
    alert('Producto no encontrado');
    return;
  }

  console.log('✅ Producto encontrado:', producto);

  // Usar el modal component
  if (window.productModal) {
    window.productModal.show(producto);
  } else {
    console.error('❌ ProductModal no está disponible');
    alert('Error: Modal no disponible');
  }
}

// Eliminar producto (definida globalmente)
async function deleteProduct(productId) {
  console.log('🗑️ Eliminando producto ID:', productId);

  const producto = currentProducts.find(p => (p.codigo || p.id) == productId);
  const nombreProducto = producto ? (producto.descripcion || `Producto #${productId}`) : `Producto #${productId}`;

  if (!confirm(`¿Estás seguro de que quieres eliminar "${nombreProducto}"?\n\nEsta acción no se puede deshacer.`)) {
    return;
  }

  const token = localStorage.getItem('token');

  try {
    console.log('📡 Enviando petición DELETE...');
    const response = await fetch(`/api/productos/${productId}`, {
      method: 'DELETE',
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('❌ Error del servidor:', errorText);
      throw new Error(`Error ${response.status}: ${errorText}`);
    }

    console.log('✅ Producto eliminado correctamente');

    // Mostrar mensaje de éxito
    showSuccessMessage('Producto eliminado correctamente');

    // Recargar la lista
    loadProductos();

  } catch (error) {
    console.error('💥 Error eliminando producto:', error);
    showErrorMessage('Error eliminando producto: ' + error.message);
  }
}

// Funciones para mostrar mensajes (definidas globalmente)
function showSuccessMessage(message) {
  const messageDiv = document.createElement('div');
  messageDiv.style.cssText = `
    position: fixed;
    top: 20px;
    right: 20px;
    background: #10b981;
    color: white;
    padding: 1rem 1.5rem;
    border-radius: 0.5rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    z-index: 10000;
    font-weight: 500;
  `;
  messageDiv.textContent = message;

  document.body.appendChild(messageDiv);

  setTimeout(() => {
    messageDiv.remove();
  }, 3000);
}

function showErrorMessage(message) {
  const messageDiv = document.createElement('div');
  messageDiv.style.cssText = `
    position: fixed;
    top: 20px;
    right: 20px;
    background: #ef4444;
    color: white;
    padding: 1rem 1.5rem;
    border-radius: 0.5rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    z-index: 10000;
    font-weight: 500;
  `;
  messageDiv.textContent = message;

  document.body.appendChild(messageDiv);

  setTimeout(() => {
    messageDiv.remove();
  }, 5000);
}

// Buscar productos
async function searchProducts(searchTerm) {
  console.log('🔍 Buscando productos:', searchTerm);
  const token = localStorage.getItem('token');

  try {
    let url = '/api/productos';
    if (searchTerm && searchTerm.trim()) {
      url += `?search=${encodeURIComponent(searchTerm.trim())}`;
    }

    console.log('📡 URL de búsqueda:', url);

    const response = await fetch(url, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('❌ Error del servidor:', errorText);
      throw new Error(`Error ${response.status}: ${errorText}`);
    }

    const productos = await response.json();
    console.log('✅ Productos encontrados:', productos.length);

    currentProducts = productos;
    renderProductos(productos);
  } catch (error) {
    console.error('💥 Error buscando productos:', error);
    // En caso de error, mostrar todos los productos
    loadProductos();
  }
}

// ========== FUNCIONES PARA CLIENTES ==========

// Buscar clientes
async function searchClients(searchTerm) {
  console.log('🔍 Buscando clientes:', searchTerm);
  const token = localStorage.getItem('token');

  try {
    let url = '/api/clientes';
    if (searchTerm && searchTerm.trim()) {
      url += `?search=${encodeURIComponent(searchTerm.trim())}`;
    }

    console.log('📡 URL de búsqueda:', url);

    const response = await fetch(url, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('❌ Error del servidor:', errorText);
      throw new Error(`Error ${response.status}: ${errorText}`);
    }

    const clientes = await response.json();
    console.log('✅ Clientes encontrados:', clientes.length);

    currentClients = clientes;
    renderClientes(clientes);
  } catch (error) {
    console.error('💥 Error buscando clientes:', error);
    // En caso de error, mostrar todos los clientes
    loadClientes();
  }
}

// Función de debounce para la búsqueda de clientes
function debounceSearchClients(searchTerm) {
  // Limpiar el timeout anterior
  if (clientSearchTimeout) {
    clearTimeout(clientSearchTimeout);
  }

  // Establecer un nuevo timeout
  clientSearchTimeout = setTimeout(() => {
    searchClients(searchTerm);
  }, 300); // Esperar 300ms después de que el usuario deje de escribir
}

// Limpiar búsqueda de clientes
function clearClientSearch() {
  const searchInput = document.getElementById('searchClients');
  if (searchInput) {
    searchInput.value = '';
    searchClients(''); // Mostrar todos los clientes
  }
}

// Función para editar cliente
function editClient(clientId) {
  console.log('✏️ Editando cliente ID:', clientId);
  console.log('📋 Clientes disponibles:', currentClients.length);

  const cliente = currentClients.find(c => {
    const id = c.codigo || c.id;
    console.log('🔍 Comparando:', id, 'con', clientId);
    return id == clientId;
  });

  if (!cliente) {
    console.error('❌ Cliente no encontrado:', clientId);
    alert('Cliente no encontrado');
    return;
  }

  console.log('✅ Cliente encontrado:', cliente);

  // Usar el modal component
  if (window.clientModal) {
    window.clientModal.show(cliente);
  } else {
    console.error('❌ ClientModal no está disponible');
    alert('Error: Modal no disponible');
  }
}

// Mostrar cuenta corriente del cliente
function showClientAccount(clientId) {
  console.log('💰 Mostrando cuenta corriente del cliente ID:', clientId);

  const cliente = currentClients.find(c => (c.codigo || c.id) == clientId);

  if (!cliente) {
    console.error('❌ Cliente no encontrado:', clientId);
    alert('Cliente no encontrado');
    return;
  }

  const nombreCompleto = cliente.nombreCompleto || `${cliente.nombre || ''} ${cliente.apellido || ''}`.trim() || 'Cliente sin nombre';
  const saldoDinero = parseFloat(cliente.saldoDinero || 0);
  const saldoRetornables = parseInt(cliente.saldoRetornables || 0);

  // TODO: Implementar modal de cuenta corriente detallada
  alert(`Cuenta Corriente - ${nombreCompleto}\n\nSaldo en dinero: $${saldoDinero.toFixed(2)}\nRetornables pendientes: ${saldoRetornables} unidades\n\n(Funcionalidad detallada en desarrollo...)`);
}

// Eliminar cliente
async function deleteClient(clientId) {
  console.log('🗑️ Eliminando cliente ID:', clientId);

  const cliente = currentClients.find(c => (c.codigo || c.id) == clientId);
  const nombreCliente = cliente ? (cliente.nombreCompleto || `Cliente #${clientId}`) : `Cliente #${clientId}`;

  if (!confirm(`¿Estás seguro de que quieres eliminar "${nombreCliente}"?\n\nEsta acción no se puede deshacer.`)) {
    return;
  }

  const token = localStorage.getItem('token');

  try {
    console.log('📡 Enviando petición DELETE...');
    const response = await fetch(`/api/clientes/${clientId}`, {
      method: 'DELETE',
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('❌ Error del servidor:', errorText);
      throw new Error(`Error ${response.status}: ${errorText}`);
    }

    console.log('✅ Cliente eliminado correctamente');

    // Mostrar mensaje de éxito
    showSuccessMessage('Cliente eliminado correctamente');

    // Recargar la lista
    loadClientes();

  } catch (error) {
    console.error('💥 Error eliminando cliente:', error);
    showErrorMessage('Error eliminando cliente: ' + error.message);
  }
}

// Mostrar modal para crear cliente
function showCreateClientModal() {
  if (window.clientModal) {
    window.clientModal.show();
  } else {
    console.error('❌ ClientModal no está disponible');
    alert('Error: Modal no disponible');
  }
}

// Función para establecer clientes actuales (usada por renderClientes)
function setCurrentClients(clients) {
  currentClients = clients;
}

// Asegurar que las funciones estén disponibles globalmente
window.debounceSearch = debounceSearch;
window.clearSearch = clearSearch;
window.editProduct = editProduct;
window.deleteProduct = deleteProduct;
window.showSuccessMessage = showSuccessMessage;
window.showErrorMessage = showErrorMessage;

// Funciones de clientes
window.searchClients = searchClients;
window.debounceSearchClients = debounceSearchClients;
window.clearClientSearch = clearClientSearch;
window.editClient = editClient;
window.showClientAccount = showClientAccount;
window.deleteClient = deleteClient;
window.showCreateClientModal = showCreateClientModal;
window.setCurrentClients = setCurrentClients;
</script>

<!-- Cargar los componentes modales -->
<script src="/js/ProductModal.js" is:inline></script>
<script src="/js/ClientModal.js" is:inline></script>
