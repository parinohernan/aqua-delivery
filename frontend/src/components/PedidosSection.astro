---
// Componente para la gesti√≥n de pedidos
---

<div id="pedidosSection">
  <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5rem;">
    <h3 class="content-title" style="margin-bottom: 0;">Gesti√≥n de Pedidos</h3>
    <button onclick="showCreatePedidoModal()" class="btn-primary" style="width: auto; padding: 0.5rem 1rem;">
      + Nuevo Pedido
    </button>
  </div>
  
  <div style="margin-bottom: 1.5rem;">
    <!-- Filtros principales -->
    <div style="display: flex; gap: 1rem; align-items: center; flex-wrap: wrap; margin-bottom: 1rem;">
      <div style="display: flex; align-items: center; gap: 0.5rem;">
        <label style="font-weight: 500; color: #374151; font-size: 0.875rem;">Estado:</label>
        <select id="filterEstado" onchange="filterPedidos()" class="form-input" style="width: auto; min-width: 140px;">
          <option value="">Todos los estados</option>
          <option value="pendient" selected>üì¶ Pendientes</option>
          <option value="proceso">üîÑ En Proceso</option>
          <option value="entregad">‚úÖ Entregados</option>
          <option value="anulado">‚ùå Anulados</option>
        </select>
      </div>
      
      <div style="display: flex; align-items: center; gap: 0.5rem;">
        <label style="font-weight: 500; color: #374151; font-size: 0.875rem;">Fecha:</label>
        <input 
          type="date" 
          id="filterFecha" 
          onchange="filterPedidos()" 
          class="form-input" 
          style="width: auto;"
        />
      </div>
      
      <div style="display: flex; align-items: center; gap: 0.5rem;">
        <label style="font-weight: 500; color: #374151; font-size: 0.875rem;">Cliente:</label>
        <input 
          type="text" 
          id="filterCliente" 
          placeholder="Buscar por cliente..."
          onkeyup="filterPedidos()" 
          class="form-input" 
          style="width: auto; min-width: 200px;"
        />
      </div>
      
      <button 
        onclick="clearPedidosFilters()" 
        class="btn-secondary" 
        style="padding: 0.5rem 1rem; font-size: 0.875rem;"
      >
        üóëÔ∏è Limpiar filtros
      </button>
    </div>
    
    <!-- Informaci√≥n de resultados -->
    <div id="pedidosInfo" style="display: flex; justify-content: space-between; align-items: center; padding: 0.75rem; background: #f9fafb; border-radius: 0.375rem; font-size: 0.875rem; color: #6b7280;">
      <span id="pedidosCount">Cargando pedidos...</span>
      <span id="pedidosFilters">Filtros: Pendientes por defecto</span>
    </div>
  </div>
  
  <div id="pedidosList" style="display: grid; gap: 1rem;">
    <!-- Los pedidos se cargar√°n aqu√≠ din√°micamente -->
  </div>
</div>

<script>
// Variables globales para pedidos
let currentPedidos = [];
let allPedidos = [];

// Cargar pedidos
async function loadPedidos() {
  console.log('üì¶ Cargando pedidos...');
  const token = localStorage.getItem('token');
  
  try {
    const response = await fetch('/api/pedidos', {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Error ${response.status}: ${errorText}`);
    }
    
    const pedidos = await response.json();
    console.log('‚úÖ Pedidos cargados:', pedidos.length, 'pedidos');
    allPedidos = pedidos;
    
    // Aplicar filtro por defecto (pendientes)
    if (pedidos.length > 0) {
      // Configurar filtro por defecto
      const estadoSelect = document.getElementById('filterEstado');
      if (estadoSelect) {
        estadoSelect.value = 'pendient';
      }
      
      // Aplicar filtros iniciales
      filterPedidos();
    } else {
      // No hay pedidos en absoluto - mostrar mensaje inicial
      const pedidosList = document.getElementById('pedidosList');
      if (pedidosList) {
        pedidosList.innerHTML = '<div style="text-align: center; padding: 2rem; color: #6b7280;">No hay pedidos registrados</div>';
      }
      
      // Actualizar informaci√≥n
      updatePedidosInfo([], '', '', '');
    }
  } catch (error) {
    console.error('üí• Error cargando pedidos:', error);
    const pedidosList = document.getElementById('pedidosList');
    if (pedidosList) {
      pedidosList.innerHTML = '<div style="text-align: center; padding: 2rem; color: #dc2626;">Error cargando pedidos: ' + error.message + '</div>';
    }
  }
}

function renderPedidosList(pedidos) {
  const pedidosList = document.getElementById('pedidosList');
  if (!pedidosList) return;

  pedidosList.innerHTML = pedidos.map(pedido => `
    <div style="border: 1px solid #e5e7eb; border-radius: 0.5rem; padding: 1rem; background: white;">
      <div style="display: flex; justify-content: space-between; align-items: start;">
        <div style="flex: 1;">
          <h4 style="font-weight: 600; color: #111827; margin-bottom: 0.25rem;">#${pedido.id}</h4>
          <p style="font-size: 0.875rem; color: #4b5563; margin-bottom: 0.25rem;">${pedido.cliente_nombre}</p>
          <p style="font-size: 0.875rem; color: #6b7280; margin-bottom: 0.25rem;">${pedido.direccion}</p>
          <p style="font-size: 0.875rem; color: #6b7280;">${new Date(pedido.fecha_pedido).toLocaleDateString()}</p>
        </div>
        <div style="text-align: right;">
          <p style="font-weight: 600; color: #059669; margin-bottom: 0.5rem;">$${parseFloat(pedido.total).toFixed(2)}</p>
          <span style="display: inline-flex; align-items: center; padding: 0.25rem 0.75rem; border-radius: 9999px; font-size: 0.75rem; font-weight: 500; ${getStatusColor(pedido.estado)}">
            ${getStatusText(pedido.estado)}
          </span>
          <div style="margin-top: 0.5rem; display: flex; gap: 0.25rem;">
            <button onclick="viewPedido(${pedido.id})" class="btn-small" style="background: #6b7280; color: white;">
              Ver
            </button>
            <button onclick="editPedido(${pedido.id})" class="btn-small btn-edit">
              Editar
            </button>
          </div>
        </div>
      </div>
    </div>
  `).join('');
}

function getStatusColor(estado) {
  switch (estado) {
    case 'pendient':
      return 'background-color: #fef3c7; color: #92400e;';
    case 'proceso':
      return 'background-color: #dbeafe; color: #1e40af;';
    case 'entregad':
      return 'background-color: #d1fae5; color: #065f46;';
    case 'anulado':
      return 'background-color: #fee2e2; color: #991b1b;';
    default:
      return 'background-color: #f3f4f6; color: #374151;';
  }
}

function getStatusText(estado) {
  switch (estado) {
    case 'pendient':
      return 'Pendiente';
    case 'proceso':
      return 'En Proceso';
    case 'entregad':
      return 'Entregado';
    case 'anulado':
      return 'Anulado';
    default:
      return estado;
  }
}

// Filtrar pedidos
function filterPedidos() {
  const estadoFilter = document.getElementById('filterEstado')?.value || '';
  const fechaFilter = document.getElementById('filterFecha')?.value || '';
  const clienteFilter = document.getElementById('filterCliente')?.value || '';

  let filteredPedidos = allPedidos;

  if (estadoFilter) {
    filteredPedidos = filteredPedidos.filter(pedido => pedido.estado === estadoFilter);
  }

  if (fechaFilter) {
    filteredPedidos = filteredPedidos.filter(pedido => {
      const pedidoFecha = new Date(pedido.fecha_pedido).toISOString().split('T')[0];
      return pedidoFecha === fechaFilter;
    });
  }

  if (clienteFilter) {
    filteredPedidos = filteredPedidos.filter(pedido => 
      pedido.cliente_nombre.toLowerCase().includes(clienteFilter.toLowerCase())
    );
  }

  currentPedidos = filteredPedidos;
  renderPedidosList(filteredPedidos);

  // Actualizar informaci√≥n de resultados
  updatePedidosInfo(filteredPedidos, estadoFilter, fechaFilter, clienteFilter);

  // Mostrar mensaje si no hay resultados pero mantener los filtros
  if (filteredPedidos.length === 0) {
    const container = document.getElementById('pedidosList');
    if (container) {
      container.innerHTML = `
        <div style="text-align: center; padding: 2rem; color: #6b7280;">
          <p style="font-size: 1.125rem; margin-bottom: 0.5rem;">No se encontraron pedidos</p>
          <p style="font-size: 0.875rem;">Intenta cambiar los filtros para ver m√°s resultados</p>
        </div>
      `;
    }
  }
}

// Actualizar informaci√≥n de resultados
function updatePedidosInfo(filteredPedidos, estadoFilter, fechaFilter, clienteFilter) {
  const pedidosCount = document.getElementById('pedidosCount');
  const pedidosFilters = document.getElementById('pedidosFilters');
  
  if (pedidosCount) {
    pedidosCount.textContent = `${filteredPedidos.length} pedido(s)`;
  }
  
  if (pedidosFilters) {
    const filters = [];
    if (estadoFilter) filters.push(`Estado: ${getStatusText(estadoFilter)}`);
    if (fechaFilter) filters.push(`Fecha: ${fechaFilter}`);
    if (clienteFilter) filters.push(`Cliente: "${clienteFilter}"`);
    
    const filterText = filters.length > 0 ? filters.join(', ') : 'Todos los pedidos';
    pedidosFilters.textContent = `Filtros: ${filterText}`;
  }
}

// Limpiar filtros
function clearPedidosFilters() {
  const estadoSelect = document.getElementById('filterEstado');
  const fechaInput = document.getElementById('filterFecha');
  const clienteInput = document.getElementById('filterCliente');
  
  if (estadoSelect) estadoSelect.value = '';
  if (fechaInput) fechaInput.value = '';
  if (clienteInput) clienteInput.value = '';
  
  filterPedidos(); // Re-apply filters to show all
}

// Ver detalles del pedido
function viewPedido(pedidoId) {
  const pedido = currentPedidos.find(p => p.id == pedidoId);
  if (!pedido) return;
  
  alert(`Pedido #${pedido.id}\nCliente: ${pedido.cliente_nombre}\nTotal: $${pedido.total}\nEstado: ${getStatusText(pedido.estado)}`);
}

// Editar pedido
function editPedido(pedidoId) {
  alert('Funcionalidad de edici√≥n en desarrollo...');
}

// Crear nuevo pedido
function showCreatePedidoModal() {
  alert('Funcionalidad de creaci√≥n en desarrollo...');
}
</script>
